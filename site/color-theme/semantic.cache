;; Object color-theme/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "color-theme/"
  :tables (list 
   (semanticdb-table "color-theme.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("sendmail" include nil nil [1871 1890]) ("reporter" include nil nil [1849 1868]) ("easymenu" include nil nil [1827 1846]) ("cl" include nil nil [1893 1906]) ("cus-face" include nil nil [2005 2024]) ("wid-edit" include nil nil [2025 2044]) ("color-theme-maintainer-address" variable (:constant-flag t :default-value "zedek@gnu.org") nil [2085 2184]) ("cond" code nil nil [2240 2448]) ("color-theme-xemacs-p" variable (:default-value (and (featurep (quote xemacs)) (string-match "XEmacs" emacs-version))) nil [2450 2608]) ("cond" code nil nil [3460 4079]) ("color-theme-alist" function (:arguments ("plist")) nil [4081 4791]) ("defgroup" code nil nil [4824 5005]) ("color-theme-legal-frame-parameters" variable (:default-value "\\(color\\|mode\\)$") nil [5007 5480]) ("color-theme-legal-variables" variable (:default-value "\\(color\\|face\\)$") nil [5482 5810]) ("color-theme-illegal-faces" variable (:default-value "^w3-") nil [5812 6129]) ("color-theme-illegal-default-attributes" variable (:default-value (quote (:family :height :width))) nil [6131 6431]) ("color-theme-is-global" variable (:user-visible-flag t :default-value t) nil [6433 7736]) ("color-theme-is-cumulative" variable (:user-visible-flag t :default-value t) nil [7738 7983]) ("color-theme-directory" variable nil nil [7985 8431]) ("color-theme-libraries" variable (:default-value (directory-files (file-name-as-directory (expand-file-name "themes" (file-name-directory (locate-library "color-theme")))) t "^color-theme")) nil [8433 9012]) ("color-theme-load-all-themes" variable (:default-value t) nil [9014 9217]) ("color-theme-mode-hook" variable nil nil [9219 9323]) ("color-theme-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote color-theme-install-at-point)) (define-key map (kbd "c") (quote list-colors-display)) (define-key map (kbd "d") (quote color-theme-describe)) (define-key map (kbd "f") (quote list-faces-display)) (define-key map (kbd "i") (quote color-theme-install-at-point)) (define-key map (kbd "l") (quote color-theme-install-at-point-for-current-frame)) (define-key map (kbd "p") (quote color-theme-print)) (define-key map (kbd "q") (quote bury-buffer)) (define-key map (kbd "?") (quote color-theme-describe)) (if color-theme-xemacs-p (define-key map (kbd "<button2>") (quote color-theme-install-at-mouse)) (define-key map (kbd "<mouse-2>") (quote color-theme-install-at-mouse))) map)) nil [9325 10138]) ("color-theme-initialized" variable nil nil [10140 10262]) ("color-theme-buffer-name" variable (:default-value "*Color Theme Selection*") nil [10264 10368]) ("color-theme-original-frame-alist" variable nil nil [10370 10473]) ("color-theme-history" variable nil nil [10475 10557]) ("color-theme-history-max-length" variable nil nil [10559 10858]) ("color-theme-counter" variable nil nil [10860 11039]) ("color-theme-entry-path" variable (:default-value (cond ((lookup-key global-map [menu-bar tools]) (quote ("tools"))) ((featurep (quote xemacs)) (setq tool-entry (quote ("Tools")))) (t (quote ("Tools"))))) nil [11041 11563]) ("color-theme-add-to-history" function (:arguments ("name")) nil [11565 12067]) ("color-themes" variable (:default-value (quote ((color-theme-aalto-dark "Aalto Dark" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aalto-light "Aalto Light" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aliceblue "Alice Blue" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-andreas "Andreas" "Andreas Busch <Andreas.Busch@politics.ox.ac.uk>") (color-theme-arjen "Arjen" "Arjen Wiersma <arjen@wiersma.org>") (color-theme-beige-diff "Beige Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-bharadwaj "Bharadwaj" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-bharadwaj-slate "Bharadwaj Slate" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-billw "Billw" "Bill White <billw@wolfram.com>") (color-theme-black-on-gray "BlackOnGray" "Sudhir Bhojwani <sbhojwani@altoweb.com>") (color-theme-blippblopp "Blipp Blopp" "Thomas Sicheritz-Ponten<thomas@biopython.org>") (color-theme-simple-1 "Black" "Jonadab <jonadab@bright.net>") (color-theme-blue-erc "Blue ERC" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-gnus "Blue Gnus" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-mood "Blue Mood" "Nelson Loyola <nloyola@yahoo.com>") (color-theme-blue-sea "Blue Sea" "Alex Schroeder <alex@gnu.org>") (color-theme-calm-forest "Calm Forest" "Artur Hefczyc <kobit@plusnet.pl>") (color-theme-charcoal-black "Charcoal Black" "Lars Chr. Hausmann <jazz@zqz.dk>") (color-theme-goldenrod "Cheap Goldenrod" "Alex Schroeder <alex@gnu.org>") (color-theme-clarity "Clarity and Beauty" "Richard Wellum <rwellum@cisco.com>") (color-theme-classic "Classic" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-comidia "Comidia" "Marcelo Dias de Toledo <mtole@ig.com.br>") (color-theme-jsc-dark "Cooper Dark" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light "Cooper Light" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light2 "Cooper Light 2" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-dark-blue "Dark Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-blue2 "Dark Blue 2" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-green "Dark Green" "eddy_woody@hotmail.com") (color-theme-dark-laptop "Dark Laptop" "Laurent Michel <ldm@cs.brown.edu>") (color-theme-deep-blue "Deep Blue" "Tomas Cerha <cerha@brailcom.org>") (color-theme-digital-ofs1 "Digital OFS1" "Gareth Owen <gowen@gwowen.freeserve.co.uk>") (color-theme-euphoria "Euphoria" "oGLOWo@oGLOWo.cjb.net") (color-theme-feng-shui "Feng Shui" "Walter Higgins <walterh@rocketmail.com>") (color-theme-fischmeister "Fischmeister" "Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>") (color-theme-gnome "Gnome" "Jonadab <jonadab@bright.net>") (color-theme-gnome2 "Gnome 2" "Alex Schroeder <alex@gnu.org>") (color-theme-gray1 "Gray1" "Paul Pulli <P.Pulli@motorola.com>") (color-theme-gray30 "Gray30" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-kingsajz "Green Kingsajz" "Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl>") (color-theme-greiner "Greiner" "Kevin Greiner <kgreiner@mapquest.com>") (color-theme-gtk-ide "GTK IDE" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-high-contrast "High Contrast" "Alex Schroeder <alex@gnu.org>") (color-theme-hober "Hober" "Edward O'Connor <ted@oconnor.cx>") (color-theme-infodoc "Infodoc" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-jb-simple "JB Simple" "jeff@dvns.com") (color-theme-jedit-grey "Jedit Grey" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-jonadabian "Jonadab" "Jonadab <jonadab@bright.net>") (color-theme-jonadabian-slate "Jonadabian Slate" "Jonadab <jonadab@bright.net>") (color-theme-katester "Katester" "Higgins_Walter@emc.com") (color-theme-late-night "Late Night" "Alex Schroeder <alex@gnu.org>") (color-theme-lawrence "Lawrence" "lawrence mitchell <wence@gmx.li>") (color-theme-lethe "Lethe" "Ivica Loncar <ivica.loncar@srk.fer.hr>") (color-theme-ld-dark "Linh Dang Dark" "Linh Dang <linhd@nortelnetworks.com>") (color-theme-marine "Marine" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-matrix "Matrix" "Walter Higgins <walterh@rocketmail.com>") (color-theme-marquardt "Marquardt" "Colin Marquardt <colin@marquardt-home.de>") (color-theme-midnight "Midnight" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-mistyday "Misty Day" "Hari Kumar <Hari.Kumar@mtm.kuleuven.ac.be>") (color-theme-montz "Montz" "Brady Montz <bradym@becomm.com>") (color-theme-oswald "Oswald" "Tom Oswald <toswald@sharplabs.com>") (color-theme-parus "Parus" "Jon K Hellan <hellan@acm.org>") (color-theme-pierson "Pierson" "Dan L. Pierson <dan@sol.control.com>") (color-theme-ramangalahy "Ramangalahy" "Solofo Ramangalahy <solofo@irisa.fr>") (color-theme-raspopovic "Raspopovic" "Pedja Raspopovic <pedja@lsil.com>") (color-theme-renegade "Renegade" "Dave Benjamin <ramen@ramenfest.com>") (color-theme-resolve "Resolve" "Damien Elmes <resolve@repose.cx>") (color-theme-retro-green "Retro Green" "Alex Schroeder <alex@gnu.org>") (color-theme-retro-orange "Retro Orange" "Alex Schroeder <alex@gnu.org>") (color-theme-robin-hood "Robin Hood" "Alex Schroeder <alex@gnu.org>") (color-theme-rotor "Rotor" "Jinwei Shen <shenjw@wam.umd.edu>") (color-theme-ryerson "Ryerson" "Luis Fernandes <elf@ee.ryerson.ca>") (color-theme-salmon-diff "Salmon Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-salmon-font-lock "Salmon Font-Lock" "Alex Schroeder <alex@gnu.org>" t) (color-theme-scintilla "Scintilla" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-shaman "Shaman" "shaman@interdon.net") (color-theme-sitaramv-nt "Sitaram NT" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-sitaramv-solaris "Sitaram Solaris" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-snow "Snow" "Nicolas Rist <Nicolas.Rist@alcatel.de>") (color-theme-snowish "Snowish" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-standard-ediff "Standard Ediff" "Emacs Team, added by Alex Schroeder <alex@gnu.org>" t) (color-theme-standard "Standard Emacs 20" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-21 "Standard Emacs 21" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-nw "Standard Emacs 21 No Window" "Emacs Team, added by D. Goel <deego@gnufans.org>") (color-theme-xemacs "Standard XEmacs" "XEmacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-subtle-blue "Subtle Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-subtle-hacker "Subtle Hacker" "Colin Walters <levanti@verbum.org>") (color-theme-taming-mr-arneson "Taming Mr Arneson" "Erik Arneson <erik@aarg.net>") (color-theme-taylor "Taylor" "Art Taylor <reeses@hemisphere.org>") (color-theme-tty-dark "TTY Dark" "O Polite <m2@plusseven.com>") (color-theme-vim-colors "Vim Colors" "Michael Soulier <msoulier@biryani.nssg.mitel.com>") (color-theme-whateveryouwant "Whateveryouwant" "Fabien Penso <penso@linuxfr.org>, color by Scott Jaderholm <scott@jaderholm.com>") (color-theme-wheat "Wheat" "Alex Schroeder <alex@gnu.org>") (color-theme-pok-wob "White On Black" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-pok-wog "White On Grey" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-word-perfect "WordPerfect" "Thomas Gehrlein <Thomas.Gehrlein@t-online.de>") (color-theme-xp "XP" "Girish Bharadwaj <girishb@gbvsoft.com>")))) nil [12218 20528]) ("color-theme-backup-original-values" function nil nil [20545 20904]) ("add-hook" code nil nil [20905 20968]) ("color-theme-select" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [20985 22699]) ("when" code nil nil [22701 22894]) ("color-theme-mode" function nil nil [22896 24748]) ("color-theme-describe" function (:user-visible-flag t) nil [24809 25128]) ("color-theme-install-at-mouse" function (:user-visible-flag t :arguments ("event")) nil [25145 25436]) ("color-theme-install-at-point" function (:user-visible-flag t) nil [25450 26290]) ("color-theme-install-at-point-for-current-frame" function (:user-visible-flag t) nil [26307 26589]) ("color-theme-filter" function (:arguments ("old-list" "regexp" "&optional" "exclude")) nil [26667 27825]) ("color-theme-spec-filter" function (:arguments ("spec")) nil [27827 28347]) ("color-theme-plist-delete" function (:arguments ("plist" "prop")) nil [28652 29129]) ("if" code nil nil [29452 30405]) ("color-theme-spec-canonical-font" function (:arguments ("atts")) nil [30706 31237]) ("color-theme-spec-resolve-height" function (:arguments ("old" "new")) nil [31696 32356]) ("color-theme-spec-resolve-inheritance" function (:arguments ("atts")) nil [32817 33989]) ("color-theme-spec-maybe-invert" function (:arguments ("atts")) nil [35006 35742]) ("color-theme-spec" function (:arguments ("face")) nil [36306 37138]) ("color-theme-get-params" function nil nil [37140 37605]) ("color-theme-get-vars" function nil nil [37607 38198]) ("color-theme-print-alist" function (:arguments ("alist")) nil [38200 38465]) ("color-theme-get-faces" function nil nil [38467 38940]) ("color-theme-get-face-definitions" function nil nil [38942 39114]) ("color-theme-print-faces" function (:arguments ("faces")) nil [39116 39387]) ("color-theme-reset-faces" function nil nil [39389 39965]) ("color-theme-print-theme" function (:arguments ("func" "doc" "params" "vars" "faces")) nil [39967 40731]) ("color-theme-print" function (:user-visible-flag t :arguments ("&optional" "buf")) nil [40748 42217]) ("color-theme-analyze-find-theme" function (:arguments ("code")) nil [42219 42566]) ("color-theme-analyze-add-face" function (:arguments ("a" "b" "regexp" "faces")) nil [43131 43765]) ("color-theme-analyze-add-faces" function (:arguments ("faces")) nil [44732 47995]) ("color-theme-analyze-remove-heights" function (:arguments ("faces")) nil [47997 48949]) ("color-theme-analyze-defun" function (:user-visible-flag t) nil [49194 51231]) ("color-theme-snapshot" function nil nil [51285 51317]) ("color-theme-make-snapshot" function nil nil [51334 52081]) ("color-theme-frame-param-frobbing-rules" variable (:default-value (quote ((foreground-color default foreground) (background-color default background)))) nil [52143 52473]) ("color-theme-frob-faces" function (:arguments ("params")) nil [52532 52962]) ("color-theme-alist-reduce" function (:arguments ("old-list")) nil [52964 53357]) ("color-theme-install-frame-params" function (:arguments ("params")) nil [53359 55399]) ("color-theme-install-variables" function (:arguments ("vars")) nil [55474 56237]) ("color-theme-install-faces" function (:arguments ("faces")) nil [56239 58241]) ("color-theme-canonic" function (:arguments ("theme")) nil [59178 59755]) ("color-theme-function" function (:arguments ("theme")) nil [59757 59851]) ("color-theme-frame-params" function (:arguments ("theme")) nil [59853 59955]) ("color-theme-variables" function (:arguments ("theme")) nil [59957 60045]) ("color-theme-faces" function (:arguments ("theme")) nil [60047 60131]) ("color-theme-merge-alists" function (:arguments ("&rest" "alists")) nil [60133 60507]) ("color-theme-compare" function (:user-visible-flag t :arguments ("theme-a" "theme-b")) nil [60894 62576]) ("color-theme-install" function (:arguments ("theme")) nil [62625 64341]) ("color-theme-submit" function (:user-visible-flag t) nil [64383 66301]) ("define-color-theme" function (:arguments ("name" "author" "description" "&rest" "forms")) nil [66335 66818]) ("color-theme-initialize" function (:user-visible-flag t) nil [66865 67397]) ("when" code nil nil [67399 67518]) ("color-theme" package nil nil [67758 67780]))
    :file "color-theme.el"
    :pointmax 67811
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
