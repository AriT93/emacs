This is message, produced by makeinfo version 4.8 from message.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Message: (message).   Mail and news composition mode that goes with Gnus.
END-INFO-DIR-ENTRY

   This file documents Message, the Emacs message composition mode.

   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being "A GNU Manual",
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled "GNU Free Documentation License" in
the Emacs manual.

   (a) The FSF's Back-Cover Text is: "You have freedom to copy and
modify this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development."

   This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.


File: message,  Node: Top,  Next: Interface,  Up: (dir)

Message
*******

All message composition from Gnus (both mail and news) takes place in
Message mode buffers.

* Menu:

* Interface::         Setting up message buffers.
* Commands::          Commands you can execute in message mode buffers.
* Variables::         Customizing the message buffers.
* Compatibility::     Making Message backwards compatible.
* Appendices::        More technical things.
* Index::             Variable, function and concept index.
* Key Index::         List of Message mode keys.

   This manual corresponds to Message v5.10.6.  Message is distributed
with the Gnus distribution bearing the same version number as this
manual.


File: message,  Node: Interface,  Next: Commands,  Prev: Top,  Up: Top

1 Interface
***********

When a program (or a person) wants to respond to a message - reply,
follow up, forward, cancel - the program (or person) should just put
point in the buffer where the message is and call the required command.
`Message' will then pop up a new `message' mode buffer with appropriate
headers filled out, and the user can edit the message before sending it.

* Menu:

* New Mail Message::     Editing a brand new mail message.
* New News Message::     Editing a brand new news message.
* Reply::                Replying via mail.
* Wide Reply::           Responding to all people via mail.
* Followup::             Following up via news.
* Canceling News::       Canceling a news article.
* Superseding::          Superseding a message.
* Forwarding::           Forwarding a message via news or mail.
* Resending::            Resending a mail message.
* Bouncing::             Bouncing a mail message.
* Mailing Lists::        Send mail to mailing lists.


File: message,  Node: New Mail Message,  Next: New News Message,  Up: Interface

1.1 New Mail Message
====================

The `message-mail' command pops up a new message buffer.

   Two optional parameters are accepted: The first will be used as the
`To' header and the second as the `Subject' header.  If these are
`nil', those two headers will be empty.


File: message,  Node: New News Message,  Next: Reply,  Prev: New Mail Message,  Up: Interface

1.2 New News Message
====================

The `message-news' command pops up a new message buffer.

   This function accepts two optional parameters.  The first will be
used as the `Newsgroups' header and the second as the `Subject' header.
If these are `nil', those two headers will be empty.


File: message,  Node: Reply,  Next: Wide Reply,  Prev: New News Message,  Up: Interface

1.3 Reply
=========

The `message-reply' function pops up a message buffer that's a reply to
the message in the current buffer.

   Message uses the normal methods to determine where replies are to go
(*note Responses::), but you can change the behavior to suit your needs
by fiddling with the `message-reply-to-function' variable.

   If you want the replies to go to the `Sender' instead of the `From',
you could do something like this:

     (setq message-reply-to-function
           (lambda ()
            (cond ((equal (mail-fetch-field "from") "somebody")
                    (list (cons 'To (mail-fetch-field "sender"))))
                  (t
                   nil))))

   This function will be called narrowed to the head of the article
that is being replied to.

   As you can see, this function should return a string if it has an
opinion as to what the To header should be.  If it does not, it should
just return `nil', and the normal methods for determining the To header
will be used.

   This function can also return a list.  In that case, each list
element should be a cons, where the CAR should be the name of a header
(e.g. `Cc') and the CDR should be the header value (e.g.
`larsi@ifi.uio.no').  All these headers will be inserted into the head
of the outgoing mail.


File: message,  Node: Wide Reply,  Next: Followup,  Prev: Reply,  Up: Interface

1.4 Wide Reply
==============

The `message-wide-reply' pops up a message buffer that's a wide reply
to the message in the current buffer.  A "wide reply" is a reply that
goes out to all people listed in the `To', `From' (or `Reply-to') and
`Cc' headers.

   Message uses the normal methods to determine where wide replies are
to go, but you can change the behavior to suit your needs by fiddling
with the `message-wide-reply-to-function'.  It is used in the same way
as `message-reply-to-function' (*note Reply::).

   Addresses that match the `message-dont-reply-to-names' regular
expression will be removed from the `Cc' header.

   If `message-wide-reply-confirm-recipients' is non-`nil' you will be
asked to confirm that you want to reply to multiple recipients.  The
default is `nil'.


File: message,  Node: Followup,  Next: Canceling News,  Prev: Wide Reply,  Up: Interface

1.5 Followup
============

The `message-followup' command pops up a message buffer that's a
followup to the message in the current buffer.

   Message uses the normal methods to determine where followups are to
go, but you can change the behavior to suit your needs by fiddling with
the `message-followup-to-function'.  It is used in the same way as
`message-reply-to-function' (*note Reply::).

   The `message-use-followup-to' variable says what to do about
`Followup-To' headers.  If it is `use', always use the value.  If it is
`ask' (which is the default), ask whether to use the value.  If it is
`t', use the value unless it is `poster'.  If it is `nil', don't use
the value.


File: message,  Node: Canceling News,  Next: Superseding,  Prev: Followup,  Up: Interface

1.6 Canceling News
==================

The `message-cancel-news' command cancels the article in the current
buffer.

   The value of `message-cancel-message' is inserted in the body of the
cancel message.  The default is `I am canceling my own article.'.

   When Message posts news messages, it inserts `Cancel-Lock' headers
by default.  This is a cryptographic header that ensures that only you
can cancel your own messages, which is nice.  The downside is that if
you lose your `.emacs' file (which is where Gnus stores the secret
cancel lock password (which is generated automatically the first time
you use this feature)), you won't be able to cancel your message.

   Whether to insert the header or not is controlled by the
`message-insert-canlock' variable.

   Not many news servers respect the `Cancel-Lock' header yet, but this
is expected to change in the future.


File: message,  Node: Superseding,  Next: Forwarding,  Prev: Canceling News,  Up: Interface

1.7 Superseding
===============

The `message-supersede' command pops up a message buffer that will
supersede the message in the current buffer.

   Headers matching the `message-ignored-supersedes-headers' are
removed before popping up the new message buffer.  The default is
`^Path:\\|^Date\\|^NNTP-Posting-Host:\\|^Xref:\\|^Lines:\\|
^Received:\\|^X-From-Line:\\|Return-Path:\\|^Supersedes:'.


File: message,  Node: Forwarding,  Next: Resending,  Prev: Superseding,  Up: Interface

1.8 Forwarding
==============

The `message-forward' command pops up a message buffer to forward the
message in the current buffer.  If given a prefix, forward using news.

`message-forward-ignored-headers'
     All headers that match this regexp will be deleted when forwarding
     a message.

`message-make-forward-subject-function'
     A list of functions that are called to generate a subject header
     for forwarded messages.  The subject generated by the previous
     function is passed into each successive function.

     The provided functions are:

    `message-forward-subject-author-subject'
          Source of article (author or newsgroup), in brackets followed
          by the subject.

    `message-forward-subject-fwd'
          Subject of article with `Fwd:' prepended to it.

`message-wash-forwarded-subjects'
     If this variable is `t', the subjects of forwarded messages have
     the evidence of previous forwards (such as `Fwd:', `Re:', `(fwd)')
     removed before the new subject is constructed.  The default value
     is `nil'.

`message-forward-as-mime'
     If this variable is `t' (the default), forwarded messages are
     included as inline MIME RFC822 parts.  If it's `nil', forwarded
     messages will just be copied inline to the new message, like
     previous, non MIME-savvy versions of Gnus would do.

`message-forward-before-signature'
     If non-`nil', put forwarded message before signature, else after.



File: message,  Node: Resending,  Next: Bouncing,  Prev: Forwarding,  Up: Interface

1.9 Resending
=============

The `message-resend' command will prompt the user for an address and
resend the message in the current buffer to that address.

   Headers that match the `message-ignored-resent-headers' regexp will
be removed before sending the message.  The default is
`^Return-receipt'.


File: message,  Node: Bouncing,  Next: Mailing Lists,  Prev: Resending,  Up: Interface

1.10 Bouncing
=============

The `message-bounce' command will, if the current buffer contains a
bounced mail message, pop up a message buffer stripped of the bounce
information.  A "bounced message" is typically a mail you've sent out
that has been returned by some `mailer-daemon' as undeliverable.

   Headers that match the `message-ignored-bounced-headers' regexp will
be removed before popping up the buffer.  The default is
`^\\(Received\\|Return-Path\\):'.


File: message,  Node: Mailing Lists,  Prev: Bouncing,  Up: Interface

1.11 Mailing Lists
==================

Sometimes while posting to mailing lists, the poster needs to direct
followups to the post to specific places.  The Mail-Followup-To (MFT)
was created to enable just this.  Two example scenarios where this is
useful:

   * A mailing list poster can use MFT to express that responses should
     be sent to just the list, and not the poster as well.  This will
     happen if the poster is already subscribed to the list.

   * A mailing list poster can use MFT to express that responses should
     be sent to the list and the poster as well.  This will happen if
     the poster is not subscribed to the list.

   * If a message is posted to several mailing lists, MFT may also be
     used to direct the following discussion to one list only, because
     discussions that are spread over several lists tend to be
     fragmented and very difficult to follow.


   Gnus honors the MFT header in other's messages (i.e. while following
up to someone else's post) and also provides support for generating
sensible MFT headers for outgoing messages as well.

1.11.1 Composing a correct MFT header automagically
---------------------------------------------------

The first step in getting Gnus to automagically generate a MFT header
in posts you make is to give Gnus a list of the mailing lists addresses
you are subscribed to.  You can do this in more than one way.  The
following variables would come in handy.

`message-subscribed-addresses'
     This should be a list of addresses the user is subscribed to.  Its
     default value is `nil'.  Example:
          (setq message-subscribed-addresses
                '("ding@gnus.org" "bing@noose.org"))

`message-subscribed-regexps'
     This should be a list of regexps denoting the addresses of mailing
     lists subscribed to.  Default value is `nil'.  Example: If you
     want to achieve the same result as above:
          (setq message-subscribed-regexps
                '("\\(ding@gnus\\)\\|\\(bing@noose\\)\\.org")

`message-subscribed-address-functions'
     This can be a list of functions to be called (one at a time!!) to
     determine the value of MFT headers.  It is advisable that these
     functions not take any arguments.  Default value is `nil'.

     There is a pre-defined function in Gnus that is a good candidate
     for this variable.  `gnus-find-subscribed-addresses' is a function
     that returns a list of addresses corresponding to the groups that
     have the `subscribed' (*note Group Parameters: (gnus)Group
     Parameters.) group parameter set to a non-`nil' value.  This is
     how you would do it.

          (setq message-subscribed-address-functions
                '(gnus-find-subscribed-addresses))

`message-subscribed-address-file'
     You might be one organised human freak and have a list of
     addresses of all subscribed mailing lists in a separate file!
     Then you can just set this variable to the name of the file and
     life would be good.


   You can use one or more of the above variables.  All their values are
"added" in some way that works :-)

   Now you are all set.  Just start composing a message as you normally
do.  And just send it; as always.  Just before the message is sent out,
Gnus' MFT generation thingy kicks in and checks if the message already
has a MFT field.  If there is one, it is left alone.  (Except if it's
empty - in that case, the field is removed and is not replaced with an
automatically generated one.  This lets you disable MFT generation on a
per-message basis.)  If there is none, then the list of recipient
addresses (in the To: and Cc: headers) is checked to see if one of them
is a list address you are subscribed to.  If none of them is a list
address, then no MFT is generated; otherwise, a MFT is added to the
other headers and set to the value of all addresses in To: and Cc:

   Hm.  "So", you ask, "what if I send an email to a list I am not
subscribed to?  I want my MFT to say that I want an extra copy."  (This
is supposed to be interpreted by others the same way as if there were no
MFT, but you can use an explicit MFT to override someone else's
to-address group parameter.)  The function
`message-generate-unsubscribed-mail-followup-to' might come in handy.
It is bound to `C-c C-f C-a' by default.  In any case, you can insert a
MFT of your own choice; `C-c C-f C-m' (`message-goto-mail-followup-to')
will help you get started.

1.11.2 Honoring an MFT post
---------------------------

When you followup to a post on a mailing list, and the post has a MFT
header, Gnus' action will depend on the value of the variable
`message-use-mail-followup-to'.  This variable can be one of:

`use'
     Always honor MFTs.  The To: and Cc: headers in your followup will
     be  derived from the MFT header of the original post.  This is the
     default.

`nil'
     Always dishonor MFTs (just ignore the darned thing)

`ask'
     Gnus will prompt you for an action.


   It is considered good netiquette to honor MFT, as it is assumed the
fellow who posted a message knows where the followups need to go better
than you do.


File: message,  Node: Commands,  Next: Variables,  Prev: Interface,  Up: Top

2 Commands
**********

* Menu:

* Buffer Entry::        Commands after entering a Message buffer.
* Header Commands::     Commands for moving headers or changing headers.
* Movement::            Moving around in message buffers.
* Insertion::           Inserting things into message buffers.
* MIME::                MIME considerations.
* IDNA::                Non-ASCII domain name considerations.
* Security::            Signing and encrypting messages.
* Various Commands::    Various things.
* Sending::             Actually sending the message.
* Mail Aliases::        How to use mail aliases.
* Spelling::            Having Emacs check your spelling.


File: message,  Node: Buffer Entry,  Next: Header Commands,  Up: Commands

2.1 Buffer Entry
================

You most often end up in a Message buffer when responding to some other
message of some sort.  Message does lots of handling of quoted text, and
may remove signatures, reformat the text, or the like--depending on
which used settings you're using.  Message usually gets things right,
but sometimes it stumbles.  To help the user unwind these stumblings,
Message sets the undo boundary before each major automatic action it
takes.  If you press the undo key (usually located at `C-_') a few
times, you will get back the un-edited message you're responding to.


File: message,  Node: Header Commands,  Next: Movement,  Prev: Buffer Entry,  Up: Commands

2.2 Header Commands
===================

2.2.1 Commands for moving to headers
------------------------------------

These following commands move to the header in question.  If it doesn't
exist, it will be inserted.

`C-c ?'
     Describe the message mode.

`C-c C-f C-t'
     Go to the `To' header (`message-goto-to').

`C-c C-f C-o'
     Go to the `From' header (`message-goto-from').  (The "o" in the
     key binding is for Originator.)

`C-c C-f C-b'
     Go to the `Bcc' header (`message-goto-bcc').

`C-c C-f C-f'
     Go to the `Fcc' header (`message-goto-fcc').

`C-c C-f C-c'
     Go to the `Cc' header (`message-goto-cc').

`C-c C-f C-s'
     Go to the `Subject' header (`message-goto-subject').

`C-c C-f C-r'
     Go to the `Reply-To' header (`message-goto-reply-to').

`C-c C-f C-n'
     Go to the `Newsgroups' header (`message-goto-newsgroups').

`C-c C-f C-d'
     Go to the `Distribution' header (`message-goto-distribution').

`C-c C-f C-o'
     Go to the `Followup-To' header (`message-goto-followup-to').

`C-c C-f C-k'
     Go to the `Keywords' header (`message-goto-keywords').

`C-c C-f C-u'
     Go to the `Summary' header (`message-goto-summary').

`C-c C-f C-i'
     This inserts the `Importance:' header with a value of `high'.
     This header is used to signal the importance of the message to the
     receiver.  If the header is already present in the buffer, it
     cycles between the three valid values according to RFC 1376:
     `low', `normal' and `high'.

`C-c C-f C-a'
     Insert a reasonable `Mail-Followup-To:' header (*note Mailing
     Lists::) in a post to an unsubscribed list.  When making original
     posts to a mailing list you are not subscribed to, you have to
     type in a `Mail-Followup-To:' header by hand.  The contents,
     usually, are the addresses of the list and your own address.  This
     function inserts such a header automatically.  It fetches the
     contents of the `To:' header in the current mail buffer, and
     appends the current `user-mail-address'.

     If the optional argument `include-cc' is non-`nil', the addresses
     in the `Cc:' header are also put into the `Mail-Followup-To:'
     header.


2.2.2 Commands to change headers
--------------------------------

`C-c C-o'
     Sort headers according to `message-header-format-alist'
     (`message-sort-headers').

`C-c C-t'
     Insert a `To' header that contains the `Reply-To' or `From' header
     of the message you're following up (`message-insert-to').

`C-c C-n'
     Insert a `Newsgroups' header that reflects the `Followup-To' or
     `Newsgroups' header of the article you're replying to
     (`message-insert-newsgroups').

`C-c C-l'
     Send a message to the list only.  Remove all addresses but the list
     address from `To:' and `Cc:' headers.

`C-c M-n'
     Insert a request for a disposition notification.
     (`message-insert-disposition-notification-to').  This means that
     if the recipient support RFC 2298 she might send you a
     notification that she received the message.

`M-x message-insert-importance-high'
     Insert an `Importance' header with a value of `high', deleting
     headers if necessary.

`M-x message-insert-importance-low'
     Insert an `Importance' header with a value of `low', deleting
     headers if necessary.

`C-c C-f s'
     Change the current `Subject' header.  Ask for new `Subject' header
     and append `(was: <Old Subject>)'.  The old subject can be
     stripped on replying, see `message-subject-trailing-was-query'
     (*note Message Headers::).

`C-c C-f x'
     Ask for an additional `Newsgroups' and `FollowUp-To' for a
     cross-post.  `message-cross-post-followup-to' mangles
     `FollowUp-To' and `Newsgroups' header to point to group.  If
     `message-cross-post-default' is `nil' or if called with a
     prefix-argument `Follow-Up' is set, but the message is not
     cross-posted.

`C-c C-f t'
     Replace contents of `To' header with contents of `Cc' or `Bcc'
     header.

`C-c C-f w'
     Insert `To' and `Cc' headers as if you were doing a wide reply.

`C-c C-f a'
     Insert `X-No-Archive: Yes' in the header and a note in the body.
     The header and the note can be customized using
     `message-archive-header' and `message-archive-note'.  When called
     with a prefix argument, ask for a text to insert.  If you don't
     want the note in the body, set `message-archive-note' to `nil'.



File: message,  Node: Movement,  Next: Insertion,  Prev: Header Commands,  Up: Commands

2.3 Movement
============

`C-c C-b'
     Move to the beginning of the body of the message
     (`message-goto-body').

`C-c C-i'
     Move to the signature of the message (`message-goto-signature').

`C-a'
     If at beginning of header value, go to beginning of line, else go
     to beginning of header value.  (The header value comes after the
     header name and the colon.)  This behaviour can be disabled by
     toggling the variable `message-beginning-of-line'.



File: message,  Node: Insertion,  Next: MIME,  Prev: Movement,  Up: Commands

2.4 Insertion
=============

`C-c C-y'
     Yank the message that's being replied to into the message buffer
     (`message-yank-original').

`C-c C-M-y'
     Prompt for a buffer name and yank the contents of that buffer into
     the message buffer (`message-yank-buffer').

`C-c C-q'
     Fill the yanked message (`message-fill-yanked-message').  Warning:
     Can severely mess up the yanked text if its quoting conventions are
     strange.  You'll quickly get a feel for when it's safe, though.
     Anyway, just remember that `C-x u' (`undo') is available and
     you'll be all right.

`C-c C-w'
     Insert a signature at the end of the buffer
     (`message-insert-signature').

`C-c M-h'
     Insert the message headers (`message-insert-headers').

`C-c M-m'
     Mark some region in the current article with enclosing tags.  See
     `message-mark-insert-begin' and `message-mark-insert-end'.

`C-c M-f'
     Insert a file in the current article with enclosing tags.  See
     `message-mark-insert-begin' and `message-mark-insert-end'.



File: message,  Node: MIME,  Next: IDNA,  Prev: Insertion,  Up: Commands

2.5 MIME
========

Message is a MIME-compliant posting agent.  The user generally doesn't
have to do anything to make the MIME happen--Message will automatically
add the `Content-Type' and `Content-Transfer-Encoding' headers.

   The most typical thing users want to use the multipart things in
MIME for is to add "attachments" to mail they send out.  This can be
done with the `C-c C-a' command, which will prompt for a file name and
a MIME type.

   You can also create arbitrarily complex multiparts using the MML
language (*note Composing: (emacs-mime)Composing.).


File: message,  Node: IDNA,  Next: Security,  Prev: MIME,  Up: Commands

2.6 IDNA
========

Message is a IDNA-compliant posting agent.  The user generally doesn't
have to do anything to make the IDNA happen--Message will encode
non-ASCII domain names in `From', `To', and `Cc' headers automatically.

   Until IDNA becomes more well known, Message queries you whether IDNA
encoding of the domain name really should occur.  Some users might not
be aware that domain names can contain non-ASCII now, so this gives
them a safety net if they accidently typed a non-ASCII domain name.

   The `message-use-idna' variable control whether IDNA is used.  If
the variable is `nil' no IDNA encoding will ever happen, if it is set
to the symbol `ask' the user will be queried (the default), and if set
to `t' IDNA encoding happens automatically.

   If you want to experiment with the IDNA encoding, you can invoke
`M-x message-idna-to-ascii-rhs RET' in the message buffer to have the
non-ASCII domain names encoded while you edit the message.

   Note that you must have GNU Libidn
(http://www.gnu.org/software/libidn/) installed in order to use this
functionality.


File: message,  Node: Security,  Next: Various Commands,  Prev: IDNA,  Up: Commands

2.7 Security
============

Using the MML language, Message is able to create digitally signed and
digitally encrypted messages.  Message (or rather MML) currently
support PGP (RFC 1991), PGP/MIME (RFC 2015/3156) and S/MIME.
Instructing MML to perform security operations on a MIME part is done
using the `C-c C-m s' key map for signing and the `C-c C-m c' key map
for encryption, as follows.

`C-c C-m s s'
     Digitally sign current message using S/MIME.

`C-c C-m s o'
     Digitally sign current message using PGP.

`C-c C-m s p'
     Digitally sign current message using PGP/MIME.

`C-c C-m c s'
     Digitally encrypt current message using S/MIME.

`C-c C-m c o'
     Digitally encrypt current message using PGP.

`C-c C-m c p'
     Digitally encrypt current message using PGP/MIME.

`C-c C-m C-n'
     Remove security related MML tags from message.


   These commands do not immediately sign or encrypt the message, they
merely insert the proper MML secure tag to instruct the MML engine to
perform that operation when the message is actually sent.  They may
perform other operations too, such as locating and retrieving a S/MIME
certificate of the person you wish to send encrypted mail to.  When the
mml parsing engine converts your MML into a properly encoded MIME
message, the secure tag will be replaced with either a part or a
multipart tag.  If your message contains other mml parts, a multipart
tag will be used; if no other parts are present in your message a
single part tag will be used.  This way, message mode will do the Right
Thing (TM) with signed/encrypted multipart messages.

   Since signing and especially encryption often is used when sensitive
information is sent, you may want to have some way to ensure that your
mail is actually signed or encrypted.  After invoking the above
sign/encrypt commands, it is possible to preview the raw article by
using `C-u C-c RET P' (`mml-preview').  Then you can verify that your
long rant about what your ex-significant other or whomever actually did
with that funny looking person at that strange party the other night,
actually will be sent encrypted.

   _Note!_  Neither PGP/MIME nor S/MIME encrypt/signs RFC822 headers.
They only operate on the MIME object.  Keep this in mind before sending
mail with a sensitive Subject line.

   By default, when encrypting a message, Gnus will use the
"signencrypt" mode, which means the message is both signed and
encrypted.  If you would like to disable this for a particular message,
give the `mml-secure-message-encrypt-*' command a prefix argument,
e.g., `C-u C-c C-m c p'.

   Actually using the security commands above is not very difficult.  At
least not compared with making sure all involved programs talk with each
other properly.  Thus, we now describe what external libraries or
programs are required to make things work, and some small general hints.

2.7.1 Using S/MIME
------------------

_Note!_  This section assume you have a basic familiarity with modern
cryptography, S/MIME, various PKCS standards, OpenSSL and so on.

   The S/MIME support in Message (and MML) require OpenSSL.  OpenSSL
performs the actual S/MIME sign/encrypt operations.  OpenSSL can be
found at `http://www.openssl.org/'.  OpenSSL 0.9.6 and later should
work.  Version 0.9.5a cannot extract mail addresses from certificates,
and it insert a spurious CR character into MIME separators so you may
wish to avoid it if you would like to avoid being regarded as someone
who send strange mail.  (Although by sending S/MIME messages you've
probably already lost that contest.)

   To be able to send encrypted mail, a personal certificate is not
required.  Message (MML) need a certificate for the person to whom you
wish to communicate with though.  You're asked for this when you type
`C-c C-m c s'.  Currently there are two ways to retrieve this
certificate, from a local file or from DNS.  If you chose a local file,
it need to contain a X.509 certificate in PEM format.  If you chose
DNS, you're asked for the domain name where the certificate is stored,
the default is a good guess.  To my belief, Message (MML) is the first
mail agent in the world to support retrieving S/MIME certificates from
DNS, so you're not likely to find very many certificates out there.  At
least there should be one, stored at the domain `simon.josefsson.org'.
LDAP is a more popular method of distributing certificates, support for
it is planned.  (Meanwhile, you can use `ldapsearch' from the command
line to retrieve a certificate into a file and use it.)

   As for signing messages, OpenSSL can't perform signing operations
without some kind of configuration.  Especially, you need to tell it
where your private key and your certificate is stored.  MML uses an
Emacs interface to OpenSSL, aptly named `smime.el', and it contain a
`custom' group used for this configuration.  So, try `M-x
customize-group RET smime RET' and look around.

   Currently there is no support for talking to a CA (or RA) to create
your own certificate.  None is planned either.  You need to do this
manually with OpenSSL or using some other program.  I used Netscape and
got a free S/MIME certificate from one of the big CA's on the net.
Netscape is able to export your private key and certificate in PKCS #12
format.  Use OpenSSL to convert this into a plain X.509 certificate in
PEM format as follows.

     $ openssl pkcs12 -in ns.p12 -clcerts -nodes > key+cert.pem

   The `key+cert.pem' file should be pointed to from the `smime-keys'
variable.  You should now be able to send signed mail.

   _Note!_  Your private key is now stored unencrypted in the file, so
take care in handling it.  Storing encrypted keys on the disk are
supported, and Gnus will ask you for a passphrase before invoking
OpenSSL.  Read the OpenSSL documentation for how to achieve this.  If
you use unencrypted keys (e.g., if they are on a secure storage, or if
you are on a secure single user machine) simply press `RET' at the
passphrase prompt.

2.7.2 Using PGP/MIME
--------------------

PGP/MIME requires an external OpenPGP implementation, such as GNU
Privacy Guard (http://www.gnupg.org/).  Pre-OpenPGP implementations
such as PGP 2.x and PGP 5.x are also supported.  One Emacs interface to
the PGP implementations, PGG (*note PGG: (pgg)Top.), is included, but
Mailcrypt and Florian Weimer's `gpg.el' are also supported.

   Note, if you are using the `gpg.el' you must make sure that the
directory specified by `gpg-temp-directory' have permissions 0700.

   Creating your own key is described in detail in the documentation of
your PGP implementation, so we refer to it.

   If you have imported your old PGP 2.x key into GnuPG, and want to
send signed and encrypted messages to your fellow PGP 2.x users, you'll
discover that the receiver cannot understand what you send. One
solution is to use PGP 2.x instead (i.e., if you use `pgg', set
`pgg-default-scheme' to `pgp').  If you do want to use GnuPG, you can
use a compatibility script called `gpg-2comp' available from
`http://muppet.faveve.uni-stuttgart.de/~gero/gpg-2comp/'.  You could
also convince your fellow PGP 2.x users to convert to GnuPG.  As a
final workaround, you can make the sign and encryption work in two
steps; separately sign, then encrypt a message.  If you would like to
change this behavior you can customize the
`mml-signencrypt-style-alist' variable.  For example:

     (setq mml-signencrypt-style-alist '(("smime" separate)
                                         ("pgp" separate)
                                         ("pgpauto" separate)
                                         ("pgpmime" separate)))

   This causes to sign and encrypt in two passes, thus generating a
message that can be understood by PGP version 2.

   (Refer to `http://www.gnupg.org/gph/en/pgp2x.html' for more
information about the problem.)


File: message,  Node: Various Commands,  Next: Sending,  Prev: Security,  Up: Commands

2.8 Various Commands
====================

`C-c C-r'
     Caesar rotate (aka. rot13) the current message
     (`message-caesar-buffer-body').  If narrowing is in effect, just
     rotate the visible portion of the buffer.  A numerical prefix says
     how many places to rotate the text.  The default is 13.

`C-c C-e'
     Elide the text between point and mark (`message-elide-region').
     The text is killed and replaced with the contents of the variable
     `message-elide-ellipsis'.  The default value is to use an ellipsis
     (`[...]').

`C-c C-z'
     Kill all the text up to the signature, or if that's missing, up to
     the end of the message (`message-kill-to-signature').

`C-c C-v'
     Delete all text in the body of the message that is outside the
     region (`message-delete-not-region').

`M-RET'
     Insert four newlines, and then reformat if inside quoted text.

     Here's an example:

          > This is some quoted text.  And here's more quoted text.

     If point is before `And' and you press `M-RET', you'll get:

          > This is some quoted text.

          *

          > And here's more quoted text.

     `*' says where point will be placed.

`C-c M-r'
     Rename the buffer (`message-rename-buffer').  If given a prefix,
     prompt for a new buffer name.

`TAB'
     If non-`nil' execute the function specified in
     `message-tab-body-function'.  Otherwise use the function bound to
     `TAB' in `text-mode-map' or `global-map'.



File: message,  Node: Sending,  Next: Mail Aliases,  Prev: Various Commands,  Up: Commands

2.9 Sending
===========

`C-c C-c'
     Send the message and bury the current buffer
     (`message-send-and-exit').

`C-c C-s'
     Send the message (`message-send').

`C-c C-d'
     Bury the message buffer and exit (`message-dont-send').

`C-c C-k'
     Kill the message buffer and exit (`message-kill-buffer').



File: message,  Node: Mail Aliases,  Next: Spelling,  Prev: Sending,  Up: Commands

2.10 Mail Aliases
=================

The `message-mail-alias-type' variable controls what type of mail alias
expansion to use.  Currently only one form is supported--Message uses
`mailabbrev' to handle mail aliases.  If this variable is `nil', no
mail alias expansion will be performed.

   `mailabbrev' works by parsing the `/etc/mailrc' and `~/.mailrc'
files.  These files look like:

     alias lmi "Lars Magne Ingebrigtsen <larsi@ifi.uio.no>"
     alias ding "ding@ifi.uio.no (ding mailing list)"

   After adding lines like this to your `~/.mailrc' file, you should be
able to just write `lmi' in the `To' or `Cc' (and so on) headers and
press `SPC' to expand the alias.

   No expansion will be performed upon sending of the message--all
expansions have to be done explicitly.


File: message,  Node: Spelling,  Prev: Mail Aliases,  Up: Commands

2.11 Spelling
=============

There are two popular ways to have Emacs spell-check your messages:
`ispell' and `flyspell'.  `ispell' is the older and probably more
popular package.  You typically first write the message, and then run
the entire thing through `ispell' and fix all the typos.  To have this
happen automatically when you send a message, put something like the
following in your `.emacs' file:

     (add-hook 'message-send-hook 'ispell-message)

   If you're in the habit of writing in different languages, this can be
controlled by the `ispell-message-dictionary-alist' variable:

     (setq ispell-message-dictionary-alist
           '(("^Newsgroups:.*\\bde\\." . "deutsch8")
             (".*" . "default")))

   `ispell' depends on having the external `ispell' command installed.

   The other popular method is using `flyspell'.  This package checks
your spelling while you're writing, and marks any mis-spelled words in
various ways.

   To use `flyspell', put something like the following in your `.emacs'
file:

     (defun my-message-setup-routine ()
       (flyspell-mode 1))
     (add-hook 'message-setup-hook 'my-message-setup-routine)

   `flyspell' depends on having the external `ispell' command installed.


File: message,  Node: Variables,  Next: Compatibility,  Prev: Commands,  Up: Top

3 Variables
***********

* Menu:

* Message Headers::             General message header stuff.
* Mail Headers::                Customizing mail headers.
* Mail Variables::              Other mail variables.
* News Headers::                Customizing news headers.
* News Variables::              Other news variables.
* Insertion Variables::         Customizing how things are inserted.
* Various Message Variables::   Other message variables.
* Sending Variables::           Variables for sending.
* Message Buffers::             How Message names its buffers.
* Message Actions::             Actions to be performed when exiting.


File: message,  Node: Message Headers,  Next: Mail Headers,  Up: Variables

3.1 Message Headers
===================

Message is quite aggressive on the message generation front.  It has to
be - it's a combined news and mail agent.  To be able to send combined
messages, it has to generate all headers itself (instead of letting the
mail/news system do it) to ensure that mail and news copies of messages
look sufficiently similar.

`message-generate-headers-first'
     If `t', generate all required headers before starting to compose
     the message.  This can also be a list of headers to generate:

          (setq message-generate-headers-first
                '(References))

     The variables `message-required-headers',
     `message-required-mail-headers' and
     `message-required-news-headers' specify which headers are required.

     Note that some headers will be removed and re-generated before
     posting, because of the variable `message-deletable-headers' (see
     below).

`message-draft-headers'
     When running Message from Gnus, the message buffers are associated
     with a draft group.  `message-draft-headers' says which headers
     should be generated when a draft is written to the draft group.

`message-from-style'
     Specifies how `From' headers should look.  There are four valid
     values:

    `nil'
          Just the address - `king@grassland.com'.

    `parens'
          `king@grassland.com (Elvis Parsley)'.

    `angles'
          `Elvis Parsley <king@grassland.com>'.

    `default'
          Look like `angles' if that doesn't require quoting, and
          `parens' if it does.  If even `parens' requires quoting, use
          `angles' anyway.


`message-deletable-headers'
     Headers in this list that were previously generated by Message
     will be deleted before posting.  Let's say you post an article.
     Then you decide to post it again to some other group, you naughty
     boy, so you jump back to the `*post-buf*' buffer, edit the
     `Newsgroups' line, and ship it off again.  By default, this
     variable makes sure that the old generated `Message-ID' is
     deleted, and a new one generated.  If this isn't done, the entire
     empire would probably crumble, anarchy would prevail, and cats
     would start walking on two legs and rule the world.  Allegedly.

`message-default-headers'
     This string is inserted at the end of the headers in all message
     buffers.

`message-subject-re-regexp'
     Responses to messages have subjects that start with `Re: '.  This
     is _not_ an abbreviation of the English word "response", but is
     Latin, and means "in response to".  Some illiterate nincompoops
     have failed to grasp this fact, and have "internationalized" their
     software to use abominations like `Aw: ' ("antwort") or `Sv: '
     ("svar") instead, which is meaningless and evil.  However, you may
     have to deal with users that use these evil tools, in which case
     you may set this variable to a regexp that matches these prefixes.
     Myself, I just throw away non-compliant mail.

     Here's an example of a value to deal with these headers when
     responding to a message:

          (setq message-subject-re-regexp
                (concat
                 "^[ \t]*"
                   "\\("
                     "\\("
                       "[Aa][Nn][Tt][Ww]\\.?\\|"     ; antw
                       "[Aa][Ww]\\|"                 ; aw
                       "[Ff][Ww][Dd]?\\|"            ; fwd
                       "[Oo][Dd][Pp]\\|"             ; odp
                       "[Rr][Ee]\\|"                 ; re
                       "[Rr][\311\351][Ff]\\.?\\|"   ; ref
                       "[Ss][Vv]"                    ; sv
                     "\\)"
                     "\\(\\[[0-9]*\\]\\)"
                     "*:[ \t]*"
                   "\\)"
                 "*[ \t]*"
                 ))

`message-subject-trailing-was-query'
     Controls what to do with trailing `(was: <old subject>)' in subject
     lines.  If `nil', leave the subject unchanged.  If it is the symbol
     `ask', query the user what do do.  In this case, the subject is
     matched against `message-subject-trailing-was-ask-regexp'.  If
     `message-subject-trailing-was-query' is t, always strip the
     trailing old subject.  In this case,
     `message-subject-trailing-was-regexp' is used.

`message-alternative-emails'
     A regexp to match the alternative email addresses.  The first
     matched address (not primary one) is used in the `From' field.

`message-allow-no-recipients'
     Specifies what to do when there are no recipients other than `Gcc'
     or `Fcc'.  If it is `always', the posting is allowed.  If it is
     `never', the posting is not allowed.  If it is `ask' (the
     default), you are prompted.

`message-hidden-headers'
     A regexp, a list of regexps, or a list where the first element is
     `not' and the rest are regexps.  It says which headers to keep
     hidden when composing a message.

          (setq message-hidden-headers
                '(not "From" "Subject" "To" "Cc" "Newsgroups"))

`message-header-synonyms'
     A list of lists of header synonyms.  E.g., if this list contains a
     member list with elements `Cc' and `To', then
     `message-carefully-insert-headers' will not insert a `To' header
     when the message is already `Cc'ed to the recipient.



File: message,  Node: Mail Headers,  Next: Mail Variables,  Prev: Message Headers,  Up: Variables

3.2 Mail Headers
================

`message-required-mail-headers'
     *Note News Headers::, for the syntax of this variable.  It is
     `(From Date Subject (optional . In-Reply-To) Message-ID Lines
     (optional . User-Agent))' by default.

`message-ignored-mail-headers'
     Regexp of headers to be removed before mailing.  The default is
     `^[GF]cc:\\|^Resent-Fcc:\\|^Xref:\\|^X-Draft-From:'.

`message-default-mail-headers'
     This string is inserted at the end of the headers in all message
     buffers that are initialized as mail.



File: message,  Node: Mail Variables,  Next: News Headers,  Prev: Mail Headers,  Up: Variables

3.3 Mail Variables
==================

`message-send-mail-function'
     Function used to send the current buffer as mail.  The default is
     `message-send-mail-with-sendmail'.  Other valid values include
     `message-send-mail-with-mh', `message-send-mail-with-qmail',
     `message-smtpmail-send-it', `smtpmail-send-it' and
     `feedmail-send-it'.

`message-mh-deletable-headers'
     Most versions of MH doesn't like being fed messages that contain
     the headers in this variable.  If this variable is non-`nil'
     (which is the default), these headers will be removed before
     mailing when sending messages via MH.  Set it to `nil' if your MH
     can handle these headers.

`message-qmail-inject-program'
     Location of the qmail-inject program.

`message-qmail-inject-args'
     Arguments passed to qmail-inject programs.  This should be a list
     of strings, one string for each argument.  It may also be a
     function.

     For e.g., if you wish to set the envelope sender address so that
     bounces go to the right place or to deal with listserv's usage of
     that address, you might set this variable to `'("-f"
     "you@some.where")'.

`message-sendmail-f-is-evil'
     Non-`nil' means don't add `-f username' to the sendmail command
     line.  Doing so would be even more evil than leaving it out.

`message-sendmail-envelope-from'
     When `message-sendmail-f-is-evil' is `nil', this specifies the
     address to use in the SMTP envelope.  If it is `nil', use
     `user-mail-address'.  If it is the symbol `header', use the `From'
     header of the message.

`message-mailer-swallows-blank-line'
     Set this to non-`nil' if the system's mailer runs the header and
     body together.  (This problem exists on SunOS 4 when sendmail is
     run in remote mode.)  The value should be an expression to test
     whether the problem will actually occur.

`message-send-mail-partially-limit'
     The limitation of messages sent as message/partial.  The lower
     bound of message size in characters, beyond which the message
     should be sent in several parts.  If it is `nil', the size is
     unlimited.



File: message,  Node: News Headers,  Next: News Variables,  Prev: Mail Variables,  Up: Variables

3.4 News Headers
================

`message-required-news-headers' a list of header symbols.  These
headers will either be automatically generated, or, if that's
impossible, they will be prompted for.  The following symbols are valid:

`From'
     This required header will be filled out with the result of the
     `message-make-from' function, which depends on the
     `message-from-style', `user-full-name', `user-mail-address'
     variables.

`Subject'
     This required header will be prompted for if not present already.

`Newsgroups'
     This required header says which newsgroups the article is to be
     posted to.  If it isn't present already, it will be prompted for.

`Organization'
     This optional header will be filled out depending on the
     `message-user-organization' variable.
     `message-user-organization-file' will be used if this variable is
     `t'.  This variable can also be a string (in which case this string
     will be used), or it can be a function (which will be called with
     no parameters and should return a string to be used).

`Lines'
     This optional header will be computed by Message.

`Message-ID'
     This required header will be generated by Message.  A unique ID
     will be created based on the date, time, user name and system
     name.  For the domain part, message will look (in this order) at
     `message-user-fqdn', `system-name', `mail-host-address' and
     `message-user-mail-address' (i.e. `user-mail-address') until a
     probably valid fully qualified domain name (FQDN) was found.

`User-Agent'
     This optional header will be filled out according to the
     `message-newsreader' local variable.

`In-Reply-To'
     This optional header is filled out using the `Date' and `From'
     header of the article being replied to.

`Expires'
     This extremely optional header will be inserted according to the
     `message-expires' variable.  It is highly deprecated and shouldn't
     be used unless you know what you're doing.

`Distribution'
     This optional header is filled out according to the
     `message-distribution-function' variable.  It is a deprecated and
     much misunderstood header.

`Path'
     This extremely optional header should probably never be used.
     However, some _very_ old servers require that this header is
     present.  `message-user-path' further controls how this `Path'
     header is to look.  If it is `nil', use the server name as the
     leaf node.  If it is a string, use the string.  If it is neither a
     string nor `nil', use the user name only.  However, it is highly
     unlikely that you should need to fiddle with this variable at all.

   In addition, you can enter conses into this list.  The CAR of this
cons should be a symbol.  This symbol's name is the name of the header,
and the CDR can either be a string to be entered verbatim as the value
of this header, or it can be a function to be called.  This function
should return a string to be inserted.  For instance, if you want to
insert `Mime-Version: 1.0', you should enter `(Mime-Version . "1.0")'
into the list.  If you want to insert a funny quote, you could enter
something like `(X-Yow . yow)' into the list.  The function `yow' will
then be called without any arguments.

   If the list contains a cons where the CAR of the cons is `optional',
the CDR of this cons will only be inserted if it is non-`nil'.

   If you want to delete an entry from this list, the following Lisp
snippet might be useful.  Adjust accordingly if you want to remove
another element.

     (setq message-required-news-headers
           (delq 'Message-ID message-required-news-headers))

   Other variables for customizing outgoing news articles:

`message-syntax-checks'
     Controls what syntax checks should not be performed on outgoing
     posts.  To disable checking of long signatures, for instance, add

          (signature . disabled)

     to this list.

     Valid checks are:

    `subject-cmsg'
          Check the subject for commands.

    `sender'
          Insert a new `Sender' header if the `From' header looks odd.

    `multiple-headers'
          Check for the existence of multiple equal headers.

    `sendsys'
          Check for the existence of version and sendsys commands.

    `message-id'
          Check whether the `Message-ID' looks ok.

    `from'
          Check whether the `From' header seems nice.

    `long-lines'
          Check for too long lines.

    `control-chars'
          Check for invalid characters.

    `size'
          Check for excessive size.

    `new-text'
          Check whether there is any new text in the messages.

    `signature'
          Check the length of the signature.

    `approved'
          Check whether the article has an `Approved' header, which is
          something only moderators should include.

    `empty'
          Check whether the article is empty.

    `invisible-text'
          Check whether there is any invisible text in the buffer.

    `empty-headers'
          Check whether any of the headers are empty.

    `existing-newsgroups'
          Check whether the newsgroups mentioned in the `Newsgroups' and
          `Followup-To' headers exist.

    `valid-newsgroups'
          Check whether the `Newsgroups' and `Followup-to' headers are
          valid syntactically.

    `repeated-newsgroups'
          Check whether the `Newsgroups' and `Followup-to' headers
          contains repeated group names.

    `shorten-followup-to'
          Check whether to add a `Followup-to' header to shorten the
          number of groups to post to.

     All these conditions are checked by default.

`message-ignored-news-headers'
     Regexp of headers to be removed before posting.  The default is
     `^NNTP-Posting-Host:\\|^Xref:\\|^[BGF]cc:\\|^Resent-Fcc:\\|^X-Draft-From:'.

`message-default-news-headers'
     This string is inserted at the end of the headers in all message
     buffers that are initialized as news.



File: message,  Node: News Variables,  Next: Insertion Variables,  Prev: News Headers,  Up: Variables

3.5 News Variables
==================

`message-send-news-function'
     Function used to send the current buffer as news.  The default is
     `message-send-news'.

`message-post-method'
     Gnusish "select method" (see the Gnus manual for details) used for
     posting a prepared news message.



File: message,  Node: Insertion Variables,  Next: Various Message Variables,  Prev: News Variables,  Up: Variables

3.6 Insertion Variables
=======================

`message-ignored-cited-headers'
     All headers that match this regexp will be removed from yanked
     messages.  The default is `.', which means that all headers will be
     removed.

`message-cite-prefix-regexp'
     Regexp matching the longest possible citation prefix on a line.

`message-citation-line-function'
     Function called to insert the citation line.  The default is
     `message-insert-citation-line', which will lead to citation lines
     that look like:

          Hallvard B Furuseth <h.b.furuseth@usit.uio.no> writes:

     Point will be at the beginning of the body of the message when this
     function is called.

     Note that Gnus provides a feature where clicking on `writes:'
     hides the cited text.  If you change the citation line too much,
     readers of your messages will have to adjust their Gnus, too.  See
     the variable `gnus-cite-attribution-suffix'.  *Note Article
     Highlighting: (gnus)Article Highlighting, for details.

`message-yank-prefix'
     When you are replying to or following up an article, you normally
     want to quote the person you are answering.  Inserting quoted text
     is done by "yanking", and each line you yank will have
     `message-yank-prefix' prepended to it (except for quoted and empty
     lines which uses `message-yank-cited-prefix').  The default is `>
     '.

`message-yank-cited-prefix'
     When yanking text from an article which contains no text or already
     cited text, each line will be prefixed with the contents of this
     variable.  The default is `>'.  See also `message-yank-prefix'.

`message-indentation-spaces'
     Number of spaces to indent yanked messages.

`message-cite-function'
     Function for citing an original message.  The default is
     `message-cite-original', which simply inserts the original message
     and prepends `> ' to each line.
     `message-cite-original-without-signature' does the same, but elides
     the signature.  You can also set it to `sc-cite-original' to use
     Supercite.

`message-indent-citation-function'
     Function for modifying a citation just inserted in the mail buffer.
     This can also be a list of functions.  Each function can find the
     citation between `(point)' and `(mark t)'.  And each function
     should leave point and mark around the citation text as modified.

`message-mark-insert-begin'
     String to mark the beginning of some inserted text.

`message-mark-insert-end'
     String to mark the end of some inserted text.

`message-signature'
     String to be inserted at the end of the message buffer.  If `t'
     (which is the default), the `message-signature-file' file will be
     inserted instead.  If a function, the result from the function
     will be used instead.  If a form, the result from the form will be
     used instead.  If this variable is `nil', no signature will be
     inserted at all.

`message-signature-file'
     File containing the signature to be inserted at the end of the
     buffer.  The default is `~/.signature'.

`message-signature-insert-empty-line'
     If `t' (the default value) an empty line is inserted before the
     signature separator.


   Note that RFC1036bis says that a signature should be preceded by the
three characters `-- ' on a line by themselves.  This is to make it
easier for the recipient to automatically recognize and process the
signature.  So don't remove those characters, even though you might feel
that they ruin your beautiful design, like, totally.

   Also note that no signature should be more than four lines long.
Including ASCII graphics is an efficient way to get everybody to
believe that you are silly and have nothing important to say.


File: message,  Node: Various Message Variables,  Next: Sending Variables,  Prev: Insertion Variables,  Up: Variables

3.7 Various Message Variables
=============================

`message-default-charset'
     Symbol naming a MIME charset.  Non-ASCII characters in messages
     are assumed to be encoded using this charset.  The default is
     `nil', which means ask the user.  (This variable is used only on
     non-MULE Emacsen.  *Note Charset Translation: (emacs-mime)Charset
     Translation, for details on the MULE-to-MIME translation process.

`message-signature-separator'
     Regexp matching the signature separator.  It is `^-- *$' by
     default.

`mail-header-separator'
     String used to separate the headers from the body.  It is `--text
     follows this line--' by default.

`message-directory'
     Directory used by many mailey things.  The default is `~/Mail/'.

`message-auto-save-directory'
     Directory where Message auto-saves buffers if Gnus isn't running.
     If `nil', Message won't auto-save.  The default is
     `~/Mail/drafts/'.

`message-signature-setup-hook'
     Hook run when initializing the message buffer.  It is run after the
     headers have been inserted but before the signature has been
     inserted.

`message-setup-hook'
     Hook run as the last thing when the message buffer has been
     initialized, but before yanked text is inserted.

`message-header-setup-hook'
     Hook called narrowed to the headers after initializing the headers.

     For instance, if you're running Gnus and wish to insert a
     `Mail-Copies-To' header in all your news articles and all messages
     you send to mailing lists, you could do something like the
     following:

          (defun my-message-header-setup-hook ()
            (let ((group (or gnus-newsgroup-name "")))
              (when (or (message-fetch-field "newsgroups")
                        (gnus-group-find-parameter group 'to-address)
                        (gnus-group-find-parameter group 'to-list))
                (insert "Mail-Copies-To: never\n"))))

          (add-hook 'message-header-setup-hook
                    'my-message-header-setup-hook)

`message-send-hook'
     Hook run before sending messages.

     If you want to add certain headers before sending, you can use the
     `message-add-header' function in this hook.  For instance: 

          (add-hook 'message-send-hook 'my-message-add-content)
          (defun my-message-add-content ()
            (message-add-header "X-In-No-Sense: Nonsense")
            (message-add-header "X-Whatever: no"))

     This function won't add the header if the header is already
     present.

`message-send-mail-hook'
     Hook run before sending mail messages.  This hook is run very late
     - just before the message is actually sent as mail.

`message-send-news-hook'
     Hook run before sending news messages.  This hook is run very late
     - just before the message is actually sent as news.

`message-sent-hook'
     Hook run after sending messages.

`message-cancel-hook'
     Hook run when canceling news articles.

`message-mode-syntax-table'
     Syntax table used in message mode buffers.

`message-strip-special-text-properties'
     Emacs has a number of special text properties which can break
     message composing in various ways.  If this option is set, message
     will strip these properties from the message composition buffer.
     However, some packages requires these properties to be present in
     order to work.  If you use one of these packages, turn this option
     off, and hope the message composition doesn't break too bad.

`message-send-method-alist'
     Alist of ways to send outgoing messages.  Each element has the form

          (TYPE PREDICATE FUNCTION)

    TYPE
          A symbol that names the method.

    PREDICATE
          A function called without any parameters to determine whether
          the message is a message of type TYPE.

    FUNCTION
          A function to be called if PREDICATE returns non-`nil'.
          FUNCTION is called with one parameter - the prefix.

          ((news message-news-p message-send-via-news)
           (mail message-mail-p message-send-via-mail))



File: message,  Node: Sending Variables,  Next: Message Buffers,  Prev: Various Message Variables,  Up: Variables

3.8 Sending Variables
=====================

`message-fcc-handler-function'
     A function called to save outgoing articles.  This function will be
     called with the name of the file to store the article in.  The
     default function is `message-output' which saves in Unix mailbox
     format.

`message-courtesy-message'
     When sending combined messages, this string is inserted at the
     start of the mailed copy.  If the string contains the format spec
     `%s', the newsgroups the article has been posted to will be
     inserted there.  If this variable is `nil', no such courtesy
     message will be added.  The default value is `"The following
     message is a courtesy copy of an article\\nthat has been posted to
     %s as well.\\n\\n"'.

`message-fcc-externalize-attachments'
     If `nil', attach files as normal parts in Fcc copies; if it is
     non-`nil', attach local files as external parts.

`message-interactive'
     If non-`nil' wait for and display errors when sending a message;
     if `nil' let the mailer mail back a message to report errors.



File: message,  Node: Message Buffers,  Next: Message Actions,  Prev: Sending Variables,  Up: Variables

3.9 Message Buffers
===================

Message will generate new buffers with unique buffer names when you
request a message buffer.  When you send the message, the buffer isn't
normally killed off.  Its name is changed and a certain number of old
message buffers are kept alive.

`message-generate-new-buffers'
     If non-`nil', generate new buffers.  The default is `t'.  If this
     is a function, call that function with three parameters: The type,
     the to address and the group name.  (Any of these may be `nil'.)
     The function should return the new buffer name.

`message-max-buffers'
     This variable says how many old message buffers to keep.  If there
     are more message buffers than this, the oldest buffer will be
     killed.  The default is 10.  If this variable is `nil', no old
     message buffers will ever be killed.

`message-send-rename-function'
     After sending a message, the buffer is renamed from, for instance,
     `*reply to Lars*' to `*sent reply to Lars*'.  If you don't like
     this, set this variable to a function that renames the buffer in a
     manner you like.  If you don't want to rename the buffer at all,
     you can say:

          (setq message-send-rename-function 'ignore)

`message-kill-buffer-on-exit'
     If non-`nil', kill the buffer immediately on exit.



File: message,  Node: Message Actions,  Prev: Message Buffers,  Up: Variables

3.10 Message Actions
====================

When Message is being used from a news/mail reader, the reader is likely
to want to perform some task after the message has been sent.  Perhaps
return to the previous window configuration or mark an article as
replied.

   The user may exit from the message buffer in various ways.  The most
common is `C-c C-c', which sends the message and exits.  Other
possibilities are `C-c C-s' which just sends the message, `C-c C-d'
which postpones the message editing and buries the message buffer, and
`C-c C-k' which kills the message buffer.  Each of these actions have
lists associated with them that contains actions to be executed:
`message-send-actions', `message-exit-actions',
`message-postpone-actions', and `message-kill-actions'.

   Message provides a function to interface with these lists:
`message-add-action'.  The first parameter is the action to be added,
and the rest of the arguments are which lists to add this action to.
Here's an example from Gnus:

       (message-add-action
        `(set-window-configuration ,(current-window-configuration))
        'exit 'postpone 'kill)

   This restores the Gnus window configuration when the message buffer
is killed, postponed or exited.

   An "action" can be either: a normal function, or a list where the
CAR is a function and the CDR is the list of arguments, or a form to be
`eval'ed.


File: message,  Node: Compatibility,  Next: Appendices,  Prev: Variables,  Up: Top

4 Compatibility
***************

Message uses virtually only its own variables--older `mail-' variables
aren't consulted.  To force Message to take those variables into
account, you can put the following in your `.emacs' file:

     (require 'messcompat)

   This will initialize many Message variables from the values in the
corresponding mail variables.


File: message,  Node: Appendices,  Next: Index,  Prev: Compatibility,  Up: Top

5 Appendices
************

* Menu:

* Responses::          Standard rules for determining where responses go.


File: message,  Node: Responses,  Up: Appendices

5.1 Responses
=============

To determine where a message is to go, the following algorithm is used
by default.

"reply"
     A "reply" is when you want to respond _just_ to the person who
     sent the message via mail.  There will only be one recipient.  To
     determine who the recipient will be, the following headers are
     consulted, in turn:

    `Reply-To'

    `From'

"wide reply"
     A "wide reply" is a mail response that includes _all_ entities
     mentioned in the message you are responded to.  All mailboxes from
     the following headers will be concatenated to form the outgoing
     `To'/`Cc' headers:

    `From'
          (unless there's a `Reply-To', in which case that is used
          instead).

    `Cc'

    `To'

     If a `Mail-Copies-To' header is present, it will also be included
     in the list of mailboxes.  If this header is `never', that means
     that the `From' (or `Reply-To') mailbox will be suppressed.

"followup"
     A "followup" is a response sent via news.  The following headers
     (listed in order of precedence) determine where the response is to
     be sent:

    `Followup-To'

    `Newsgroups'

     If a `Mail-Copies-To' header is present, it will be used as the
     basis of the new `Cc' header, except if this header is `never'.



File: message,  Node: Index,  Next: Key Index,  Prev: Appendices,  Up: Top

6 Index
*******

 [index ]
* Menu:

* aliases:                               Mail Aliases.        (line   6)
* approved:                              News Headers.        (line 135)
* attachment:                            MIME.                (line   6)
* attribution line:                      Insertion Variables. (line  15)
* Aw:                                    Message Headers.     (line  67)
* Cancel Locks:                          Canceling News.      (line  12)
* canlock:                               Canceling News.      (line  12)
* charset:                               Various Message Variables.
                                                              (line   7)
* cited:                                 Insertion Variables. (line  39)
* compatibility:                         Compatibility.       (line   6)
* cross-post:                            Header Commands.     (line 115)
* describe-mode:                         Header Commands.     (line  13)
* Distribution:                          News Headers.        (line  56)
* encrypt:                               Security.            (line   6)
* Expires:                               News Headers.        (line  51)
* feedmail-send-it:                      Mail Variables.      (line   7)
* From:                                  News Headers.        (line  11)
* gpg-temp-directory:                    Security.            (line 138)
* i-did-not-set-mail-host-address-so-tickle-me: News Headers. (line  35)
* IDNA:                                  IDNA.                (line   6)
* Importance:                            Header Commands.     (line 101)
* internationalized domain names:        IDNA.                (line   6)
* ispell-message:                        Spelling.            (line   6)
* ispell-message-dictionary-alist:       Spelling.            (line  15)
* Lines:                                 News Headers.        (line  32)
* long lines:                            News Headers.        (line 120)
* mail aliases:                          Mail Aliases.        (line   6)
* Mail-Followup-To:                      Mailing Lists.       (line   6)
* mail-header-separator:                 Various Message Variables.
                                                              (line  18)
* mail-host-address:                     News Headers.        (line  35)
* message-add-archive-header:            Header Commands.     (line 130)
* message-add-header:                    Various Message Variables.
                                                              (line  60)
* message-allow-no-recipients:           Message Headers.     (line 113)
* message-alternative-emails:            Message Headers.     (line 109)
* message-archive-header:                Header Commands.     (line 130)
* message-archive-note:                  Header Commands.     (line 130)
* message-auto-save-directory:           Various Message Variables.
                                                              (line  25)
* message-beginning-of-line:             Movement.            (line  14)
* message-bounce:                        Bouncing.            (line   6)
* message-caesar-buffer-body:            Various Commands.    (line   7)
* message-cancel-hook:                   Various Message Variables.
                                                              (line  82)
* message-cancel-message:                Canceling News.      (line   9)
* message-cancel-news:                   Canceling News.      (line   6)
* message-change-subject:                Header Commands.     (line 109)
* message-citation-line-function:        Insertion Variables. (line  15)
* message-cite-function:                 Insertion Variables. (line  47)
* message-cite-original:                 Insertion Variables. (line  47)
* message-cite-original-without-signature: Insertion Variables.
                                                              (line  47)
* message-cite-prefix-regexp:            Insertion Variables. (line  12)
* message-courtesy-message:              Sending Variables.   (line  13)
* message-cross-post-default:            Header Commands.     (line 115)
* message-cross-post-followup-to:        Header Commands.     (line 115)
* message-default-charset:               Various Message Variables.
                                                              (line   7)
* message-default-headers:               Message Headers.     (line  63)
* message-default-mail-headers:          Mail Headers.        (line  16)
* message-default-news-headers:          News Headers.        (line 170)
* message-deletable-headers:             Message Headers.     (line  52)
* message-delete-not-region:             Various Commands.    (line  23)
* message-directory:                     Various Message Variables.
                                                              (line  22)
* message-distribution-function:         News Headers.        (line  56)
* message-dont-reply-to-names:           Wide Reply.          (line  16)
* message-dont-send:                     Sending.             (line  14)
* message-draft-headers:                 Message Headers.     (line  28)
* message-elide-ellipsis:                Various Commands.    (line  13)
* message-elide-region:                  Various Commands.    (line  13)
* message-exit-actions:                  Message Actions.     (line  11)
* message-expires:                       News Headers.        (line  51)
* message-fcc-externalize-attachments:   Sending Variables.   (line  22)
* message-fcc-handler-function:          Sending Variables.   (line   7)
* message-fill-yanked-message:           Insertion.           (line  15)
* message-followup:                      Followup.            (line   6)
* message-followup-to-function:          Followup.            (line   9)
* message-forward:                       Forwarding.          (line   6)
* message-forward-as-mime:               Forwarding.          (line  34)
* message-forward-before-signature:      Forwarding.          (line  40)
* message-forward-ignored-headers:       Forwarding.          (line  10)
* message-forward-subject-author-subject: Forwarding.         (line  21)
* message-from-style:                    Message Headers.     (line  33)
* message-generate-headers-first:        Message Headers.     (line  13)
* message-generate-new-buffers:          Message Buffers.     (line  12)
* message-generate-unsubscribed-mail-followup-to <1>: Header Commands.
                                                              (line  60)
* message-generate-unsubscribed-mail-followup-to: Mailing Lists.
                                                              (line  87)
* message-goto-bcc:                      Header Commands.     (line  23)
* message-goto-body:                     Movement.            (line   7)
* message-goto-cc:                       Header Commands.     (line  29)
* message-goto-distribution:             Header Commands.     (line  41)
* message-goto-fcc:                      Header Commands.     (line  26)
* message-goto-followup-to:              Header Commands.     (line  44)
* message-goto-from:                     Header Commands.     (line  19)
* message-goto-keywords:                 Header Commands.     (line  47)
* message-goto-mail-followup-to:         Mailing Lists.       (line  87)
* message-goto-newsgroups:               Header Commands.     (line  38)
* message-goto-reply-to:                 Header Commands.     (line  35)
* message-goto-signature:                Movement.            (line  11)
* message-goto-subject:                  Header Commands.     (line  32)
* message-goto-summary:                  Header Commands.     (line  50)
* message-goto-to:                       Header Commands.     (line  16)
* message-header-format-alist:           Header Commands.     (line  78)
* message-header-setup-hook:             Various Message Variables.
                                                              (line  39)
* message-header-synonyms:               Message Headers.     (line 127)
* message-hidden-headers:                Message Headers.     (line 119)
* Message-ID:                            News Headers.        (line  35)
* message-idna-to-ascii-rhs:             IDNA.                (line  20)
* message-ignored-bounced-headers:       Bouncing.            (line  11)
* message-ignored-cited-headers:         Insertion Variables. (line   7)
* message-ignored-mail-headers:          Mail Headers.        (line  12)
* message-ignored-news-headers:          News Headers.        (line 166)
* message-ignored-resent-headers:        Resending.           (line   9)
* message-ignored-supersedes-headers:    Superseding.         (line   9)
* message-indent-citation-function:      Insertion Variables. (line  55)
* message-indentation-spaces:            Insertion Variables. (line  44)
* message-insert-canlock:                Canceling News.      (line  12)
* message-insert-disposition-notification-to: Header Commands.
                                                              (line  95)
* message-insert-headers:                Insertion.           (line  26)
* message-insert-importance-high:        Header Commands.     (line 101)
* message-insert-importance-low:         Header Commands.     (line 105)
* message-insert-newsgroups:             Header Commands.     (line  86)
* message-insert-or-toggle-importance:   Header Commands.     (line  53)
* message-insert-signature:              Insertion.           (line  22)
* message-insert-to:                     Header Commands.     (line  82)
* message-insert-wide-reply:             Header Commands.     (line 127)
* message-interactive:                   Sending Variables.   (line  26)
* message-kill-actions:                  Message Actions.     (line  11)
* message-kill-buffer:                   Sending.             (line  17)
* message-kill-buffer-on-exit:           Message Buffers.     (line  33)
* message-kill-to-signature:             Various Commands.    (line  19)
* message-mail:                          New Mail Message.    (line   6)
* message-mail-alias-type:               Mail Aliases.        (line   6)
* message-mailer-swallows-blank-line:    Mail Variables.      (line  44)
* message-make-forward-subject-function: Forwarding.          (line  14)
* message-mark-insert-begin:             Insertion Variables. (line  61)
* message-mark-insert-end:               Insertion Variables. (line  64)
* message-mark-insert-file:              Insertion.           (line  33)
* message-mark-inserted-region:          Insertion.           (line  29)
* message-max-buffers:                   Message Buffers.     (line  18)
* message-mh-deletable-headers:          Mail Variables.      (line  14)
* message-mode-syntax-table:             Various Message Variables.
                                                              (line  85)
* message-newline-and-reformat:          Various Commands.    (line  27)
* message-news:                          New News Message.    (line   6)
* message-post-method:                   News Variables.      (line  11)
* message-postpone-actions:              Message Actions.     (line  11)
* message-qmail-inject-args:             Mail Variables.      (line  24)
* message-qmail-inject-program:          Mail Variables.      (line  21)
* message-reduce-to-to-cc:               Header Commands.     (line 123)
* message-rename-buffer:                 Various Commands.    (line  44)
* message-reply:                         Reply.               (line   6)
* message-reply-to-function:             Reply.               (line   9)
* message-required-headers:              Message Headers.     (line  19)
* message-required-mail-headers:         Mail Headers.        (line   7)
* message-required-news-headers:         News Headers.        (line   6)
* message-resend:                        Resending.           (line   6)
* message-send:                          Sending.             (line  11)
* message-send-actions:                  Message Actions.     (line  11)
* message-send-and-exit:                 Sending.             (line   7)
* message-send-hook:                     Various Message Variables.
                                                              (line  57)
* message-send-mail-function:            Mail Variables.      (line   7)
* message-send-mail-hook:                Various Message Variables.
                                                              (line  71)
* message-send-mail-partially-limit:     Mail Variables.      (line  50)
* message-send-mail-with-mh:             Mail Variables.      (line   7)
* message-send-mail-with-qmail:          Mail Variables.      (line   7)
* message-send-mail-with-sendmail:       Mail Variables.      (line   7)
* message-send-method-alist:             Various Message Variables.
                                                              (line  96)
* message-send-news-function:            News Variables.      (line   7)
* message-send-news-hook:                Various Message Variables.
                                                              (line  75)
* message-send-rename-function:          Message Buffers.     (line  24)
* message-sendmail-envelope-from:        Mail Variables.      (line  38)
* message-sendmail-f-is-evil:            Mail Variables.      (line  34)
* message-sent-hook:                     Various Message Variables.
                                                              (line  79)
* message-setup-hook:                    Various Message Variables.
                                                              (line  35)
* message-signature:                     Insertion Variables. (line  67)
* message-signature-file:                Insertion Variables. (line  75)
* message-signature-insert-empty-line:   Insertion Variables. (line  79)
* message-signature-separator:           Various Message Variables.
                                                              (line  14)
* message-signature-setup-hook:          Various Message Variables.
                                                              (line  30)
* message-smtpmail-send-it:              Mail Variables.      (line   7)
* message-sort-headers:                  Header Commands.     (line  78)
* message-strip-special-text-properties: Various Message Variables.
                                                              (line  88)
* message-subject-re-regexp:             Message Headers.     (line  67)
* message-subject-trailing-was-ask-regexp: Message Headers.   (line 100)
* message-subject-trailing-was-query:    Message Headers.     (line 100)
* message-subject-trailing-was-regexp:   Message Headers.     (line 100)
* message-subscribed-address-file:       Mailing Lists.       (line  65)
* message-subscribed-address-functions:  Mailing Lists.       (line  50)
* message-subscribed-addresses:          Mailing Lists.       (line  37)
* message-subscribed-regexps:            Mailing Lists.       (line  43)
* message-supersede:                     Superseding.         (line   6)
* message-syntax-checks:                 News Headers.        (line  92)
* message-tab:                           Various Commands.    (line  48)
* message-tab-body-function:             Various Commands.    (line  48)
* message-to-list-only:                  Header Commands.     (line  91)
* message-use-followup-to:               Followup.            (line  14)
* message-use-idna:                      IDNA.                (line  15)
* message-use-mail-followup-to:          Mailing Lists.       (line 100)
* message-user-fqdn:                     News Headers.        (line  35)
* message-user-organization:             News Headers.        (line  24)
* message-user-organization-file:        News Headers.        (line  24)
* message-user-path:                     News Headers.        (line  61)
* message-wash-forwarded-subjects:       Forwarding.          (line  28)
* message-wide-reply:                    Wide Reply.          (line   6)
* message-wide-reply-confirm-recipients: Wide Reply.          (line  19)
* message-wide-reply-to-function:        Wide Reply.          (line  11)
* message-yank-buffer:                   Insertion.           (line  11)
* message-yank-cited-prefix:             Insertion Variables. (line  39)
* message-yank-original:                 Insertion.           (line   7)
* message-yank-prefix:                   Insertion Variables. (line  31)
* MIME:                                  MIME.                (line   6)
* Mime-Version:                          News Headers.        (line  69)
* MML:                                   MIME.                (line   6)
* mml-secure-message-encrypt-pgp:        Security.            (line  26)
* mml-secure-message-encrypt-pgpmime:    Security.            (line  29)
* mml-secure-message-encrypt-smime:      Security.            (line  23)
* mml-secure-message-sign-pgp:           Security.            (line  17)
* mml-secure-message-sign-pgpmime:       Security.            (line  20)
* mml-secure-message-sign-smime:         Security.            (line  14)
* mml-signencrypt-style-alist:           Security.            (line 151)
* mml-unsecure-message:                  Security.            (line  32)
* multipart:                             MIME.                (line   6)
* Newsgroups:                            News Headers.        (line  20)
* non-ascii domain names:                IDNA.                (line   6)
* organization:                          News Headers.        (line  24)
* path:                                  News Headers.        (line  61)
* PGP:                                   Security.            (line   6)
* PGP/MIME:                              Security.            (line   6)
* qmail:                                 Mail Variables.      (line  21)
* quoting:                               Insertion Variables. (line  31)
* Re:                                    Message Headers.     (line  67)
* S/MIME:                                Security.            (line   6)
* sc-cite-original:                      Insertion Variables. (line  47)
* secure:                                Security.            (line   6)
* Security:                              Security.            (line   6)
* Sender:                                News Headers.        (line 105)
* sendmail:                              Mail Variables.      (line  34)
* sendsys:                               News Headers.        (line 111)
* sign:                                  Security.            (line   6)
* smtpmail-send-it:                      Mail Variables.      (line   7)
* spelling:                              Spelling.            (line   6)
* split large message:                   Mail Variables.      (line  50)
* Subject <1>:                           News Headers.        (line  17)
* Subject:                               Header Commands.     (line 109)
* Sun:                                   News Headers.        (line  35)
* Supercite:                             Insertion Variables. (line  47)
* Sv:                                    Message Headers.     (line  67)
* system-name:                           News Headers.        (line  35)
* undo:                                  Buffer Entry.        (line   6)
* User-Agent:                            News Headers.        (line  43)
* user-full-name:                        News Headers.        (line  11)
* user-mail-address:                     News Headers.        (line  11)
* X-No-Archive:                          Header Commands.     (line 130)
* X-Post:                                Header Commands.     (line 115)
* yanking:                               Insertion Variables. (line  31)
* yow:                                   News Headers.        (line  69)


File: message,  Node: Key Index,  Prev: Index,  Up: Top

7 Key Index
***********

 [index ]
* Menu:

* C-_:                                   Buffer Entry.        (line   6)
* C-a:                                   Movement.            (line  14)
* C-c ?:                                 Header Commands.     (line  13)
* C-c C-b:                               Movement.            (line   7)
* C-c C-c:                               Sending.             (line   7)
* C-c C-d:                               Sending.             (line  14)
* C-c C-e:                               Various Commands.    (line  13)
* C-c C-f a:                             Header Commands.     (line 130)
* C-c C-f C-a <1>:                       Header Commands.     (line  60)
* C-c C-f C-a:                           Mailing Lists.       (line  87)
* C-c C-f C-b:                           Header Commands.     (line  23)
* C-c C-f C-c:                           Header Commands.     (line  29)
* C-c C-f C-d:                           Header Commands.     (line  41)
* C-c C-f C-f:                           Header Commands.     (line  26)
* C-c C-f C-i:                           Header Commands.     (line  53)
* C-c C-f C-k:                           Header Commands.     (line  47)
* C-c C-f C-m:                           Mailing Lists.       (line  87)
* C-c C-f C-n:                           Header Commands.     (line  38)
* C-c C-f C-o:                           Header Commands.     (line  19)
* C-c C-f C-r:                           Header Commands.     (line  35)
* C-c C-f C-s:                           Header Commands.     (line  32)
* C-c C-f C-t:                           Header Commands.     (line  16)
* C-c C-f C-u:                           Header Commands.     (line  50)
* C-c C-f s:                             Header Commands.     (line 109)
* C-c C-f t:                             Header Commands.     (line 123)
* C-c C-f w:                             Header Commands.     (line 127)
* C-c C-f x:                             Header Commands.     (line 115)
* C-c C-i:                               Movement.            (line  11)
* C-c C-k:                               Sending.             (line  17)
* C-c C-l:                               Header Commands.     (line  91)
* C-c C-m c o:                           Security.            (line  26)
* C-c C-m c p:                           Security.            (line  29)
* C-c C-m c s:                           Security.            (line  23)
* C-c C-m C-n:                           Security.            (line  32)
* C-c C-m s o:                           Security.            (line  17)
* C-c C-m s p:                           Security.            (line  20)
* C-c C-m s s:                           Security.            (line  14)
* C-c C-M-y:                             Insertion.           (line  11)
* C-c C-n:                               Header Commands.     (line  86)
* C-c C-o:                               Header Commands.     (line  78)
* C-c C-q:                               Insertion.           (line  15)
* C-c C-r:                               Various Commands.    (line   7)
* C-c C-s:                               Sending.             (line  11)
* C-c C-t:                               Header Commands.     (line  82)
* C-c C-v:                               Various Commands.    (line  23)
* C-c C-w:                               Insertion.           (line  22)
* C-c C-x:                               Various Commands.    (line  19)
* C-c C-y:                               Insertion.           (line   7)
* C-c M-f:                               Insertion.           (line  33)
* C-c M-h:                               Insertion.           (line  26)
* C-c M-m:                               Insertion.           (line  29)
* C-c M-n:                               Header Commands.     (line  95)
* C-c M-r:                               Various Commands.    (line  44)
* M-RET:                                 Various Commands.    (line  27)
* M-x message-insert-importance-high:    Header Commands.     (line 101)
* M-x message-insert-importance-low:     Header Commands.     (line 105)
* TAB:                                   Various Commands.    (line  48)



Tag Table:
Node: Top1292
Node: Interface2008
Node: New Mail Message3059
Node: New News Message3421
Node: Reply3814
Node: Wide Reply5194
Node: Followup6069
Node: Canceling News6844
Node: Superseding7814
Node: Forwarding8306
Node: Resending9854
Node: Bouncing10244
Node: Mailing Lists10800
Node: Commands15995
Node: Buffer Entry16733
Node: Header Commands17404
Node: Movement21928
Node: Insertion22493
Node: MIME23622
Node: IDNA24268
Node: Security25427
Node: Various Commands33365
Node: Sending34935
Node: Mail Aliases35345
Node: Spelling36215
Node: Variables37521
Node: Message Headers38240
Node: Mail Headers43662
Node: Mail Variables44313
Node: News Headers46561
Node: News Variables52663
Node: Insertion Variables53068
Node: Various Message Variables56944
Node: Sending Variables61167
Node: Message Buffers62369
Node: Message Actions63805
Node: Compatibility65277
Node: Appendices65720
Node: Responses65913
Node: Index67265
Node: Key Index87192

End Tag Table
