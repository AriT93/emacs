;; Object mailcrypt/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "mailcrypt/"
  :tables (list 
   (semanticdb-table "mailcrypt.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("delete-itimer" function (:prototype-flag t) nil [1283 1317]) ("cancel-itimer" function (:prototype-flag t) nil [1246 1280]) ("start-itimer" function (:prototype-flag t) nil [1210 1243]) ("easymenu" include nil nil [1320 1339]) ("comint" include nil nil [1340 1357]) ("rfc822" include nil nil [1358 1375]) ("if" code nil nil [1539 1654]) ("if" code nil nil [1450 1535]) ("condition-case" code nil nil [1397 1447]) ("mc-xemacs-p" variable (:constant-flag t :default-value (string-match "XEmacs" emacs-version)) nil [1657 1717]) ("mc-decrypt" function (:prototype-flag t :user-visible-flag t) nil [1719 1759]) ("mc-verify" function (:prototype-flag t :user-visible-flag t) nil [1760 1799]) ("mc-snarf" function (:prototype-flag t :user-visible-flag t) nil [1800 1838]) ("mc-pgp-fetch-key" function (:prototype-flag t :user-visible-flag t) nil [1839 1882]) ("mc-encrypt" function (:prototype-flag t :user-visible-flag t) nil [1883 1923]) ("mc-sign" function (:prototype-flag t :user-visible-flag t) nil [1924 1961]) ("mc-insert-public-key" function (:prototype-flag t :user-visible-flag t) nil [1962 2012]) ("mc-remailer-encrypt-for-chain" function (:prototype-flag t :user-visible-flag t) nil [2013 2072]) ("mc-remailer-insert-response-block" function (:prototype-flag t :user-visible-flag t) nil [2073 2136]) ("mc-remailer-insert-pseudonym" function (:prototype-flag t :user-visible-flag t) nil [2137 2195]) ("mc-setversion" function (:prototype-flag t :user-visible-flag t) nil [2196 2243]) ("mc-pgp-always-sign" variable (:user-visible-flag t) nil [2294 2398]) ("mc-read-mode" variable nil nil [2400 2491]) ("mc-write-mode" variable nil nil [2493 2586]) ("make-variable-buffer-local" code nil nil [2588 2630]) ("make-variable-buffer-local" code nil nil [2631 2674]) ("mc-read-mode-string" variable (:user-visible-flag t :default-value " MC-r") nil [2676 2780]) ("mc-write-mode-string" variable (:user-visible-flag t :default-value " MC-w") nil [2782 2888]) ("mc-read-mode-map" variable nil nil [2890 2964]) ("mc-write-mode-map" variable nil nil [2966 3042]) ("or" code nil nil [3044 3426]) ("or" code nil nil [3428 4064]) ("easy-menu-define" code nil nil [4066 4381]) ("easy-menu-define" code nil nil [4383 4897]) ("or" code nil nil [4899 5048]) ("or" code nil nil [5050 5202]) ("or" code nil nil [5204 5337]) ("or" code nil nil [5339 5475]) ("mc-read-mode" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [5477 6124]) ("mc-write-mode" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [6127 7021]) ("mc-install-read-mode" function nil nil [7023 7089]) ("mc-install-write-mode" function nil nil [7091 7159]) ("mc-version" variable (:constant-flag t :default-value "3.5.8") nil [7339 7368]) ("mc-temp-directory" variable (:user-visible-flag t :default-value (cond ((fboundp (quote temp-directory)) (temp-directory)) ((boundp (quote temporary-file-directory)) temporary-file-directory) ("/tmp/"))) nil [7369 7577]) ("mc-default-scheme" variable (:user-visible-flag t :default-value (quote mc-scheme-pgp)) nil [7578 7656]) ("mc-passwd-timeout" variable (:user-visible-flag t :default-value 60) nil [7657 7886]) ("mc-ripem-user-id" variable (:default-value (or (getenv "RIPEM_USER_NAME") (user-full-name) "*Your RIPEM user ID.")) nil [7888 7993]) ("mc-always-replace" variable (:user-visible-flag t) nil [7995 8140]) ("mc-use-default-recipients" variable (:user-visible-flag t) nil [8142 8278]) ("mc-encrypt-for-me" variable (:user-visible-flag t) nil [8280 8369]) ("mc-pre-signature-hook" variable (:user-visible-flag t) nil [8371 8468]) ("mc-post-signature-hook" variable (:user-visible-flag t) nil [8469 8566]) ("mc-pre-encryption-hook" variable (:user-visible-flag t) nil [8567 8669]) ("mc-post-encryption-hook" variable (:user-visible-flag t) nil [8670 8760]) ("mc-pre-decryption-hook" variable (:user-visible-flag t) nil [8761 8863]) ("mc-post-decryption-hook" variable (:user-visible-flag t) nil [8864 8954]) ("mc-buffer-name" variable (:constant-flag t :default-value "*MailCrypt*") nil [8956 9038]) ("mc-modes-alist" variable (:default-value (quote ((rmail-mode (decrypt . mc-rmail-decrypt-message) (verify . mc-rmail-verify-signature)) (rmail-summary-mode (decrypt . mc-rmail-summary-decrypt-message) (verify . mc-rmail-summary-verify-signature) (snarf . mc-rmail-summary-snarf-keys)) (mew-draft-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message)) (mew-message-mode (decrypt . mc-mew-decrypt-message)) (mew-summary-mode (decrypt . mc-mew-summary-decrypt-message) (verify . mc-mew-summary-verify-signature) (snarf . mc-mew-summary-snarf-keys)) (vm-mode (decrypt . mc-vm-decrypt-message) (verify . mc-vm-verify-signature) (snarf . mc-vm-snarf-keys)) (vm-virtual-mode (decrypt . mc-vm-decrypt-message) (verify . mc-vm-verify-signature) (snarf . mc-vm-snarf-keys)) (vm-summary-mode (decrypt . mc-vm-decrypt-message) (verify . mc-vm-verify-signature) (snarf . mc-vm-snarf-keys)) (mh-folder-mode (decrypt . mc-mh-decrypt-message) (verify . mc-mh-verify-signature) (snarf . mc-mh-snarf-keys)) (message-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message)) (gnus-summary-mode (decrypt . mc-gnus-decrypt-message) (verify . mc-gnus-verify-signature) (snarf . mc-gnus-snarf-keys)) (gnus-article-mode (decrypt . mc-gnus-decrypt-message) (verify . mc-gnus-verify-signature) (snarf . mc-gnus-snarf-keys)) (mail-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message)) (vm-mail-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message)) (mh-letter-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message)) (news-reply-mode (encrypt . mc-encrypt-message) (sign . mc-sign-message))))) nil [9040 11009]) ("mc-timer" variable nil nil [11057 11120]) ("mc-passwd-cache" variable nil nil [11122 11175]) ("mc-schemes" variable (:default-value (quote (("pgp50" . mc-scheme-pgp50) ("pgp" . mc-scheme-pgp) ("gpg" . mc-scheme-gpg)))) nil [11177 11298]) ("mc-message-delimiter-positions" function (:arguments ("start-re" "end-re" "&optional" "begin")) nil [11333 11855]) ("mc-split" function (:arguments ("regexp" "str")) nil [11858 12524]) ("mc-field-name-regexp" variable (:constant-flag t :default-value (concat "^\\([" (char-to-string 33) "-" (char-to-string 57) (char-to-string 59) "-" (char-to-string 126) "]*\\)")) nil [13193 13355]) ("mc-field-body-regexp" variable (:constant-flag t :default-value "\\(.*\\(
[ 	].*\\)*
\\)") nil [13356 13416]) ("mc-get-fields" function (:arguments ("&optional" "matching" "bounds" "nuke")) nil [13418 14658]) ("mc-strip-address" function (:arguments ("addr")) nil [14660 14789]) ("mc-strip-addresses" function (:arguments ("addr-list")) nil [14791 15215]) ("mc-display-buffer" function (:arguments ("buffer")) nil [15217 15413]) ("mc-message" function (:arguments ("msg" "&optional" "buffer" "default")) nil [15415 15840]) ("mc-message-sigstatus" function (:arguments ("msg" "&optional" "attention")) nil [15842 16088]) ("mc-process-region" function (:arguments ("beg" "end" "passwd" "program" "args" "parser" "&optional" "buffer")) nil [16090 17902]) ("mc-activate-passwd" function (:arguments ("id" "&optional" "prompt")) nil [17939 18921]) ("mc-deactivate-passwd" function (:user-visible-flag t :arguments ("&optional" "inhibit-message")) nil [18923 19452]) ("defalias" code nil nil [19550 19591]) ("defalias" code nil nil [19592 19633]) ("defalias" code nil nil [19634 19669]) ("defalias" code nil nil [19670 19709]) ("defalias" code nil nil [19710 19771]) ("defalias" code nil nil [19772 19809]) ("mailcrypt" package nil nil [19817 19837]))
    :file "mailcrypt.el"
    :pointmax 19838
    )
   (semanticdb-table "mc-gpg.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("mailcrypt" include nil nil [1031 1051]) ("mc-gpg-user-id" variable (:user-visible-flag t :default-value (user-login-name)) nil [3216 3295]) ("mc-gpg-path" variable (:user-visible-flag t :default-value "gpg") nil [3296 3345]) ("mc-gpg-display-snarf-output" variable (:user-visible-flag t) nil [3346 3446]) ("mc-gpg-always-fetch" variable (:user-visible-flag t :default-value (quote never)) nil [3447 3566]) ("mc-gpg-alternate-keyring" variable (:user-visible-flag t) nil [3567 3651]) ("mc-gpg-comment" variable (:user-visible-flag t :default-value (format "Processed by Mailcrypt %s <http://mailcrypt.sourceforge.net/>" mc-version)) nil [3652 3853]) ("mc-gpg-msg-begin-line" variable (:constant-flag t :default-value "^-----BEGIN PGP MESSAGE-----?$") nil [3854 3966]) ("mc-gpg-msg-end-line" variable (:constant-flag t :default-value "^-----END PGP MESSAGE-----?$") nil [3967 4073]) ("mc-gpg-signed-begin-line" variable (:constant-flag t :default-value "^-----BEGIN PGP SIGNED MESSAGE-----?$") nil [4074 4194]) ("mc-gpg-signed-end-line" variable (:constant-flag t :default-value "^-----END PGP SIGNATURE-----?$") nil [4195 4304]) ("mc-gpg-key-begin-line" variable (:constant-flag t :default-value "^-----BEGIN PGP PUBLIC KEY BLOCK-----?$") nil [4305 4419]) ("mc-gpg-key-end-line" variable (:constant-flag t :default-value "^-----END PGP PUBLIC KEY BLOCK-----?$") nil [4420 4528]) ("mc-gpg-extra-args" variable nil nil [4529 4722]) ("mc-gpg-debug-buffer" variable nil nil [4723 4974]) ("or" code nil nil [5204 5474]) ("mc-gpg-debug-print" function (:arguments ("string")) nil [5480 5619]) ("mc-gpg-insert-parser" function (:arguments ("stdoutbuf" "stderrbuf" "statusbuf" "rc" "parserdata")) nil [5750 6046]) ("mc-gpg-null-parser" function (:arguments ("stdoutbuf" "stderrbuf" "statusbuf" "rc" "parserdata")) nil [6105 6193]) ("mc-gpg-process-region" function (:arguments ("beg" "end" "passwd" "program" "args" "parser" "bufferdummy" "&optional" "parserdata")) nil [6852 11328]) ("mc-gpg-key-cache" variable nil nil [12565 12744]) ("mc-gpg-lookup-key" function (:arguments ("str" "&optional" "type")) nil [12746 14532]) ("mc-gpg-encrypt-region" function (:arguments ("recipients" "start" "end" "&optional" "id" "sign")) nil [14658 17210]) ("mc-gpg-sigstatus-parser" function nil nil [23820 26118]) ("mc-gpg-decrypt-parser" function (:arguments ("stdoutbuf" "stderrbuf" "statusbuf" "rc" "parserdata")) nil [26354 32629]) ("mc-gpg-format-sigline" function (:arguments ("goodp" "sigid" "sigtrust" "sigdate")) nil [33061 33282]) ("mc-gpg-decrypt-region" function (:arguments ("start" "end" "&optional" "id")) nil [33592 37118]) ("mc-gpg-sign-region" function (:arguments ("start" "end" "&optional" "id" "unclear")) nil [37120 38117]) ("mc-gpg-verify-parser" function (:arguments ("stdoutbuf" "stderrbuf" "statusbuf" "rc" "parserdata")) nil [39333 40197]) ("mc-gpg-verify-region" function (:arguments ("start" "end" "&optional" "no-fetch")) nil [40306 41526]) ("mc-gpg-insert-public-key" function (:arguments ("&optional" "id")) nil [41528 42210]) ("mc-gpg-snarf-parser" function (:arguments ("stdoutbuf" "stderrbuf" "statusbuf" "rc" "parserdata")) nil [43147 44166]) ("mc-gpg-snarf-keys" function (:arguments ("start" "end")) nil [44168 45582]) ("mc-scheme-gpg" function nil nil [45584 46258]) ("mc-gpg-always-fetch" variable (:user-visible-flag t :default-value (quote never)) nil [46280 46390]) ("mc-gpg-fetch-key" function (:arguments ("&optional" "id")) nil [46392 46752]))
    :file "mc-gpg.el"
    :pointmax 46760
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
