;; Object nxml-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "nxml-mode/"
  :tables (list 
   (semanticdb-table "nxml-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("when" code nil nil [1220 1297]) ("xmltok" include nil nil [1299 1316]) ("nxml-enc" include nil nil [1317 1336]) ("nxml-glyph" include nil nil [1337 1358]) ("nxml-util" include nil nil [1359 1379]) ("nxml-rap" include nil nil [1380 1399]) ("nxml-outln" include nil nil [1400 1421]) ("defgroup" code nil nil [1442 1519]) ("defgroup" code nil nil [1521 1652]) ("nxml-syntax-highlight-flag" variable (:user-visible-flag t :default-value t) nil [1654 1791]) ("nxml-char-ref-display-glyph-flag" variable (:user-visible-flag t :default-value t) nil [1793 2080]) ("nxml-mode-hook" variable nil nil [2082 2178]) ("nxml-sexp-element-flag" variable (:user-visible-flag t) nil [2180 2324]) ("nxml-slash-auto-complete-flag" variable (:user-visible-flag t) nil [2326 2513]) ("nxml-child-indent" variable (:user-visible-flag t :default-value 2) nil [2515 2768]) ("nxml-attribute-indent" variable (:user-visible-flag t :default-value 4) nil [2770 3095]) ("nxml-fontify-chunk-size" variable (:default-value 500) nil [3097 3133]) ("nxml-bind-meta-tab-to-complete-flag" variable (:user-visible-flag t :default-value (not window-system)) nil [3135 3744]) ("nxml-prefer-utf-16-to-utf-8-flag" variable (:user-visible-flag t) nil [3746 4048]) ("nxml-prefer-utf-16-little-to-big-endian-flag" variable (:user-visible-flag t :default-value (eq system-type (quote windows-nt))) nil [4050 4456]) ("nxml-default-buffer-file-coding-system" variable (:user-visible-flag t) nil [4458 4797]) ("nxml-auto-insert-xml-declaration-flag" variable (:user-visible-flag t) nil [4799 5027]) ("nxml-light-blue-color" variable (:constant-flag t :default-value "#9292C9") nil [5592 5634]) ("nxml-dark-blue-color" variable (:constant-flag t :default-value "#3A3A7B") nil [5645 5686]) ("nxml-green-color" variable (:constant-flag t :default-value "#257A25") nil [5697 5734]) ("nxml-sky-blue-color" variable (:constant-flag t :default-value "#ACACFC") nil [5922 5962]) ("nxml-dark-green-color" variable (:constant-flag t :default-value "#00AD00") nil [5973 6015]) ("nxml-light-green-color" variable (:constant-flag t :default-value "#70F170") nil [6026 6069]) ("nxml-delimited-data-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-dark-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-light-green-color)))))) nil [6081 6475]) ("nxml-name-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-green-color))) (((class color) (background dark)) (:foreground (\, nxml-sky-blue-color)))))) nil [6477 6910]) ("nxml-ref-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-light-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-dark-green-color)))))) nil [6912 7253]) ("nxml-delimiter-face" variable (:default-value (\` ((((class color) (background light)) (:foreground (\, nxml-light-blue-color))) (((class color) (background dark)) (:foreground (\, nxml-dark-green-color))) (t (:bold t))))) nil [7255 7599]) ("nxml-text-face" variable nil nil [7601 7698]) ("nxml-comment-content-face" variable (:default-value (quote ((t (:italic t))))) nil [7700 7842]) ("nxml-comment-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [7844 8019]) ("nxml-processing-instruction-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [8021 8223]) ("nxml-processing-instruction-target-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [8225 8400]) ("nxml-processing-instruction-content-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [8402 8589]) ("nxml-cdata-section-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [8591 8781]) ("nxml-cdata-section-CDATA-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [8783 8946]) ("nxml-cdata-section-content-face" variable (:default-value (quote ((t (:inherit nxml-text-face))))) nil [8948 9107]) ("nxml-char-ref-number-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9109 9307]) ("nxml-char-ref-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9309 9487]) ("nxml-entity-ref-name-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9489 9656]) ("nxml-entity-ref-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-ref-face))))) nil [9658 9834]) ("nxml-tag-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [9836 10040]) ("nxml-tag-slash-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10042 10212]) ("nxml-element-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10214 10359]) ("nxml-element-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10361 10509]) ("nxml-element-local-name-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10511 10664]) ("nxml-attribute-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10666 10815]) ("nxml-attribute-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10817 10969]) ("nxml-attribute-local-name-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [10973 11130]) ("nxml-namespace-attribute-xmlns-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11132 11297]) ("nxml-namespace-attribute-colon-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11299 11466]) ("nxml-namespace-attribute-prefix-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [11468 11646]) ("nxml-attribute-value-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [11648 11805]) ("nxml-attribute-value-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [11807 11980]) ("nxml-namespace-attribute-value-face" variable (:default-value (quote ((t (:inherit nxml-attribute-value-face))))) nil [11982 12160]) ("nxml-namespace-attribute-value-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-attribute-value-delimiter-face))))) nil [12162 12371]) ("nxml-prolog-literal-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [12373 12551]) ("nxml-prolog-literal-content-face" variable (:default-value (quote ((t (:inherit nxml-delimited-data-face))))) nil [12553 12731]) ("nxml-prolog-keyword-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [12733 12878]) ("nxml-markup-declaration-delimiter-face" variable (:default-value (quote ((t (:inherit nxml-delimiter-face))))) nil [12880 13102]) ("nxml-hash-face" variable (:default-value (quote ((t (:inherit nxml-name-face))))) nil [13104 13246]) ("nxml-glyph-face" variable (:default-value (quote ((((type x)) (:family "misc-fixed" :background "light grey" :foreground "black" :weight normal :slant normal)) (t (:background "light grey" :foreground "black" :weight normal :slant normal))))) nil [13248 13659]) ("nxml-version" variable (:user-visible-flag t) nil [13722 13797]) ("nxml-prolog-regions" variable nil nil [13799 13945]) ("make-variable-buffer-local" code nil nil [13946 13995]) ("nxml-last-fontify-end" variable nil nil [13997 14132]) ("make-variable-buffer-local" code nil nil [14133 14184]) ("nxml-degraded" variable nil nil [14186 14376]) ("make-variable-buffer-local" code nil nil [14377 14420]) ("nxml-completion-hook" variable nil nil [14422 14520]) ("nxml-in-mixed-content-hook" variable nil nil [14522 14790]) ("nxml-mixed-scan-distance" variable (:default-value 4000) nil [14792 14903]) ("nxml-end-tag-indent-scan-distance" variable (:default-value 4000) nil [14905 15026]) ("nxml-char-ref-extra-display" variable (:default-value t) nil [15028 15344]) ("make-variable-buffer-local" code nil nil [15345 15402]) ("nxml-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\225" (quote nxml-backward-up-element)) (define-key map "\204" (quote nxml-down-element)) (define-key map "\216" (quote nxml-forward-element)) (define-key map "\220" (quote nxml-backward-element)) (define-key map "\373" (quote nxml-backward-paragraph)) (define-key map "\375" (quote nxml-forward-paragraph)) (define-key map "\350" (quote nxml-mark-paragraph)) (define-key map "" (quote nxml-finish-element)) (define-key map "" (quote nxml-split-element)) (define-key map "" (quote nxml-balanced-close-start-tag-block)) (define-key map "	" (quote nxml-balanced-close-start-tag-inline)) (define-key map "" (quote nxml-insert-xml-declaration)) (define-key map "" (quote nxml-dynamic-markup-word)) (define-key map "" (quote nxml-insert-named-char)) (define-key map "" nxml-outline-prefix-map) (define-key map [S-mouse-2] (quote nxml-mouse-hide-direct-text-content)) (define-key map "/" (quote nxml-electric-slash)) (define-key map [C-return] (quote nxml-complete)) (when nxml-bind-meta-tab-to-complete-flag (define-key map "\211" (quote nxml-complete))) map)) nil [15404 16621]) ("nxml-set-face" function (:arguments ("start" "end" "face")) nil [16623 16743]) ("nxml-clear-face" function (:arguments ("start" "end")) nil [16745 16877]) ("nxml-set-fontified" function (:arguments ("start" "end")) nil [16879 16965]) ("nxml-clear-fontified" function (:arguments ("start" "end")) nil [16967 17064]) ("nxml-mode" function (:user-visible-flag t) nil [17081 22079]) ("nxml-degrade" function (:arguments ("context" "err")) nil [22081 22561]) ("nxml-after-change" function (:arguments ("start" "end" "pre-change-length")) nil [22586 23098]) ("nxml-after-change1" function (:arguments ("start" "end" "pre-change-length")) nil [23100 25025]) ("nxml-insert-xml-declaration" function (:user-visible-flag t) nil [25044 25654]) ("nxml-prepare-to-save" function nil nil [25656 26141]) ("nxml-select-coding-system" function nil nil [26143 28406]) ("nxml-unsuitable-coding-system-message" function (:arguments ("coding-system" "&optional" "enc-name")) nil [28408 28706]) ("nxml-utf-16-coding-systems" variable (:constant-flag t :default-value (and (coding-system-p (quote utf-16-be)) (coding-system-p (quote utf-16-le)) (quote (utf-16-be utf-16-le)))) nil [28708 28846]) ("nxml-utf-coding-systems" variable (:constant-flag t :default-value (cons (quote utf-8) nxml-utf-16-coding-systems)) nil [28848 28923]) ("nxml-coding-system-unicode-p" function (:arguments ("coding-system")) nil [28925 29074]) ("nxml-coding-system-name" function (:arguments ("coding-system")) nil [29076 29363]) ("nxml-fix-encoding-declaration" function (:arguments ("enc-pos" "coding-system")) nil [29365 29968]) ("nxml-choose-suitable-coding-system" function (:arguments ("suitable-coding-systems")) nil [29970 30487]) ("nxml-choose-utf-coding-system" function nil nil [30489 30969]) ("nxml-choose-utf-16-coding-system" function nil nil [30971 31394]) ("nxml-coding-system-member" function (:arguments ("coding-system" "coding-systems")) nil [31396 31676]) ("nxml-fontify" function (:arguments ("start")) nil [31697 32135]) ("nxml-fontify1" function (:arguments ("start")) nil [32137 32714]) ("nxml-fontify-buffer" function nil nil [32716 33002]) ("nxml-fontify-prolog" function nil nil [33004 33462]) ("nxml-do-fontify" function (:arguments ("&optional" "bound")) nil [33464 33817]) ("put" code nil nil [33941 34106]) ("put" code nil nil [34108 34241]) ("put" code nil nil [34243 34421]) ("put" code nil nil [34423 34569]) ("put" code nil nil [34571 34775]) ("put" code nil nil [34777 34950]) ("put" code nil nil [34952 35137]) ("put" code nil nil [35139 35314]) ("put" code nil nil [35316 35482]) ("put" code nil nil [35484 35693]) ("put" code nil nil [35695 35999]) ("put" code nil nil [36001 36069]) ("put" code nil nil [36138 36355]) ("put" code nil nil [36357 36467]) ("put" code nil nil [36469 36675]) ("put" code nil nil [36677 36849]) ("put" code nil nil [36851 37027]) ("put" code nil nil [37029 37216]) ("put" code nil nil [37218 37299]) ("put" code nil nil [37301 37448]) ("put" code nil nil [37450 37562]) ("put" code nil nil [37564 37672]) ("put" code nil nil [37674 37836]) ("put" code nil nil [37838 37949]) ("nxml-apply-fontify-rule" function (:arguments ("&optional" "type" "start" "end")) nil [37951 39541]) ("nxml-fontify-attributes" function nil nil [39543 39909]) ("nxml-fontify-attribute" function (:arguments ("att" "&optional" "namespace-declaration")) nil [39911 41383]) ("nxml-fontify-qname" function (:arguments ("start" "colon" "end" "prefix-face" "colon-face" "local-name-face" "&optional" "unprefixed-face")) nil [41385 41773]) ("nxml-electric-slash" function (:user-visible-flag t :arguments ("arg")) nil [41788 43295]) ("nxml-balanced-close-start-tag-block" function (:user-visible-flag t) nil [43297 43707]) ("nxml-balanced-close-start-tag-inline" function (:user-visible-flag t) nil [43709 43982]) ("nxml-balanced-close-start-tag" function (:arguments ("block-or-inline")) nil [43984 44780]) ("nxml-finish-element" function (:user-visible-flag t) nil [44783 44919]) ("nxml-last-split-position" variable nil nil [44921 45025]) ("nxml-split-element" function (:user-visible-flag t) nil [45027 45532]) ("nxml-finish-element-1" function (:user-visible-flag t :arguments ("startp")) nil [45534 47483]) ("nxml-indent-line" function nil nil [47502 47880]) ("nxml-compute-indent" function nil nil [47882 48065]) ("nxml-compute-indent-from-matching-start-tag" function nil nil [48067 49203]) ("nxml-compute-indent-from-previous-line" function nil nil [49205 51089]) ("nxml-merge-indent-context-type" function (:arguments ("context")) nil [51091 51784]) ("nxml-compute-indent-in-token" function (:arguments ("pos")) nil [51786 52650]) ("nxml-compute-indent-in-start-tag" function (:arguments ("pos")) nil [52652 53835]) ("nxml-attribute-value-boundary" function (:arguments ("pos")) nil [53837 54643]) ("nxml-compute-indent-in-delimited-token" function (:arguments ("pos" "open-delim" "close-delim")) nil [54651 55487]) ("nxml-complete" function (:user-visible-flag t) nil [55505 56263]) ("nxml-forward-balanced-item" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [56279 57493]) ("nxml-forward-single-balanced-item" function nil nil [57495 58210]) ("nxml-backward-single-balanced-item" function nil nil [58212 58923]) ("nxml-scan-forward-within" function (:arguments ("end")) nil [58925 59915]) ("nxml-scan-backward-within" function (:arguments ("end")) nil [59917 60891]) ("nxml-scan-forward-in-attribute-value" function (:arguments ("att")) nil [60893 61602]) ("nxml-scan-backward-in-attribute-value" function (:arguments ("att")) nil [61604 62342]) ("nxml-find-following-attribute" function nil nil [62344 63090]) ("nxml-find-preceding-attribute" function nil nil [63092 63837]) ("nxml-up-element" function (:arguments ("&optional" "arg")) nil [63839 64652]) ("nxml-backward-up-element" function (:arguments ("&optional" "arg")) nil [64654 65490]) ("nxml-down-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [65492 66177]) ("nxml-backward-down-element" function (:arguments ("&optional" "arg")) nil [66179 66907]) ("nxml-forward-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [66909 67445]) ("nxml-backward-element" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [67447 68050]) ("nxml-mark-token-after" function nil nil [68052 68202]) ("nxml-mark-paragraph" function (:user-visible-flag t) nil [68220 68472]) ("nxml-forward-paragraph" function (:arguments ("&optional" "arg")) nil [68474 68734]) ("nxml-backward-paragraph" function (:arguments ("&optional" "arg")) nil [68736 69058]) ("nxml-forward-single-paragraph" function nil nil [69060 69562]) ("nxml-backward-single-paragraph" function nil nil [69564 70804]) ("nxml-token-contains-data-p" function (:arguments ("&optional" "start" "end")) nil [70806 71350]) ("nxml-paragraph-end-pos" function (:arguments ("had-data" "offset")) nil [71352 73188]) ("nxml-paragraph-start-pos" function (:arguments ("had-data" "offset")) nil [73190 75301]) ("nxml-token-ends-line-p" function nil nil [75303 75359]) ("nxml-token-begins-line-p" function nil nil [75361 75487]) ("nxml-in-mixed-content-p" function (:arguments ("endp")) nil [75489 76747]) ("nxml-preceding-sibling-data-p" function nil nil [76749 77576]) ("nxml-following-sibling-data-p" function nil nil [77578 78083]) ("nxml-do-fill-paragraph" function (:arguments ("arg")) nil [78098 78690]) ("nxml-newline-and-indent" function (:arguments ("soft")) nil [78696 78832]) ("nxml-dynamic-markup-prev-pos" variable nil nil [78855 78896]) ("nxml-dynamic-markup-prev-lengths" variable nil nil [78897 78942]) ("nxml-dynamic-markup-prev-found-marker" variable nil nil [78943 78993]) ("nxml-dynamic-markup-prev-start-tags" variable (:default-value (make-hash-table :test (quote equal))) nil [78994 79069]) ("nxml-dynamic-markup-word" function (:user-visible-flag t) nil [79071 81759]) ("nxml-try-copy-markup" function (:arguments ("word-end-pos")) nil [81761 83404]) ("nxml-char-name-ignore-case" variable nil nil [83438 83477]) ("nxml-char-name-alist" variable nil nil [83479 84089]) ("nxml-char-name-table" variable (:default-value (make-hash-table :test (quote eq))) nil [84091 84387]) ("nxml-autoload-char-name-set-list" variable nil nil [84389 84484]) ("nxml-enable-char-name-set" function (:arguments ("nameset")) nil [84486 84579]) ("nxml-disable-char-name-set" function (:arguments ("nameset")) nil [84581 84677]) ("nxml-char-name-set-enabled-p" function (:arguments ("nameset")) nil [84679 84769]) ("nxml-autoload-char-name-set" function (:arguments ("nameset" "file")) nil [84771 85021]) ("nxml-define-char-name-set" function (:arguments ("nameset" "alist")) nil [85023 85860]) ("nxml-get-char-name" function (:arguments ("code")) nil [85862 86183]) ("nxml-named-char-history" variable nil nil [86185 86221]) ("nxml-insert-named-char" function (:user-visible-flag t :arguments ("arg")) nil [86223 87236]) ("nxml-maybe-load-char-name-set" function (:arguments ("sym")) nil [87240 87483]) ("nxml-toggle-char-ref-extra-display" function (:user-visible-flag t :arguments ("arg")) nil [87485 88090]) ("put" code nil nil [88092 88125]) ("nxml-char-ref-display-extra" function (:arguments ("start" "end" "n")) nil [88127 88675]) ("nxml-clear-char-ref-extra-display" function (:arguments ("start" "end")) nil [88677 88902]) ("nxml-version" function (:user-visible-flag t) nil [88920 89127]) ("nxml-start-delimiter-length" function (:arguments ("type")) nil [89130 89227]) ("put" code nil nil [89232 89283]) ("put" code nil nil [89284 89329]) ("put" code nil nil [89330 89390]) ("put" code nil nil [89391 89438]) ("put" code nil nil [89439 89490]) ("put" code nil nil [89491 89550]) ("put" code nil nil [89551 89599]) ("put" code nil nil [89600 89646]) ("nxml-end-delimiter-length" function (:arguments ("type")) nil [89648 89741]) ("put" code nil nil [89746 89795]) ("put" code nil nil [89796 89839]) ("put" code nil nil [89840 89898]) ("put" code nil nil [89899 89944]) ("put" code nil nil [89945 89994]) ("put" code nil nil [89995 90052]) ("put" code nil nil [90053 90099]) ("put" code nil nil [90100 90144]) ("nxml-token-type-friendly-name" function (:arguments ("type")) nil [90146 90253]) ("put" code nil nil [90255 90311]) ("put" code nil nil [90312 90386]) ("put" code nil nil [90387 90443]) ("put" code nil nil [90444 90501]) ("nxml-mode" package nil nil [90503 90523]))
    :file "nxml-mode.el"
    :pointmax 90552
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
