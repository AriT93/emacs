;; Object oneonone/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "oneonone/"
  :tables (list 
   (semanticdb-table "dired+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("and" code nil nil [10398 10469]) ("dired" include nil nil [10514 10530]) ("dired-aux" include nil nil [10547 10567]) ("ediff-util" include nil nil [10801 10822]) ("dired-x" include nil nil [10848 10872]) ("misc-fns" include nil nil [10920 10945]) ("when" code nil nil [10999 11058]) ("dired+" package nil nil [11132 11149]) ("dired+" include nil nil [11150 11167]) ("when" code nil nil [11328 11412]) ("diff-switches" variable (:user-visible-flag t :default-value "-c") nil [11463 11638]) ("menu-item-any-version" function (:arguments ("item-string" "command" "&rest" "keywords")) nil [11759 12148]) ("directory-listing-before-filename-regexp" variable (:default-value dired-move-to-filename-regexp) nil [12203 12287]) ("define-key" code nil nil [12524 12566]) ("define-key" code nil nil [12615 12669]) ("diredp-menu-bar-immediate-menu" variable (:default-value (make-sparse-keymap "Single")) nil [12761 12830]) ("define-key" code nil nil [12831 12928]) ("define-key" code nil nil [12929 13195]) ("define-key" code nil nil [13196 13462]) ("define-key" code nil nil [13463 13656]) ("define-key" code nil nil [13657 13723]) ("define-key" code nil nil [13724 13888]) ("define-key" code nil nil [13889 14080]) ("define-key" code nil nil [14081 14281]) ("define-key" code nil nil [14282 14478]) ("define-key" code nil nil [14479 14669]) ("when" code nil nil [14670 14921]) ("define-key" code nil nil [14922 14990]) ("define-key" code nil nil [14991 15191]) ("if" code nil nil [15192 15940]) ("define-key" code nil nil [15941 16009]) ("define-key" code nil nil [16010 16151]) ("define-key" code nil nil [16152 16357]) ("define-key" code nil nil [16358 16820]) ("define-key" code nil nil [16821 17147]) ("define-key" code nil nil [17148 17320]) ("define-key" code nil nil [17321 17460]) ("define-key" code nil nil [17461 17528]) ("define-key" code nil nil [17529 17725]) ("define-key" code nil nil [17726 17910]) ("define-key" code nil nil [17911 18088]) ("define-key" code nil nil [18089 18157]) ("define-key" code nil nil [18158 18343]) ("define-key" code nil nil [18344 18546]) ("define-key" code nil nil [18547 18765]) ("define-key" code nil nil [18766 18987]) ("define-key" code nil nil [18988 19120]) ("diredp-menu-bar-operate-menu" variable (:default-value (make-sparse-keymap "Multiple")) nil [19212 19281]) ("define-key" code nil nil [19282 19377]) ("define-key" code nil nil [19378 19632]) ("define-key" code nil nil [19633 19887]) ("define-key" code nil nil [19888 20069]) ("when" code nil nil [20167 20415]) ("define-key" code nil nil [20416 20480]) ("define-key" code nil nil [20481 20613]) ("define-key" code nil nil [20614 20798]) ("define-key" code nil nil [20799 20995]) ("define-key" code nil nil [20996 21180]) ("define-key" code nil nil [21181 21487]) ("define-key" code nil nil [21488 21662]) ("define-key" code nil nil [21663 21841]) ("when" code nil nil [21842 22087]) ("define-key" code nil nil [22088 22154]) ("define-key" code nil nil [22155 22345]) ("if" code nil nil [22346 23086]) ("define-key" code nil nil [23087 23153]) ("define-key" code nil nil [23154 23354]) ("define-key" code nil nil [23355 23551]) ("define-key" code nil nil [23552 23752]) ("define-key" code nil nil [23753 24067]) ("define-key" code nil nil [24068 24376]) ("define-key" code nil nil [24377 24558]) ("define-key" code nil nil [24559 24731]) ("define-key" code nil nil [24732 24798]) ("when" code nil nil [24799 25058]) ("when" code nil nil [25059 25310]) ("diredp-menu-bar-regexp-menu" variable (:default-value (make-sparse-keymap "Regexp")) nil [25399 25465]) ("define-key" code nil nil [25466 25557]) ("define-key" code nil nil [25558 25752]) ("if" code nil nil [25753 26600]) ("define-key" code nil nil [26601 26783]) ("define-key" code nil nil [26784 26958]) ("define-key" code nil nil [26959 27139]) ("define-key" code nil nil [27140 27329]) ("define-key" code nil nil [27330 27538]) ("diredp-menu-bar-mark-menu" variable (:default-value (make-sparse-keymap "Mark")) nil [27623 27685]) ("define-key" code nil nil [27686 27769]) ("when" code nil nil [27771 28031]) ("define-key" code nil nil [28032 28224]) ("define-key" code nil nil [28225 28416]) ("define-key" code nil nil [28417 28616]) ("define-key" code nil nil [28617 28879]) ("when" code nil nil [28880 28986]) ("define-key" code nil nil [28987 29165]) ("define-key" code nil nil [29166 29229]) ("define-key" code nil nil [29230 29404]) ("define-key" code nil nil [29405 29571]) ("define-key" code nil nil [29572 29752]) ("define-key" code nil nil [29753 29931]) ("define-key" code nil nil [29932 30111]) ("define-key" code nil nil [30112 30283]) ("define-key" code nil nil [30284 30699]) ("define-key" code nil nil [30700 30763]) ("when" code nil nil [30764 31010]) ("define-key" code nil nil [31011 31214]) ("define-key" code nil nil [31215 31447]) ("define-key" code nil nil [31448 31642]) ("define-key" code nil nil [31643 31832]) ("define-key" code nil nil [31833 32012]) ("define-key" code nil nil [32013 32256]) ("when" code nil nil [32257 32350]) ("define-key" code nil nil [32351 32520]) ("define-key" code nil nil [32521 32586]) ("define-key" code nil nil [32587 32765]) ("define-key" code nil nil [32766 32978]) ("define-key" code nil nil [32979 33223]) ("when" code nil nil [33224 33319]) ("define-key" code nil nil [33320 33485]) ("diredp-menu-bar-subdir-menu" variable (:default-value (make-sparse-keymap "Dir")) nil [33571 33634]) ("define-key" code nil nil [33635 33723]) ("define-key" code nil nil [33724 33914]) ("define-key" code nil nil [33915 34106]) ("define-key" code nil nil [34107 34292]) ("define-key" code nil nil [34293 34470]) ("define-key" code nil nil [34471 34656]) ("define-key" code nil nil [34657 34838]) ("define-key" code nil nil [34839 35024]) ("define-key" code nil nil [35025 35206]) ("define-key" code nil nil [35207 35394]) ("define-key" code nil nil [35395 35462]) ("define-key" code nil nil [35463 35574]) ("define-key" code nil nil [35601 35765]) ("when" code nil nil [35863 36069]) ("define-key" code nil nil [36070 36265]) ("define-key" code nil nil [36294 36352]) ("define-key" code nil nil [36544 36596]) ("define-key" code nil nil [36627 36698]) ("define-key" code nil nil [36699 36772]) ("define-key" code nil nil [36773 36841]) ("define-key" code nil nil [36842 36889]) ("define-key" code nil nil [36890 36965]) ("define-key" code nil nil [36966 37023]) ("define-key" code nil nil [37035 37099]) ("define-key" code nil nil [37100 37155]) ("define-key" code nil nil [37156 37201]) ("substitute-key-definition" code nil nil [37202 37320]) ("substitute-key-definition" code nil nil [37321 37447]) ("define-key" code nil nil [37710 37772]) ("define-key" code nil nil [37773 37829]) ("define-key" code nil nil [37830 37890]) ("define-key" code nil nil [37891 37949]) ("define-key" code nil nil [37950 37999]) ("when" code nil nil [38000 38094]) ("define-key" code nil nil [38095 38155]) ("define-key" code nil nil [38156 38218]) ("define-key" code nil nil [38219 38283]) ("define-key" code nil nil [38284 38343]) ("define-key" code nil nil [38344 38403]) ("substitute-key-definition" code nil nil [38404 38530]) ("define-key" code nil nil [38600 38662]) ("when" code nil nil [38833 38940]) ("defgroup" code nil nil [38944 39661]) ("diredp-display-msg" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Blue"))))) nil [39779 39893]) ("diredp-display-msg" variable (:default-value (quote diredp-display-msg)) nil [39894 39941]) ("diredp-dir-heading" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Blue" :background "Pink"))))) nil [40015 40206]) ("diredp-dir-heading" variable (:default-value (quote diredp-dir-heading)) nil [40207 40254]) ("diredp-deletion" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Yellow" :background "Red"))))) nil [40256 40445]) ("diredp-deletion" variable (:default-value (quote diredp-deletion)) nil [40446 40487]) ("diredp-deletion-file-name" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Red"))))) nil [40489 40671]) ("diredp-deletion-file-name" variable (:default-value (quote diredp-deletion-file-name)) nil [40672 40733]) ("diredp-flag-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Yellow" :background "Blueviolet"))))) nil [40735 40940]) ("diredp-flag-mark" variable (:default-value (quote diredp-flag-mark)) nil [40941 40984]) ("diredp-flag-mark-line" variable (:user-visible-flag t :default-value (quote ((t (:background "Skyblue"))))) nil [40986 41170]) ("diredp-flag-mark-line" variable (:default-value (quote diredp-flag-mark-line)) nil [41171 41224]) ("diredp-file-suffix" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkMagenta"))))) nil [41226 41400]) ("diredp-file-suffix" variable (:default-value (quote diredp-file-suffix)) nil [41401 41448]) ("diredp-symlink" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkOrange"))))) nil [41450 41620]) ("diredp-symlink" variable (:default-value (quote diredp-symlink)) nil [41621 41660]) ("diredp-date-time" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkGoldenrod4"))))) nil [41662 41837]) ("diredp-date-time" variable (:default-value (quote diredp-date-time)) nil [41838 41881]) ("diredp-file-name" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Blue"))))) nil [41883 42064]) ("diredp-file-name" variable (:default-value (quote diredp-file-name)) nil [42065 42108]) ("diredp-ignored-file-name" variable (:user-visible-flag t :default-value (quote ((t (:foreground "#00006DE06DE0"))))) nil [42110 42298]) ("diredp-ignored-file-name" variable (:default-value (quote diredp-ignored-file-name)) nil [42299 42358]) ("diredp-compressed-file-suffix" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Yellow"))))) nil [42360 42551]) ("diredp-compressed-file-suffix" variable (:default-value (quote diredp-compressed-file-suffix)) nil [42552 42621]) ("diredp-executable-tag" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Red"))))) nil [42766 42954]) ("diredp-executable-tag" variable (:default-value (quote diredp-executable-tag)) nil [42955 43008]) ("diredp-dir-priv" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))) nil [43010 43221]) ("diredp-dir-priv" variable (:default-value (quote diredp-dir-priv)) nil [43222 43263]) ("diredp-exec-priv" variable (:user-visible-flag t :default-value (quote ((t (:background "LightSteelBlue"))))) nil [43265 43458]) ("diredp-exec-priv" variable (:default-value (quote diredp-exec-priv)) nil [43459 43502]) ("diredp-other-priv" variable (:user-visible-flag t :default-value (quote ((t (:background "PaleGoldenrod"))))) nil [43504 43696]) ("diredp-other-priv" variable (:default-value (quote diredp-other-priv)) nil [43697 43742]) ("diredp-write-priv" variable (:user-visible-flag t :default-value (quote ((t (:background "Orchid"))))) nil [43744 43928]) ("diredp-write-priv" variable (:default-value (quote diredp-write-priv)) nil [43929 43974]) ("diredp-read-priv" variable (:user-visible-flag t :default-value (quote ((t (:background "MediumAquamarine"))))) nil [43976 44168]) ("diredp-read-priv" variable (:default-value (quote diredp-read-priv)) nil [44169 44212]) ("diredp-no-priv" variable (:user-visible-flag t :default-value (quote ((t (:background "LightGray"))))) nil [44214 44395]) ("diredp-no-priv" variable (:default-value (quote diredp-no-priv)) nil [44396 44435]) ("diredp-rare-priv" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Magenta" :background "SpringGreen"))))) nil [44437 44657]) ("diredp-rare-priv" variable (:default-value (quote diredp-rare-priv)) nil [44658 44701]) ("diredp-link-priv" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkOrange"))))) nil [44703 44889]) ("diredp-link-priv" variable (:default-value (quote diredp-link-priv)) nil [44890 44933]) ("diredp-font-lock-keywords-1" variable (:default-value (list (quote ("^  \\(.+:\\)$" 1 diredp-dir-heading)) (quote ("[^ .]\\.\\([^. /]+\\)$" 1 diredp-file-suffix)) (quote ("\\([^ ]+\\) -> [^ ]+$" 1 diredp-symlink)) (list dired-move-to-filename-regexp (quote (1 diredp-date-time t t)) (list "\\(.+\\)$" nil nil (list 0 diredp-file-name (quote keep) t))) (list (concat "^  \\(.*\\(" (concat (mapconcat (quote regexp-quote) (or (and (boundp (quote dired-omit-extensions)) dired-omit-extensions) completion-ignored-extensions) "[*]?\\|") "[*]?") "\\|\\.\\(g?z\\|Z\\)[*]?\\)\\)$") 1 diredp-ignored-file-name t) (quote ("[^ .]\\.\\(g?[zZ]\\)[*]?$" 1 diredp-compressed-file-suffix t)) (quote ("\\([*]\\)$" 1 diredp-executable-tag t)) (quote (" \\([0-9]+[kKMGTPEZY]?\\)" 1 diredp-file-suffix)) (list "^..\\([0-9]* \\)*d" (list dired-move-to-filename-regexp nil nil) (list "\\(.+\\)" nil nil (quote (0 diredp-dir-priv t t)))) (quote ("^..\\([0-9]* \\)*.........\\(x\\)" 2 diredp-exec-priv)) (quote ("^..\\([0-9]* \\)*.........\\([lsStT]\\)" 2 diredp-other-priv)) (quote ("^..\\([0-9]* \\)*........\\(w\\)" 2 diredp-write-priv)) (quote ("^..\\([0-9]* \\)*.......\\(r\\)" 2 diredp-read-priv)) (quote ("^..\\([0-9]* \\)*......\\(x\\)" 2 diredp-exec-priv)) (quote ("^..\\([0-9]* \\)*....[^0-9].\\([lsStT]\\)" 2 diredp-other-priv)) (quote ("^..\\([0-9]* \\)*.....\\(w\\)" 2 diredp-write-priv)) (quote ("^..\\([0-9]* \\)*....\\(r\\)" 2 diredp-read-priv)) (quote ("^..\\([0-9]* \\)*...\\(x\\)" 2 diredp-exec-priv)) (quote ("^..\\([0-9]* \\)*...\\([lsStT]\\)" 2 diredp-other-priv)) (quote ("^..\\([0-9]* \\)*..\\(w\\)" 2 diredp-write-priv)) (quote ("^..\\([0-9]* \\)*.\\(r\\)" 2 diredp-read-priv)) (quote ("^..\\([0-9]* \\)*.\\([-rwxlsStT]+\\)" 2 diredp-no-priv keep)) (quote ("^..\\([0-9]* \\)*\\([bcsmpS]\\)[-rwxlsStT]" 2 diredp-rare-priv)) (quote ("^..\\([0-9]* \\)*\\(l\\)[-rwxlsStT]" 2 diredp-link-priv)) (list (concat "^\\([^ " (char-to-string dired-del-marker) "].*$\\)") 1 diredp-flag-mark-line t) (list (concat "^\\([" (char-to-string dired-del-marker) "]\\)") (quote (1 diredp-deletion t)) (quote (".+" (dired-move-to-filename) nil (0 diredp-deletion-file-name t)))) (list (concat "^\\([^ " (char-to-string dired-del-marker) "]\\)") 1 diredp-flag-mark t))) nil [44975 47880]) ("add-hook" code nil nil [47931 48229]) ("diredp-mark/unmark-extension" function (:user-visible-flag t :arguments ("extension" "&optional" "unmark-p")) nil [48477 49341]) ("dired-buffers-for-dir" function (:arguments ("dir" "&optional" "file")) nil [49427 50718]) ("diredp-find-file-other-frame" function (:user-visible-flag t) nil [50735 50926]) ("diredp-mouse-find-file-other-frame" function (:user-visible-flag t :arguments ("event")) nil [50943 51155]) ("when" code nil nil [51685 52860]) ("unless" code nil nil [52899 53813]) ("diredp-find-file-reuse-dir-buffer" function (:user-visible-flag t) nil [53815 54111]) ("diredp-mouse-find-file-reuse-dir-buffer" function (:user-visible-flag t :arguments ("event")) nil [54128 54695]) ("toggle-dired-find-file-reuse-dir" function (:user-visible-flag t :arguments ("force-p")) nil [54712 55273]) ("defalias" code nil nil [55290 55369]) ("diredp-subst-find-alternate-for-find" function nil nil [55371 55790]) ("diredp-subst-find-for-find-alternate" function nil nil [55792 56221]) ("diredp-omit-marked" function (:user-visible-flag t) nil [56239 56629]) ("diredp-omit-unmarked" function (:user-visible-flag t) nil [56798 57236]) ("diredp-ediff" function (:user-visible-flag t :arguments ("file2")) nil [57253 57877]) ("diredp-fewer-than-2-files-p" function (:arguments ("arg")) nil [57897 58376]) ("dired-do-compress" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [58499 58757]) ("dired-do-byte-compile" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [58879 59150]) ("dired-do-load" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [59272 59515]) ("dired-do-find-marked-files" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [60533 61422]) ("dired-simultaneous-find-file" function (:arguments ("file-list" "option")) nil [61580 63118]) ("when" code nil nil [67395 67676]) ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [67782 68281]) ("dired-do-flagged-delete" function (:user-visible-flag t :arguments ("&optional" "no-msg")) nil [68414 69207]) ("dired-do-delete" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [69339 70054]) ("diredp-capitalize" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [70071 70364]) ("diredp-delete-this-file" function (:user-visible-flag t) nil [70432 70574]) ("diredp-capitalize-this-file" function (:user-visible-flag t) nil [70575 70805]) ("diredp-downcase-this-file" function (:user-visible-flag t) nil [70806 70944]) ("diredp-upcase-this-file" function (:user-visible-flag t) nil [70945 71079]) ("diredp-rename-this-file" function (:user-visible-flag t) nil [71080 71203]) ("diredp-copy-this-file" function (:user-visible-flag t) nil [71204 71321]) ("diredp-relsymlink-this-file" function (:user-visible-flag t) nil [71322 71508]) ("diredp-symlink-this-file" function (:user-visible-flag t) nil [71509 71651]) ("diredp-hardlink-this-file" function (:user-visible-flag t) nil [71652 71798]) ("diredp-print-this-file" function (:user-visible-flag t) nil [71799 71919]) ("diredp-compress-this-file" function (:user-visible-flag t) nil [71920 72063]) ("diredp-shell-command-this-file" function (:user-visible-flag t :arguments ("command")) nil [72064 72362]) ("diredp-byte-compile-this-file" function (:user-visible-flag t) nil [72363 72518]) ("diredp-load-this-file" function (:user-visible-flag t) nil [72519 72636]) ("diredp-chmod-this-file" function (:user-visible-flag t) nil [72637 72770]) ("diredp-chgrp-this-file" function (:user-visible-flag t) nil [72771 72905]) ("diredp-chown-this-file" function (:user-visible-flag t) nil [72906 73040]) ("dired-mark-sexp" function (:user-visible-flag t :arguments ("predicate" "&optional" "unmark-p")) nil [73250 78048]) ("diredp-mark-region-files" function (:user-visible-flag t :arguments ("&optional" "unmark-p")) nil [78065 78622]) ("diredp-unmark-region-files" function (:user-visible-flag t :arguments ("&optional" "mark-p")) nil [78639 79194]) ("diredp-flag-region-files-for-deletion" function (:user-visible-flag t) nil [79211 79696]) ("diredp-file-line-overlay" variable nil nil [79752 79789]) ("diredp-mouse-3-menu" function (:user-visible-flag t :arguments ("event")) nil [79806 83821]) ("diredp-mouse-find-file" function (:user-visible-flag t :arguments ("event")) nil [83838 84274]) ("diredp-mouse-view-file" function (:user-visible-flag t :arguments ("event")) nil [84291 84944]) ("diredp-mouse-ediff" function (:user-visible-flag t :arguments ("event")) nil [84991 85539]) ("diredp-mouse-diff" function (:user-visible-flag t :arguments ("event" "&optional" "switches")) nil [85556 86881]) ("diredp-mouse-backup-diff" function (:user-visible-flag t :arguments ("event")) nil [86898 87772]) ("diredp-mouse-mark" function (:user-visible-flag t :arguments ("event")) nil [87789 88541]) ("diredp-mouse-unmark" function (:user-visible-flag t :arguments ("event")) nil [88558 88915]) ("diredp-mouse-mark/unmark" function (:user-visible-flag t :arguments ("event")) nil [89096 90077]) ("diredp-mouse-mark-region-files" function (:user-visible-flag t :arguments ("event")) nil [90344 90528]) ("diredp-mouse-mark/unmark-mark-region-files" function (:user-visible-flag t :arguments ("event")) nil [90752 91662]) ("diredp-mouse-flag-file-deletion" function (:user-visible-flag t :arguments ("event")) nil [91679 92069]) ("diredp-mouse-do-copy" function (:user-visible-flag t :arguments ("event")) nil [92086 92541]) ("diredp-mouse-do-rename" function (:user-visible-flag t :arguments ("event")) nil [92558 92902]) ("diredp-mouse-upcase" function (:user-visible-flag t :arguments ("event")) nil [92919 93221]) ("diredp-mouse-downcase" function (:user-visible-flag t :arguments ("event")) nil [93238 93544]) ("diredp-mouse-do-delete" function (:user-visible-flag t :arguments ("event")) nil [93561 94006]) ("diredp-mouse-do-shell-command" function (:user-visible-flag t :arguments ("event")) nil [94023 95183]) ("diredp-mouse-do-symlink" function (:user-visible-flag t :arguments ("event")) nil [95200 95549]) ("diredp-mouse-do-hardlink" function (:user-visible-flag t :arguments ("event")) nil [95566 95921]) ("diredp-mouse-do-print" function (:user-visible-flag t :arguments ("event")) nil [95938 96532]) ("diredp-mouse-do-compress" function (:user-visible-flag t :arguments ("event")) nil [96549 96900]) ("diredp-mouse-do-byte-compile" function (:user-visible-flag t :arguments ("event")) nil [96917 97270]) ("diredp-mouse-do-load" function (:user-visible-flag t :arguments ("event")) nil [97287 97619]) ("diredp-mouse-do-chmod" function (:user-visible-flag t :arguments ("event")) nil [97636 97981]) ("diredp-mouse-do-chgrp" function (:user-visible-flag t :arguments ("event")) nil [97998 98285]) ("diredp-mouse-do-chown" function (:user-visible-flag t :arguments ("event")) nil [98302 98601]))
    :file "dired+.el"
    :pointmax 98698
    :unmatched-syntax 'nil
    )
   (semanticdb-table "frame+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("frame" include nil nil [2936 2952]) ("fit-frame" include nil nil [2954 2980]) ("special-display-popup-frame" function (:arguments ("buffer" "&optional" "args")) nil [3337 5741]) ("frame+" package nil nil [5789 5806]))
    :file "frame+.el"
    :pointmax 5903
    :unmatched-syntax 'nil
    )
   (semanticdb-table "frame-fns.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [2671 2684]) ("avoid" include nil nil [2848 2870]) ("window-coords" function (:arguments ("&optional" "position")) nil [2946 3203]) ("distance" function (:arguments ("pt1" "pt2")) nil [3220 3488]) ("frame-geom-value-numeric" function (:arguments ("type" "value" "&optional" "frame")) nil [3505 5452]) ("frame-geom-spec-numeric" function (:arguments ("spec" "&optional" "frame")) nil [5469 6712]) ("frame-geom-value-cons" function (:arguments ("type" "value" "&optional" "frame")) nil [6729 8599]) ("frame-geom-spec-cons" function (:arguments ("spec" "&optional" "frame")) nil [8616 9869]) ("get-frame-name" function (:arguments ("&optional" "frame")) nil [9886 10197]) ("get-a-frame" function (:arguments ("frame")) nil [10214 10674]) ("read-frame" function (:arguments ("prompt" "&optional" "default" "existing")) nil [10691 11587]) ("frames-on" function (:arguments ("buffer" "&optional" "frame")) nil [11604 11860]) ("1-window-frames-on" function (:arguments ("buffer")) nil [11877 12374]) ("multi-window-frames-on" function (:arguments ("buffer")) nil [12391 12902]) ("flash-ding" function (:arguments ("&optional" "do-not-terminate" "frame")) nil [12919 13329]) ("frame-fns" package nil nil [13365 13385]))
    :file "frame-fns.el"
    :pointmax 13485
    :unmatched-syntax 'nil
    )
   (semanticdb-table "window+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("count-windows" function (:arguments ("&optional" "minibuf")) nil [2701 3453]) ("window+" package nil nil [3481 3499]))
    :file "window+.el"
    :pointmax 3597
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mouse+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("mouse" include nil nil [4904 4920]) ("and" code nil nil [4921 4992]) ("mouse-scan-lines" variable (:user-visible-flag t :default-value (quote ((t (:background "Yellow"))))) nil [5034 5170]) ("mouse-flash-position" variable (:user-visible-flag t :default-value (quote ((t (:background "Yellow"))))) nil [5172 5304]) ("mouse-scan-lines-overlay" variable (:constant-flag t :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol (quote face) (quote mouse-scan-lines)) (overlay-put ol (quote mouse-face) (quote mouse-scan-lines)) (overlay-put ol (quote priority) 1000000) ol)) nil [5306 5699]) ("mouse-flash-posn-overlay" variable (:constant-flag t :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol (quote face) (quote mouse-flash-position)) (overlay-put ol (quote mouse-face) (quote mouse-flash-position)) (overlay-put ol (quote priority) 1000000) ol)) nil [5701 6082]) ("mouse-scan-lines-or-M-:" function (:user-visible-flag t :arguments ("start-event")) nil [6148 6902]) ("mouse-M-:" function (:user-visible-flag t :arguments ("start-event")) nil [6919 7647]) ("mouse-scan-lines" function (:user-visible-flag t :arguments ("start-event")) nil [7704 9148]) ("mouse-move-flash-posn-overlay" function (:arguments ("ol" "start" "end")) nil [9150 9935]) ("mouse-flash-position-or-M-x" function (:user-visible-flag t :arguments ("start-event")) nil [10032 10886]) ("mouse-flash-position" function (:user-visible-flag t :arguments ("start-event")) nil [10983 11682]) ("mouse-flash-posn-track" function (:arguments ("start-event")) nil [11684 15776]) ("mouse-tear-off-window" function (:user-visible-flag t :arguments ("event")) nil [15937 16496]) ("mouse-yank-secondary" function (:user-visible-flag t :arguments ("event")) nil [16610 17166]) ("mouse+" package nil nil [18652 18669]))
    :file "mouse+.el"
    :pointmax 18766
    :unmatched-syntax 'nil
    )
   (semanticdb-table "simple+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("and" code nil nil [4384 4455]) ("strings" include nil nil [4506 4524]) ("when" code nil nil [4754 5698]) ("set-any-variable-value-history" variable nil nil [5701 5799]) ("read-var-and-value" function (:arguments ("read-var-fn" "set-var-hist-var" "make-local-p")) nil [5985 7135]) ("set-variable" function (:user-visible-flag t :arguments ("var" "val" "&optional" "make-local")) nil [7246 8664]) ("set-any-variable" function (:user-visible-flag t :arguments ("variable" "value" "&optional" "make-local")) nil [8666 10169]) ("when" code nil nil [10287 14667]) ("simple+" package nil nil [14694 14712]))
    :file "simple+.el"
    :pointmax 14810
    :unmatched-syntax 'nil
    )
   (semanticdb-table "grep+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("compile+" include nil nil [4318 4343]) ("font-lock" include nil nil [4411 4431]) ("grep" include nil nil [4458 4473]) ("thingatpt+" include nil nil [4474 4501]) ("grepp-default-comment-line-regexp" variable (:default-value ":[0-9]+: *;") nil [4597 4824]) ("grepp-default-regexp-fn" variable (:user-visible-flag t :default-value (if (fboundp (quote symbol-name-nearest-point)) (quote symbol-name-nearest-point) (quote word-at-point))) nil [4841 5575]) ("grepp-default-regexp-fn" function nil nil [5593 6366]) ("grep-default-command" function nil nil [6482 7695]) ("grep" function (:user-visible-flag t :arguments ("command-args" "&optional" "highlight-regexp")) nil [7819 9675]) ("defalias" code nil nil [9678 9728]) ("grepp-new-grep-buffer" function (:user-visible-flag t) nil [9744 10092]) ("defalias" code nil nil [10095 10151]) ("grepp-choose-grep-buffer" function (:user-visible-flag t :arguments ("buf")) nil [10167 10565]) ("grepp-buffers" function nil nil [10567 10804]) ("defalias" code nil nil [10806 10861]) ("grepp-remove-comments" function (:user-visible-flag t :arguments ("&optional" "read-regexp-p")) nil [10877 11992]) ("defalias" code nil nil [11994 12049]) ("grepp-toggle-comments" function (:user-visible-flag t) nil [12065 12697]) ("define-key" code nil nil [12717 12753]) ("define-key" code nil nil [12754 12790]) ("define-key" code nil nil [12791 12843]) ("define-key" code nil nil [12844 12896]) ("define-key" code nil nil [12897 12953]) ("define-key" code nil nil [12954 13010]) ("define-key" code nil nil [13011 13064]) ("define-key" code nil nil [13065 13121]) ("define-key" code nil nil [13122 13178]) ("define-key" code nil nil [13179 13232]) ("define-key" code nil nil [13233 13295]) ("set-face-foreground" code nil nil [13316 13357]) ("set-face-background" code nil nil [13358 13405]) ("setq" code nil nil [13406 13449]) ("unless" code nil nil [13589 14595]) ("unless" code nil nil [14735 16752]) ("define-compilation-mode" code nil nil [16943 17382]) ("grep+" package nil nil [17409 17425]))
    :file "grep+.el"
    :pointmax 17521
    :unmatched-syntax 'nil
    )
   (semanticdb-table "autofit-frame.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("and" code nil nil [7455 7521]) ("fit-frame" include nil nil [7530 7550]) ("strings" include nil nil [7564 7588]) ("misc-fns" include nil nil [7628 7653]) ("autofit-frames-flag" variable (:user-visible-flag t :default-value t) nil [7811 8246]) ("fit-frame-if-one-window" function nil nil [8473 8719]) ("or" code nil nil [9815 9914]) ("display-buffer" function (:user-visible-flag t :arguments ("buffer" "&optional" "not-this-window" "frame")) nil [10204 12001]) ("or" code nil nil [12055 12160]) ("switch-to-buffer" function (:user-visible-flag t :arguments ("buffer" "&optional" "norecord")) nil [12644 14244]) ("autofit-frame" package nil nil [14271 14295]))
    :file "autofit-frame.el"
    :pointmax 14399
    :unmatched-syntax 'nil
    )
   (semanticdb-table "buff-menu+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [11467 11480]) ("misc-fns" include nil nil [11616 11641]) ("misc-cmds" include nil nil [11695 11721]) ("fit-frame" include nil nil [11778 11804]) ("unless" code nil nil [11876 12141]) ("Buffer-menu-revert-function" function (:arguments ("ignore1" "ignore2")) nil [12282 13022]) ("Buffer-menu-fontify-and-adjust-frame" function nil nil [13024 13508]) ("add-hook" code nil nil [13559 13630]) ("Buffer-menu-beginning" function nil nil [13700 13860]) ("Buffer-menu-sort-column" variable (:constant-flag t :user-visible-flag t :default-value (if (or (not (boundp (quote Buffer-menu-sort-column))) (null Buffer-menu-sort-column)) 1 Buffer-menu-sort-column)) nil [14145 14376]) ("when" code nil nil [14559 14672]) ("defgroup" code nil nil [14710 15479]) ("buffer-menu-headings" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Orange" :background "DarkGreen"))))) nil [15481 15686]) ("buffer-menu-headings" variable (:default-value (quote buffer-menu-headings)) nil [15687 15738]) ("buffer-menu-current-buffer" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Red" :background "Aquamarine"))))) nil [15740 15960]) ("buffer-menu-current-buffer" variable (:default-value (quote buffer-menu-current-buffer)) nil [15961 16024]) ("buffer-menu-view-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Red" :background "Aquamarine"))))) nil [16026 16246]) ("buffer-menu-view-mark" variable (:default-value (quote buffer-menu-view-mark)) nil [16247 16300]) ("buffer-menu-delete-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Aquamarine" :background "Red"))))) nil [16302 16526]) ("buffer-menu-delete-mark" variable (:default-value (quote buffer-menu-delete-mark)) nil [16527 16584]) ("buffer-menu-save-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Orange" :background "Blue"))))) nil [16586 16803]) ("buffer-menu-save-mark" variable (:default-value (quote buffer-menu-save-mark)) nil [16804 16857]) ("buffer-menu-modified-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkOrange"))))) nil [16859 17066]) ("buffer-menu-modified-mark" variable (:default-value (quote buffer-menu-modified-mark)) nil [17067 17128]) ("buffer-menu-read-only-mark" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Yellow"))))) nil [17130 17335]) ("buffer-menu-read-only-mark" variable (:default-value (quote buffer-menu-read-only-mark)) nil [17336 17399]) ("buffer-menu-buffer-name" variable (:user-visible-flag t :default-value (quote ((t (:foreground "Blue"))))) nil [17401 17587]) ("buffer-menu-buffer-name" variable (:default-value (quote buffer-menu-buffer-name)) nil [17588 17645]) ("put" code nil nil [17723 17785]) ("buffer-menu-mode" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkGreen"))))) nil [17787 17971]) ("buffer-menu-mode" variable (:default-value (quote buffer-menu-mode)) nil [17972 18015]) ("buffer-menu-size" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkRed"))))) nil [18017 18199]) ("buffer-menu-size" variable (:default-value (quote buffer-menu-size)) nil [18200 18243]) ("buffer-menu-time" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkGoldenrod4"))))) nil [18245 18433]) ("buffer-menu-time" variable (:default-value (quote buffer-menu-time)) nil [18434 18477]) ("buffer-menu-file-name" variable (:user-visible-flag t :default-value (quote ((t (:foreground "DarkMagenta"))))) nil [18479 18668]) ("buffer-menu-file-name" variable (:default-value (quote buffer-menu-file-name)) nil [18669 18722]) ("buffer-menu-font-lock-keywords" variable (:user-visible-flag t :default-value (list (if (not (boundp (quote Buffer-menu-use-header-line))) (list "^\\( M.*\\)" 1 (quote buffer-menu-headings)) (list "^\\(CRM.*\\)" 1 (quote buffer-menu-headings))) (list "^....\\(.+\\)[ 	
][0-9]" 1 (quote buffer-menu-buffer-name)) (if (or (string-match "22." emacs-version) (string-match "21.3.50" emacs-version)) (list "^.*[ 	][0-9]+[ 	]+\\(.* \\(AM\\|PM\\)\\)?\\([^/
]+\\)" (list 1 (quote buffer-menu-time) t t) (list 3 (quote buffer-menu-mode) t t)) (list "^.*[ 	][0-9]+[ 	]+\\([^/
]+\\)" 1 (quote buffer-menu-mode) t t)) (list "^.*[ 	]\\([0-9]+\\)[ 	]+[^/
]+" 1 (quote buffer-menu-size) t t) (list "\\(/.*\\)$" 1 (quote buffer-menu-file-name) t t) (list "^\\([.]\\)" 1 (quote buffer-menu-current-buffer) t t) (list "^\\(>\\)" 1 (quote buffer-menu-view-mark) t t) (list "^\\(D\\)" 1 (quote buffer-menu-delete-mark) t t) (if (or (string-match "22." emacs-version) (string-match "21.3.50" emacs-version)) (list "^..\\(S\\)" 1 (quote buffer-menu-save-mark) t t) (list "^.\\(S\\)" 1 (quote buffer-menu-save-mark) t t)) (if (or (string-match "22." emacs-version) (string-match "21.3.50" emacs-version)) (list "^..\\([*]\\)" 1 (quote buffer-menu-modified-mark) t t) (list "^.\\([*]\\)" 1 (quote buffer-menu-modified-mark) t t)) (if (or (string-match "22." emacs-version) (string-match "21.3.50" emacs-version)) (list "^.\\(%\\)" 1 (quote buffer-menu-read-only-mark) t t) (list "^..\\(%\\)" 1 (quote buffer-menu-read-only-mark) t t)))) nil [18726 20970]) ("unless" code nil nil [20998 21594]) ("unless" code nil nil [21596 22079]) ("buffer-menu" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [22391 24198]) ("Buffer-menu-mode" function nil nil [24405 28220]) ("Buffer-menu-execute" function (:user-visible-flag t) nil [28373 30056]) ("Buffer-menu-select" function (:user-visible-flag t) nil [30196 32049]) ("Buffer-menu-sort" function (:user-visible-flag t :arguments ("column")) nil [32321 33984]) ("Buffer-menu-make-sort-button" function (:arguments ("name" "button-column")) nil [34233 35384]) ("when" code nil nil [35834 46346]) ("define-key" code nil nil [46349 46423]) ("define-key" code nil nil [46424 46475]) ("Buffer-menu-overlay" variable nil nil [47518 47550]) ("Buffer-menu-mouse-3-menu" function (:user-visible-flag t :arguments ("event")) nil [47567 49583]) ("Buffer-menu-mouse-other-window" function (:user-visible-flag t :arguments ("event")) nil [49659 50111]) ("Buffer-menu-mouse-unmark" function (:user-visible-flag t :arguments ("event")) nil [50128 50935]) ("Buffer-menu-mouse-save" function (:user-visible-flag t :arguments ("event")) nil [50952 51482]) ("Buffer-menu-mouse-delete" function (:user-visible-flag t :arguments ("event")) nil [51499 52012]) ("Buffer-menu-mouse-modified" function (:user-visible-flag t :arguments ("event")) nil [52029 52658]) ("Buffer-menu-mouse-execute" function (:user-visible-flag t :arguments ("event")) nil [52676 54410]) ("buff-menu+" package nil nil [54438 54459]))
    :file "buff-menu+.el"
    :pointmax 54560
    :unmatched-syntax 'nil
    )
   (semanticdb-table "oneonone.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [20601 20614]) ("frame-cmds" include nil nil [20667 20694]) ("files+" include nil nil [20801 20824]) ("zoom-frm" include nil nil [20882 20907]) ("hexrgb" include nil nil [20949 20966]) ("oneonone" package nil nil [21088 21107]) ("oneonone" include nil nil [21108 21127]) ("unless" code nil nil [21248 21394]) ("defgroup" code nil nil [21423 22155]) ("1on1-^L-appearance-vector" variable (:default-value (vconcat (make-vector 10 95) " Section (Printable Page) " (make-vector 10 95))) nil [22242 23129]) ("1on1-minibuffer-frame" variable nil nil [23193 23342]) ("1on1-minibuffer-frame-flag" variable (:user-visible-flag t :default-value t) nil [23344 23537]) ("1on1-minibuffer-frame-foreground" variable (:user-visible-flag t :default-value "Red") nil [23539 23911]) ("1on1-minibuffer-frame-background" variable (:user-visible-flag t :default-value "LightBlue") nil [23913 24297]) ("1on1-active-minibuffer-frame-background" variable (:user-visible-flag t :default-value "PaleGoldenrod") nil [24299 24571]) ("1on1-inactive-minibuffer-frame-background" variable (:user-visible-flag t :default-value 1on1-minibuffer-frame-background) nil [24573 24866]) ("1on1-isearch-minibuffer-frame-background" variable (:user-visible-flag t :default-value "bisque") nil [24868 25179]) ("1on1-color-mode-line-flag" variable (:user-visible-flag t :default-value t) nil [25181 25363]) ("1on1-color-minibuffer-frame-on-exit-increment" variable (:default-value 5) nil [25365 25617]) ("1on1-color-minibuffer-frame-on-setup-increment" variable (:default-value -10) nil [25619 25874]) ("1on1-active-mode-line-background" variable (:user-visible-flag t :default-value 1on1-active-minibuffer-frame-background) nil [25876 26148]) ("1on1-inactive-mode-line-background" variable (:user-visible-flag t :default-value "LightGray") nil [26150 26398]) ("1on1-minibuffer-frame-font" variable (:user-visible-flag t :default-value (if (eq system-type (quote windows-nt)) "-*-Lucida Console-normal-r-*-*-14-112-96-96-c-*-iso8859-1" "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")) nil [26400 26980]) ("1on1-minibuffer-frame-mouse-color" variable (:user-visible-flag t :default-value "Black") nil [26982 27352]) ("1on1-minibuffer-frame-cursor-color" variable (:user-visible-flag t :default-value "Black") nil [27354 27731]) ("1on1-minibuffer-frame-height" variable (:user-visible-flag t :default-value 2) nil [27733 28089]) ("1on1-minibuffer-frame-left" variable (:user-visible-flag t) nil [28091 28542]) ("1on1-minibuffer-frame-top/bottom" variable (:user-visible-flag t) nil [28544 29290]) ("1on1-minibuffer-frame-width" variable nil nil [29292 29814]) ("1on1-minibuffer-frame-width-percent" variable (:default-value 100) nil [29816 30190]) ("1on1-minibuffer-frame-alist" variable (:default-value (list (or (assq (quote foreground-color) minibuffer-frame-alist) (cons (quote foreground-color) 1on1-minibuffer-frame-foreground)) (or (assq (quote background-color) minibuffer-frame-alist) (cons (quote background-color) 1on1-minibuffer-frame-background)) (or (assq (quote font) minibuffer-frame-alist) (cons (quote font) 1on1-minibuffer-frame-font)) (or (assq (quote mouse-color) minibuffer-frame-alist) (cons (quote mouse-color) 1on1-minibuffer-frame-mouse-color)) (or (assq (quote cursor-color) minibuffer-frame-alist) (cons (quote cursor-color) 1on1-minibuffer-frame-cursor-color)) (or (assq (quote menu-bar-lines) minibuffer-frame-alist) (cons (quote menu-bar-lines) nil)) (or (assq (quote left) minibuffer-frame-alist) (cons (quote left) 1on1-minibuffer-frame-left)) (or (assq (quote height) minibuffer-frame-alist) (cons (quote height) 1on1-minibuffer-frame-height)) (or (assq (quote icon-type) minibuffer-frame-alist) (cons (quote icon-type) (< emacs-major-version 21))) (or (assq (quote minibuffer) minibuffer-frame-alist) (cons (quote minibuffer) (quote only))) (or (assq (quote user-position) minibuffer-frame-alist) (cons (quote user-position) t)) (or (assq (quote vertical-scroll-bars) minibuffer-frame-alist) (cons (quote vertical-scroll-bars) nil)) (or (assq (quote name) minibuffer-frame-alist) (cons (quote name) "Emacs Minibuffer")))) nil [30347 32204]) ("1on1-*Help*-frame-flag" variable (:user-visible-flag t :default-value t) nil [32365 32612]) ("1on1-help-frame-background" variable (:default-value "Thistle") nil [32614 32960]) ("1on1-help-frame-mouse+cursor-color" variable (:default-value "Blue Violet") nil [32962 33316]) ("1on1-*Completions*-frame-flag" variable (:user-visible-flag t :default-value t) nil [33490 33734]) ("1on1-*Completions*-frame-at-right-flag" variable (:user-visible-flag t) nil [33736 34014]) ("1on1-completions-frame-background" variable (:default-value "LavenderBlush2") nil [34016 34390]) ("1on1-completions-frame-mouse+cursor-color" variable (:default-value "VioletRed") nil [34392 34765]) ("1on1-default-frame-foreground" variable (:user-visible-flag t :default-value "Black") nil [34859 35160]) ("1on1-default-frame-background" variable (:user-visible-flag t :default-value "LightBlue") nil [35162 35467]) ("1on1-default-frame-font" variable (:user-visible-flag t :default-value (if (eq system-type (quote windows-nt)) "-*-Lucida Console-normal-r-*-*-14-112-96-96-c-*-iso8859-1" "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")) nil [35469 35975]) ("1on1-default-frame-mouse-color" variable (:user-visible-flag t :default-value "Red") nil [35977 36280]) ("1on1-change-cursor-on-input-method-flag" variable (:user-visible-flag t :default-value t) nil [36282 36546]) ("1on1-default-frame-cursor-color" variable (:user-visible-flag t :default-value "Red") nil [36548 37095]) ("1on1-default-frame-cursor-color-input-method" variable (:user-visible-flag t :default-value "Orange") nil [37097 37486]) ("1on1-change-cursor-on-overwrite/read-only-flag" variable (:user-visible-flag t :default-value t) nil [37488 37762]) ("1on1-default-frame-cursor-type" variable (:user-visible-flag t :default-value (quote bar)) nil [37764 38275]) ("1on1-last-cursor-type" variable (:default-value 1on1-default-frame-cursor-type) nil [38277 38364]) ("1on1-default-frame-cursor-type-overwrite/read-only" variable (:user-visible-flag t :default-value (quote box)) nil [38366 38762]) ("1on1-box-cursor-when-idle-p" variable (:default-value t) nil [38764 38941]) ("1on1-box-cursor-when-idle-interval" variable (:default-value 2) nil [38943 39168]) ("1on1-box-cursor-when-idle-timer" variable (:default-value (progn (when (boundp (quote 1on1-box-cursor-when-idle-timer)) (cancel-timer 1on1-box-cursor-when-idle-timer)) (run-with-idle-timer 1on1-box-cursor-when-idle-interval t (quote 1on1-box-cursor-when-idle)))) nil [39170 39552]) ("cancel-timer" code nil nil [39641 39687]) ("1on1-default-frame-menu-bar-lines" variable (:user-visible-flag t :default-value 1) nil [39689 40000]) ("1on1-default-frame-upper-left-corner" variable (:user-visible-flag t :default-value (quote (0 . 0))) nil [40002 40411]) ("1on1-default-frame-size" variable (:user-visible-flag t :default-value (quote (80 . 35))) nil [40413 40774]) ("1on1-default-frame-alist" variable (:default-value (list (or (assq (quote foreground-color) default-frame-alist) (cons (quote foreground-color) 1on1-default-frame-foreground)) (or (assq (quote background-color) default-frame-alist) (cons (quote background-color) 1on1-default-frame-background)) (or (assq (quote font) default-frame-alist) (cons (quote font) 1on1-default-frame-font)) (or (assq (quote mouse-color) default-frame-alist) (cons (quote mouse-color) 1on1-default-frame-mouse-color)) (or (assq (quote cursor-color) default-frame-alist) (cons (quote cursor-color) 1on1-default-frame-cursor-color)) (or (assq (quote cursor-type) default-frame-alist) (cons (quote cursor-type) 1on1-default-frame-cursor-type)) (or (assq (quote menu-bar-lines) default-frame-alist) (cons (quote menu-bar-lines) 1on1-default-frame-menu-bar-lines)) (or (assq (quote top) default-frame-alist) (cons (quote top) (car 1on1-default-frame-upper-left-corner))) (or (assq (quote left) default-frame-alist) (cons (quote left) (cdr 1on1-default-frame-upper-left-corner))) (or (assq (quote width) default-frame-alist) (cons (quote width) (car 1on1-default-frame-size))) (or (assq (quote height) default-frame-alist) (cons (quote height) (cdr 1on1-default-frame-size))) (or (assq (quote minibuffer) default-frame-alist) (cons (quote minibuffer) (not 1on1-minibuffer-frame-flag))) (or (assq (quote user-position) default-frame-alist) (cons (quote user-position) t)) (or (assq (quote vertical-scroll-bars) default-frame-alist) (cons (quote vertical-scroll-bars) (quote right))) (or (assq (quote icon-type) default-frame-alist) (cons (quote icon-type) (< emacs-major-version 21))) (or (assq (quote tool-bar-lines) default-frame-alist) (cons (quote tool-bar-lines) 1)) (if (cdr (assq (quote left-fringe) default-frame-alist)) (assq (quote left-fringe) default-frame-alist) (cons (quote left-fringe) 0)) (if (cdr (assq (quote right-fringe) default-frame-alist)) (assq (quote right-fringe) default-frame-alist) (cons (quote right-fringe) 0)) (or (assq (quote fringe) default-frame-alist) (cons (quote fringe) 0)))) nil [40931 43463]) ("1on1-default-special-frame-foreground" variable (:user-visible-flag t :default-value "Black") nil [43560 43883]) ("1on1-default-special-frame-background" variable (:user-visible-flag t :default-value "LightSteelBlue") nil [43885 44217]) ("1on1-default-special-frame-font" variable (:user-visible-flag t :default-value (if (eq system-type (quote windows-nt)) "-*-Lucida Console-normal-r-*-*-14-112-96-96-c-*-iso8859-1" "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")) nil [44219 44749]) ("1on1-default-special-frame-mouse-color" variable (:user-visible-flag t :default-value "Yellow") nil [44751 45071]) ("1on1-default-special-frame-cursor-color" variable (:user-visible-flag t :default-value "Yellow") nil [45073 45400]) ("1on1-default-special-frame-menu-bar-lines" variable (:user-visible-flag t :default-value 1) nil [45402 45735]) ("1on1-default-special-frame-upper-left-corner" variable (:user-visible-flag t :default-value (quote (0 . 0))) nil [45737 46183]) ("1on1-default-special-frame-size" variable (:user-visible-flag t :default-value (quote (80 . 20))) nil [46185 46583]) ("1on1-special-display-frame-alist" variable (:default-value (list (or (assq (quote font) special-display-frame-alist) (cons (quote font) 1on1-default-special-frame-font)) (or (assq (quote width) special-display-frame-alist) (cons (quote width) (car 1on1-default-special-frame-size))) (or (assq (quote height) special-display-frame-alist) (cons (quote height) (cdr 1on1-default-special-frame-size))) (or (assq (quote mouse-color) special-display-frame-alist) (cons (quote mouse-color) 1on1-default-special-frame-mouse-color)) (or (assq (quote cursor-color) special-display-frame-alist) (cons (quote cursor-color) 1on1-default-special-frame-cursor-color)) (or (assq (quote menu-bar-lines) special-display-frame-alist) (cons (quote menu-bar-lines) 1on1-default-special-frame-menu-bar-lines)) (or (assq (quote foreground-color) special-display-frame-alist) (cons (quote foreground-color) 1on1-default-special-frame-foreground)) (or (assq (quote background-color) special-display-frame-alist) (cons (quote background-color) 1on1-default-special-frame-background)) (or (assq (quote top) special-display-frame-alist) (cons (quote top) (car 1on1-default-special-frame-upper-left-corner))) (or (assq (quote left) special-display-frame-alist) (cons (quote left) (cdr 1on1-default-special-frame-upper-left-corner))) (or (assq (quote unsplittable) special-display-frame-alist) (cons (quote unsplittable) t)) (or (assq (quote user-position) special-display-frame-alist) (cons (quote user-position) t)) (or (assq (quote vertical-scroll-bars) special-display-frame-alist) (cons (quote vertical-scroll-bars) (quote right))))) nil [46740 48677]) ("1on1-emacs" function (:user-visible-flag t) nil [48758 52945]) ("1on1-change-cursor-on-input-method" function nil nil [53010 53753]) ("1on1-change-cursor-on-overwrite/read-only" function nil nil [53823 54257]) ("unless" code nil nil [54259 54344]) ("1on1-set-cursor-type" function (:user-visible-flag t :arguments ("cursor-type")) nil [54403 54863]) ("1on1-box-cursor-when-idle" function nil nil [54865 55124]) ("1on1-box-cursor-when-idle-off" function nil nil [55131 55316]) ("defalias" code nil nil [55318 55391]) ("1on1-toggle-box-cursor-when-idle" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [55392 56238]) ("1on1-set-box-cursor-when-idle-interval" function (:user-visible-flag t :arguments ("secs")) nil [56240 56781]) ("1on1-display-*Help*-frame" function (:arguments ("buf" "&optional" "args")) nil [56783 57315]) ("1on1-display-*Completions*-frame" function (:arguments ("buf" "&optional" "args")) nil [57317 58543]) ("1on1-set-minibuffer-frame-top/bottom" function nil nil [58545 58950]) ("1on1-set-minibuffer-frame-width" function nil nil [58952 59625]) ("1on1-color-minibuffer-frame-on-setup" function nil nil [59627 60329]) ("1on1-color-minibuffer-frame-on-exit" function nil nil [60331 60962]) ("1on1-increment-color-hue" function (:arguments ("color" "increment")) nil [61049 61932]) ("1on1-color-isearch-minibuffer-frame" function nil nil [61934 62486]) ("1on1-flash-ding-minibuffer-frame" function (:arguments ("&optional" "do-not-terminate")) nil [62488 62833]) ("1on1-setup-minibuffer-frame-coloring" function nil nil [62835 64463]) ("1on1-setup-mode-line" function nil nil [64465 64763]))
    :file "oneonone.el"
    :pointmax 64862
    :unmatched-syntax 'nil
    )
   (semanticdb-table "compile+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("compile-" include nil nil [3418 3437]) ("compile" include nil nil [3463 3481]) ("misc-fns" include nil nil [3552 3577]) ("define-key" code nil nil [3664 3722]) ("define-key" code nil nil [3747 3803]) ("define-key" code nil nil [3804 3869]) ("define-key" code nil nil [3870 3922]) ("define-key" code nil nil [3923 3988]) ("define-key" code nil nil [3989 4054]) ("define-key" code nil nil [4055 4118]) ("define-key" code nil nil [4119 4173]) ("define-key" code nil nil [4174 4232]) ("define-key" code nil nil [4257 4322]) ("define-key" code nil nil [4323 4388]) ("define-key" code nil nil [4389 4450]) ("define-key" code nil nil [4451 4516]) ("define-key" code nil nil [4517 4569]) ("define-key" code nil nil [4584 4651]) ("define-key" code nil nil [4652 4717]) ("define-key" code nil nil [4718 4789]) ("define-key" code nil nil [4790 4846]) ("define-key" code nil nil [4847 4901]) ("define-key" code nil nil [4902 4967]) ("define-key" code nil nil [4968 5033]) ("define-key" code nil nil [5034 5099]) ("define-key" code nil nil [5100 5165]) ("define-key" code nil nil [5166 5231]) ("define-key" code nil nil [5232 5297]) ("define-key" code nil nil [5298 5363]) ("define-key" code nil nil [5364 5429]) ("define-key" code nil nil [5430 5486]) ("define-key" code nil nil [5487 5552]) ("define-key" code nil nil [5553 5605]) ("define-key" code nil nil [5606 5671]) ("define-key" code nil nil [5672 5737]) ("define-key" code nil nil [5738 5801]) ("define-key" code nil nil [5802 5856]) ("define-key" code nil nil [5857 5915]) ("define-key" code nil nil [5940 6005]) ("define-key" code nil nil [6006 6071]) ("define-key" code nil nil [6072 6133]) ("define-key" code nil nil [6134 6199]) ("define-key" code nil nil [6200 6252]) ("define-key" code nil nil [6266 6333]) ("define-key" code nil nil [6334 6399]) ("define-key" code nil nil [6400 6471]) ("define-key" code nil nil [6472 6528]) ("define-key" code nil nil [6529 6583]) ("define-key" code nil nil [6584 6649]) ("define-key" code nil nil [6650 6715]) ("define-key" code nil nil [6716 6781]) ("define-key" code nil nil [6782 6847]) ("define-key" code nil nil [6848 6913]) ("define-key" code nil nil [6914 6979]) ("define-key" code nil nil [6980 7045]) ("define-key" code nil nil [7046 7111]) ("define-key" code nil nil [7112 7182]) ("define-key" code nil nil [7183 7249]) ("unless" code nil nil [7387 7599]) ("when" code nil nil [7791 7904]) ("compile-mode-summary" function (:user-visible-flag t) nil [7921 8301]) ("compilation-directory-properties" function (:arguments ("idx" "leave")) nil [9059 9768]) ("compilation-assq" function (:arguments ("key" "alist")) nil [10382 10807]) ("compilation-internal-error-properties" function (:arguments ("file" "line" "end-line" "col" "end-col" "type" "fmts")) nil [10917 14105]) ("compilation-compat-error-properties" function (:arguments ("err")) nil [14214 14980]) ("compile+" package nil nil [15002 15021]))
    :file "compile+.el"
    :pointmax 15120
    )
   (semanticdb-table "compile-.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("fit-frame" include nil nil [2966 2992]) ("frame-fns" include nil nil [3031 3057]) ("compilation-message-face" variable nil nil [3163 3473]) ("compilation-mouseover" variable (:default-value (quote ((t (:underline t))))) nil [3554 3717]) ("when" code nil nil [3719 4079]) ("when" code nil nil [4186 4766]) ("compile-" package nil nil [4793 4812]))
    :file "compile-.el"
    :pointmax 4911
    )
   (semanticdb-table "doremi-frm.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("doremi" include nil nil [18893 18910]) ("hexrgb" include nil nil [18921 18938]) ("ring+" include nil nil [19191 19207]) ("frame-fns" include nil nil [19248 19268]) ("faces+" include nil nil [19316 19333]) ("if" code nil nil [19394 19548]) ("frame-cmds" include nil nil [19605 19632]) ("unless" code nil nil [19799 19857]) ("cl" include nil nil [19936 19949]) ("defgroup" code nil nil [20144 20949]) ("doremi-frame-config-ring-size" variable (:user-visible-flag t :default-value 20) nil [20951 21094]) ("doremi-push-frame-config-for-cmds-flag" variable (:user-visible-flag t) nil [21096 21375]) ("doremi-move-frame-wrap-within-display-flag" variable (:user-visible-flag t :default-value t) nil [21377 21741]) ("doremi-wrap-color-flag" variable (:user-visible-flag t :default-value t) nil [21743 22151]) ("doremi-frame-config-ring" variable (:default-value (make-ring doremi-frame-config-ring-size)) nil [22220 22325]) ("doremi-last-face-value" variable (:default-value (cons (quote default) (internal-find-face (quote default) t))) nil [22327 22823]) ("doremi-last-frame-color" variable (:default-value (quote (background-color . "White"))) nil [22825 23182]) ("doremi-font-size" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [23375 23795]) ("doremi-font" function (:user-visible-flag t) nil [24435 24858]) ("doremi-bg-color-name" function (:user-visible-flag t) nil [24965 25504]) ("doremi-frame-width" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [25708 26482]) ("doremi-frame-height" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [26551 27036]) ("doremi-frame-horizontally" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [27779 29122]) ("doremi-frame-vertically" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [29270 30337]) ("doremi-frame-new-position" function (:arguments ("frame" "type" "incr")) nil [30360 31187]) ("doremi-push-current-frame-config" function nil nil [31205 31668]) ("doremi-frame-config-wo-parameters" function (:arguments ("frame-config" "params-to-remove")) nil [31686 32244]) ("doremi-push-frame-config-for-command" function (:arguments ("command")) nil [32418 33531]) ("doremi-frame-configs" function (:user-visible-flag t) nil [33688 34258]) ("doremi-bg-red" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [34397 34597]) ("doremi-bg-green" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [34614 34849]) ("doremi-bg-blue" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [34866 35099]) ("doremi-bg-cyan" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [35116 35353]) ("doremi-bg-magenta" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [35370 35611]) ("doremi-bg-yellow" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [35628 35867]) ("doremi-bg-hue" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [35884 36109]) ("doremi-bg-saturation" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [36126 36371]) ("doremi-bg-value" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [36388 36638]) ("defalias" code nil nil [36640 36689]) ("defalias" code nil nil [36690 36740]) ("doremi-bg" function (:user-visible-flag t :arguments ("component" "&optional" "increment" "frame" "pickup-p")) nil [36757 40249]) ("doremi-all-frames-bg" function (:user-visible-flag t :arguments ("component" "increment")) nil [40266 41377]) ("doremi-increment-background-color" function (:user-visible-flag t :arguments ("component" "increment" "&optional" "frame")) nil [41394 42143]) ("doremi-fg-red" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [42232 42463]) ("doremi-fg-green" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [42480 42715]) ("doremi-fg-blue" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [42732 42965]) ("doremi-fg-cyan" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [42982 43219]) ("doremi-fg-magenta" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [43236 43477]) ("doremi-fg-yellow" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [43494 43733]) ("doremi-fg-hue" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [43750 43975]) ("doremi-fg-saturation" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [43992 44237]) ("doremi-fg-value" function (:user-visible-flag t :arguments ("&optional" "increment")) nil [44254 44504]) ("defalias" code nil nil [44506 44555]) ("defalias" code nil nil [44556 44606]) ("doremi-fg" function (:user-visible-flag t :arguments ("component" "&optional" "increment" "frame" "pickup-p")) nil [44623 45998]) ("doremi-all-frames-fg" function (:user-visible-flag t :arguments ("component" "increment")) nil [46015 47126]) ("doremi-increment-foreground-color" function (:user-visible-flag t :arguments ("component" "increment" "&optional" "frame")) nil [47143 47915]) ("doremi-undo-last-frame-color-change" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [47952 48512]) ("doremi-undo-last-face-change" function (:user-visible-flag t) nil [48570 49170]) ("doremi-face-bg" function (:user-visible-flag t :arguments ("face" "component" "&optional" "increment" "pickup-p")) nil [49187 52410]) ("doremi-all-faces-bg" function (:user-visible-flag t :arguments ("component" "increment")) nil [52427 53231]) ("doremi-increment-face-bg-color" function (:user-visible-flag t :arguments ("face" "component" "increment")) nil [53248 54139]) ("doremi-face-fg" function (:user-visible-flag t :arguments ("face" "component" "&optional" "increment" "pickup-p")) nil [54176 57400]) ("doremi-all-faces-fg" function (:user-visible-flag t :arguments ("component" "increment")) nil [57417 58535]) ("doremi-increment-face-fg-color" function (:user-visible-flag t :arguments ("face" "component" "increment")) nil [58552 59443]) ("doremi-increment-color-component" function (:user-visible-flag t :arguments ("component" "color" "increment")) nil [59480 62220]) ("doremi-increment-face-color-read-args" function nil nil [62289 62865]) ("doremi-number-arg" function nil nil [62867 63173]) ("doremi-face-bg-1" function (:arguments ("face" "component" "increment")) nil [63175 63887]) ("doremi-face-fg-1" function (:arguments ("face" "component" "increment")) nil [63889 64601]) ("doremi-increment-color" function (:arguments ("component" "increment" "color" "set-fn" "&optional" "frame" "&rest" "args")) nil [64603 67725]) ("doremi-wrap-or-limit" function (:arguments ("component")) nil [67727 68062]) ("defalias" code nil nil [68064 68126]) ("doremi-toggle-wrap-color" function (:user-visible-flag t) nil [68128 68284]) ("doremi-face-set" function (:arguments ("face" "spec")) nil [68474 68957]) ("doremi-set-background-color" function (:user-visible-flag t :arguments ("color-name" "&optional" "frame")) nil [69013 69566]) ("doremi-set-foreground-color" function (:user-visible-flag t :arguments ("color-name" "&optional" "frame")) nil [69622 70175]) ("when" code nil nil [70388 71480]) ("doremi-frm" package nil nil [71514 71535]))
    :file "doremi-frm.el"
    :pointmax 71636
    )
   (semanticdb-table "faces+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("faces" include nil nil [3656 3672]) ("and" code nil nil [3673 3765]) ("thingatpt" include nil nil [3807 3833]) ("thingatpt+" include nil nil [3878 3905]) ("when" code nil nil [4068 4539]) ("if" code nil nil [4782 7822]) ("face-foreground-20+" function (:arguments ("face" "&optional" "frame" "inherit")) nil [7839 8100]) ("face-background-20+" function (:arguments ("face" "&optional" "frame" "inherit")) nil [8117 8378]) ("faces+" package nil nil [8405 8422]))
    :file "faces+.el"
    :pointmax 8519
    )
   (semanticdb-table "files+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("strings" include nil nil [3968 3992]) ("misc-fns" include nil nil [4032 4057]) ("minibuffer-with-setup-hook" function (:arguments ("fun" "&rest" "body")) nil [4191 4850]) ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [4992 5459]) ("switch-to-buffer-other-window" function (:user-visible-flag t :arguments ("buffer" "&optional" "norecord")) nil [5644 6818]) ("switch-to-buffer-other-frame" function (:user-visible-flag t :arguments ("buffer" "&optional" "norecord")) nil [6954 7819]) ("files+" package nil nil [13603 13620]))
    :file "files+.el"
    :pointmax 13717
    :unmatched-syntax 'nil
    )
   (semanticdb-table "fit-frame.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("and" code nil nil [7288 7354]) ("frame-cmds" include nil nil [7371 7398]) ("defgroup" code nil nil [7528 8309]) ("inhibit-fit-frame-flag" variable (:user-visible-flag t) nil [8326 8563]) ("create-frame-min-width" variable (:user-visible-flag t :default-value 20) nil [8580 8801]) ("create-frame-max-width" variable (:user-visible-flag t) nil [8818 9125]) ("create-frame-max-width-percent" variable (:user-visible-flag t :default-value 94) nil [9142 9388]) ("create-frame-min-height" variable (:user-visible-flag t :default-value window-min-height) nil [9405 9639]) ("create-frame-max-height" variable (:user-visible-flag t) nil [9656 9962]) ("create-frame-max-height-percent" variable (:user-visible-flag t :default-value 82) nil [9979 10229]) ("create-empty-frame-width" variable (:user-visible-flag t :default-value (or (cdr (assq (quote width) default-frame-alist)) 80)) nil [10246 10437]) ("create-empty-frame-height" variable (:user-visible-flag t :default-value (or (cdr (assq (quote height) default-frame-alist)) 35)) nil [10454 10643]) ("create-empty-special-display-frame-width" variable (:user-visible-flag t :default-value 80) nil [10660 10865]) ("create-empty-special-display-frame-height" variable (:user-visible-flag t :default-value 9) nil [10882 11088]) ("fill-column-frame-margin" variable (:user-visible-flag t :default-value 7) nil [11105 11471]) ("make-variable-buffer-local" code nil nil [11473 11527]) ("fit-frame-skip-header-lines-alist" variable (:user-visible-flag t :default-value (quote ((Info-mode . 1) (dired-mode . 1) (compilation-mode . 2)))) nil [11544 12324]) ("create-frame-max-width" function (:arguments ("&optional" "frame")) nil [12405 12981]) ("create-frame-max-height" function (:arguments ("&optional" "frame")) nil [12983 13900]) ("thumbnail-factor" function (:arguments ("frame")) nil [13902 14382]) ("fit-frame" function (:user-visible-flag t :arguments ("&optional" "frame" "width" "height")) nil [14469 21246]) ("fit-frame-or-mouse-drag-vertical-line" function (:user-visible-flag t :arguments ("start-event")) nil [21263 21492]) ("when" code nil nil [21632 21824]) ("when" code nil nil [21841 22018]) ("when" code nil nil [22020 22215]) ("unless" code nil nil [22331 22663]) ("unless" code nil nil [22693 22872]) ("unless" code nil nil [22920 23230]) ("unless" code nil nil [23262 23873]) ("unless" code nil nil [23906 24250]) ("fit-frame" package nil nil [24264 24284]))
    :file "fit-frame.el"
    :pointmax 24384
    )
   (semanticdb-table "frame-cmds.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [15439 15452]) ("frame-fns" include nil nil [15583 15603]) ("strings" include nil nil [15684 15708]) ("misc-fns" include nil nil [15748 15773]) ("defgroup" code nil nil [16091 17450]) ("rename-frame-when-iconify-flag" variable (:user-visible-flag t :default-value t) nil [17452 17638]) ("frame-config-register" variable (:user-visible-flag t :default-value 12) nil [17640 17836]) ("show-hide-show-function" variable (:user-visible-flag t :default-value (quote jump-to-frame-config-register)) nil [17838 18205]) ("window-mgr-title-bar-pixel-width" variable (:user-visible-flag t :default-value 30) nil [18207 18432]) ("enlarge-font-tries" variable (:default-value 100) nil [18434 18712]) ("frame-parameters-to-exclude" variable (:default-value (quote ((window-id) (buffer-list) (name) (title) (icon-name)))) nil [18714 19110]) ("move-frame-wrap-within-display-flag" variable (:user-visible-flag t :default-value t) nil [19112 19482]) ("save-frame-config" function (:user-visible-flag t) nil [19566 20146]) ("jump-to-frame-config-register" function (:user-visible-flag t) nil [20163 20328]) ("iconify-everything" function (:user-visible-flag t) nil [20345 20849]) ("hide-everything" function (:user-visible-flag t) nil [20866 21638]) ("show-hide" function (:user-visible-flag t) nil [21670 21884]) ("show-buffer-menu" function (:user-visible-flag t) nil [21901 22563]) ("mouse-show-hide-mark-unmark" function (:user-visible-flag t :arguments ("event")) nil [22580 23027]) ("iconify/map-frame" function (:user-visible-flag t :arguments ("&optional" "iconify-all")) nil [23044 23397]) ("mouse-iconify/map-frame" function (:user-visible-flag t :arguments ("event")) nil [23414 23697]) ("or" code nil nil [23700 23796]) ("delete-window" function (:user-visible-flag t :arguments ("&optional" "window")) nil [23905 24241]) ("delete-windows-for" function (:user-visible-flag t :arguments ("&optional" "buffer")) nil [24258 24656]) ("delete-windows-on" function (:user-visible-flag t :arguments ("buffer" "&optional" "frame")) nil [24894 26085]) ("read-buffer-for-delete-windows" function nil nil [26087 26651]) ("frame-iconified-p" function (:arguments ("frame")) nil [26653 26822]) ("defalias" code nil nil [28011 28051]) ("remove-windows-on" function (:user-visible-flag t :arguments ("buffer")) nil [28068 28526]) ("mouse-remove-window" function (:user-visible-flag t :arguments ("event")) nil [28543 28795]) ("delete/iconify-window" function (:user-visible-flag t :arguments ("&optional" "window" "frame-p")) nil [28812 30666]) ("delete/iconify-windows-on" function (:user-visible-flag t :arguments ("buffer" "&optional" "frame" "frame-p")) nil [30683 32797]) ("rename-frame" function (:user-visible-flag t :arguments ("&optional" "old-name" "new-name" "all-named")) nil [32814 34040]) ("rename-non-minibuffer-frame" function (:user-visible-flag t :arguments ("&optional" "old-name" "new-name" "all-named")) nil [34057 35353]) ("show-frame" function (:user-visible-flag t :arguments ("frame")) nil [35370 35637]) ("hide-frame" function (:user-visible-flag t :arguments ("frame" "&optional" "prefix")) nil [35654 35965]) ("show-a-frame-on" function (:user-visible-flag t :arguments ("buffer")) nil [35982 36604]) ("show-*Help*-buffer" function (:user-visible-flag t) nil [36621 36756]) ("delete-1-window-frames-on" function (:user-visible-flag t :arguments ("buffer")) nil [36773 37376]) ("delete-other-frames" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [37393 37878]) ("tile-frames-horizontally" function (:user-visible-flag t :arguments ("&optional" "frames")) nil [37895 38331]) ("tile-frames-vertically" function (:user-visible-flag t :arguments ("&optional" "frames")) nil [38348 38778]) ("tile-frames" function (:arguments ("direction" "frames")) nil [38795 41812]) ("read-args-for-tile-frames" function nil nil [41815 43301]) ("enlarge-frame" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [43395 43686]) ("enlarge-frame-horizontally" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [43703 44006]) ("shrink-frame" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [44023 44313]) ("shrink-frame-horizontally" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [44330 44632]) ("move-frame-down" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [44649 45080]) ("move-frame-up" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [45097 45433]) ("move-frame-right" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [45450 45896]) ("move-frame-left" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [45913 46265]) ("new-frame-position" function (:arguments ("frame" "type" "incr")) nil [46287 47100]) ("enlarge-font" function (:user-visible-flag t :arguments ("&optional" "increment" "frame")) nil [47739 48570]) ("enlarged-font-name" function (:arguments ("fontname" "frame" "increment")) nil [48572 49473]) ("set-frame-alist-parameter-from-frame" function (:user-visible-flag t :arguments ("alist" "parameter" "&optional" "frame")) nil [49490 50609]) ("set-all-frame-alist-parameters-from-frame" function (:user-visible-flag t :arguments ("alist" "&optional" "frame" "really-all-p")) nil [50626 51851]) ("frame-alist-var-names" function nil nil [51853 52289]) ("frame-parameter-names" function nil nil [52291 53504]) ("tell-customize-var-has-changed" function (:user-visible-flag t :arguments ("variable")) nil [53521 53790]) ("other-window-or-frame" function (:user-visible-flag t :arguments ("arg")) nil [53807 53986]) ("frame-cmds" package nil nil [54013 54034]))
    :file "frame-cmds.el"
    :pointmax 54135
    )
   (semanticdb-table "hexrgb.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [4986 4999]) ("hexrgb-defined-colors" variable (:constant-flag t :default-value (eval-when-compile (x-defined-colors))) nil [5173 5278]) ("hexrgb-defined-colors-alist" variable (:constant-flag t :default-value (eval-when-compile (mapcar (function list) (x-defined-colors)))) nil [5295 5446]) ("hexrgb-read-color" function (:user-visible-flag t :arguments ("&optional" "convert-to-RGB-p" "allow-empty-name-p" "prompt")) nil [5463 7593]) ("hexrgb-rgb-hex-string-p" function (:arguments ("color" "&optional" "laxp")) nil [7610 8178]) ("hexrgb-complement" function (:user-visible-flag t :arguments ("color")) nil [8195 8624]) ("hexrgb-hue" function (:user-visible-flag t :arguments ("color")) nil [8641 8980]) ("hexrgb-saturation" function (:user-visible-flag t :arguments ("color")) nil [8997 9347]) ("hexrgb-value" function (:user-visible-flag t :arguments ("color")) nil [9364 9705]) ("hexrgb-red" function (:user-visible-flag t :arguments ("color")) nil [9722 10091]) ("hexrgb-green" function (:user-visible-flag t :arguments ("color")) nil [10112 10545]) ("hexrgb-blue" function (:user-visible-flag t :arguments ("color")) nil [10566 11002]) ("hexrgb-rgb-to-hsv" function (:arguments ("red" "green" "blue")) nil [11019 12515]) ("hexrgb-hsv-to-rgb" function (:arguments ("hue" "saturation" "value")) nil [12532 13539]) ("hexrgb-hsv-to-hex" function (:arguments ("hue" "saturation" "value")) nil [13556 13887]) ("hexrgb-rgb-to-hex" function (:arguments ("red" "green" "blue")) nil [13904 14204]) ("hexrgb-hex-to-hsv" function (:arguments ("color")) nil [14221 14627]) ("hexrgb-hex-to-rgb" function (:arguments ("color")) nil [14644 15304]) ("hexrgb-color-name-to-hex" function (:arguments ("color")) nil [15321 15719]) ("hexrgb-color-values-to-hex" function (:arguments ("values")) nil [16058 16440]) ("hexrgb-increment-red" function (:arguments ("hex" "nb-digits" "increment" "&optional" "wrap-p")) nil [16464 17044]) ("hexrgb-increment-green" function (:arguments ("hex" "nb-digits" "increment" "&optional" "wrap-p")) nil [17061 17629]) ("hexrgb-increment-blue" function (:arguments ("hex" "nb-digits" "increment" "&optional" "wrap-p")) nil [17646 18188]) ("hexrgb-increment-equal-rgb" function (:arguments ("hex" "nb-digits" "increment" "&optional" "wrap-p")) nil [18205 18890]) ("hexrgb-increment-hex" function (:arguments ("hex" "increment" "nb-digits" "&optional" "wrap-p")) nil [18907 19554]) ("hexrgb-hex-to-int" function (:arguments ("hex")) nil [19623 20014]) ("hexrgb-hex-char-to-integer" function (:arguments ("character")) nil [20113 20435]) ("hexrgb-int-to-hex" function (:arguments ("int" "&optional" "nb-digits")) nil [20585 21153]) ("hexrgb-approx-equal" function (:arguments ("x" "y" "&optional" "rfuzz" "afuzz")) nil [21234 21680]) ("hexrgb" package nil nil [21711 21728]))
    :file "hexrgb.el"
    :pointmax 21825
    )
   (semanticdb-table "ring+.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ring" include nil nil [2367 2382]) ("ring-member" function (:arguments ("ring" "item")) nil [2470 2822]) ("ring-next" function (:arguments ("ring" "item")) nil [2839 3137]) ("ring-previous" function (:arguments ("ring" "item")) nil [3154 3462]) ("ring-insert+extend" function (:arguments ("ring" "item" "&optional" "grow-p")) nil [3480 4436]) ("ring-remove+insert+extend" function (:arguments ("ring" "item" "&optional" "grow-p")) nil [4453 4940]) ("ring-convert-sequence-to-ring" function (:arguments ("seq")) nil [4957 5444]) ("ring+" package nil nil [5471 5487]))
    :file "ring+.el"
    :pointmax 5583
    )
   (semanticdb-table "strings.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [4834 4847]) ("thingatpt" include nil nil [4901 4927]) ("thingatpt+" include nil nil [4972 4999]) ("misc-fns" include nil nil [5050 5075]) ("absdiff" function (:arguments ("m" "n")) nil [5176 5314]) ("empty-name-p" function (:arguments ("name")) nil [5331 5448]) ("non-empty-name-p" function (:arguments ("name")) nil [5465 5646]) ("ordinal-suffix" function (:arguments ("n")) nil [5715 5929]) ("pick-some-words" function (:arguments ("pos" "direction" "limit")) nil [5977 6852]) ("region-description" function (:arguments ("width" "&optional" "prefix" "suffix" "begin" "end")) nil [6899 8328]) ("current-d-m-y-string" function nil nil [8367 8689]) ("current-line-string" function (:arguments ("&optional" "buffer")) nil [8741 9045]) ("display-lines-containing" function (:user-visible-flag t :arguments ("buffer" "string" "&optional" "flush-p")) nil [9062 10362]) ("word-before-point" function nil nil [10379 11240]) ("symbol-name-before-point" function nil nil [11257 12394]) ("echo-in-buffer" function (:arguments ("buffer-name" "string" "&optional" "force-display-p")) nil [12441 12957]) ("minibuffer-empty-p" variable (:default-value t) nil [12974 13202]) ("set-minibuffer-empty-p" function (:arguments ("flag")) nil [13219 13349]) ("minibuffer-empty-p" function nil nil [13366 13646]) ("erase-nonempty-inactive-minibuffer" function (:user-visible-flag t) nil [13663 14118]) ("erase-inactive-minibuffer" function (:user-visible-flag t) nil [14135 14852]) ("string-w-face" function (:arguments ("arg")) nil [14924 16245]) ("concat-w-faces" function (:user-visible-flag t :arguments ("&rest" "arguments")) nil [16262 17105]) ("insert-in-minibuffer" function (:user-visible-flag t :arguments ("&rest" "arguments")) nil [17122 18460]) ("read-buffer" function (:arguments ("prompt" "&optional" "default" "existing")) nil [18653 19566]) ("buffer-alist" function (:arguments ("&optional" "nospacep")) nil [19583 20072]) ("unless" code nil nil [20089 20596]) ("read-variable" function (:arguments ("prompt" "&optional" "default-value")) nil [20834 21831]) ("read-any-variable" function (:arguments ("prompt" "&optional" "default-value")) nil [21848 22844]) ("frame-alist" function nil nil [22923 23351]) ("display-in-minibuffer" function (:user-visible-flag t :arguments ("option" "&rest" "arguments")) nil [23482 29175]) ("strings" package nil nil [29202 29220]))
    :file "strings.el"
    :pointmax 29318
    )
   (semanticdb-table "thumb-frm.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("doremi-frm" include nil nil [12989 13010]) ("frame-cmds" include nil nil [13021 13042]) ("cl" include nil nil [13107 13120]) ("defgroup" code nil nil [13354 14106]) ("frame-thumbnail-font-difference" variable (:user-visible-flag t :default-value 10) nil [14108 14507]) ("thumbify-instead-of-iconify-flag" variable (:user-visible-flag t :default-value t) nil [14509 14660]) ("rename-frame-when-thumbify-flag" variable (:user-visible-flag t :default-value t) nil [14662 14852]) ("thumbfrm-stack-display-edge" variable (:user-visible-flag t :default-value (quote right+down)) nil [14854 16033]) ("thumbfrm-frame-parameters" variable (:default-value (if (< emacs-major-version 21) (quote ((menu-bar-lines . 0) (tool-bar-lines . 0))) (quote ((menu-bar-lines . 0) (tool-bar-lines . 0) (vertical-scroll-bars) (horizontal-scroll-bars))))) nil [16035 16496]) ("thumbfrm-sort-function" variable (:user-visible-flag t :default-value (quote thumbfrm-sort-by-name)) nil [16498 17307]) ("unless" code nil nil [17309 17555]) ("thumbnail-frames" variable nil nil [17639 17865]) ("non-thumbnail-frames" variable nil nil [17867 18087]) ("thumbfrm-last-sort-function" variable nil nil [18089 18202]) ("thumbfrm-last-row-show" variable (:default-value 0.7) nil [18204 18382]) ("thumbfrm-next-stack-xoffset" variable nil nil [18384 18481]) ("thumbfrm-next-stack-yoffset" variable nil nil [18483 18580]) ("1on1-minibuffer-frame" variable nil nil [18633 18667]) ("iconify-frame" function (:arguments ("around" "thumbify-replace-iconify" "activate")) nil [18797 19087]) ("iconify-or-deiconify-frame" function (:arguments ("around" "thumbify-replace-iconify" "activate")) nil [19182 19511]) ("thumbify-frame-upon-event" function (:user-visible-flag t :arguments ("event")) nil [19528 20082]) ("really-iconify-frame" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [20229 20634]) ("really-iconify-or-deiconify-frame" function (:user-visible-flag t) nil [20781 21161]) ("thumbify-frame" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [21178 22285]) ("dethumbify-frame" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [22302 22984]) ("thumbnail-frame-p" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [23001 23162]) ("or" code nil nil [23166 23258]) ("raise-frame" function (:arguments ("&optional" "frame")) nil [23324 23833]) ("toggle-thumbnail-frame" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [23850 24150]) ("defalias" code nil nil [24152 24194]) ("thumbify-other-frames" function (:user-visible-flag t :arguments ("&optional" "frame")) nil [24211 24797]) ("fisheye-previous-frame" function (:user-visible-flag t) nil [24861 25174]) ("fisheye-next-frame" function (:user-visible-flag t) nil [25191 25487]) ("dethumbify-all-frames" function (:user-visible-flag t) nil [25504 25752]) ("stack-thumbnail-frames" function (:user-visible-flag t) nil [26020 35007]) ("next-stack-position" function (:arguments ("major-position" "major-start" "major-limit" "major-+/-" "major-increment" "major-</>" "minor-position" "minor-start" "minor-limit" "minor-+/-" "minor-increment" "minor-</>")) nil [35058 36176]) ("toggle-sort-thumbnail-frame-stack" function (:user-visible-flag t :arguments ("force-p")) nil [36193 37114]) ("iconify-thumbnail-frames" function (:user-visible-flag t) nil [37131 37363]) ("deiconify-thumbnail-frames" function (:user-visible-flag t) nil [37380 37568]) ("cull-thumbnail-frames" function nil nil [37570 37894]) ("doremi-thumbnail-frames" function (:user-visible-flag t) nil [37911 38336]) ("thumbfrm-sort-by-name" function (:arguments ("framespec1" "framespec2")) nil [38338 38682]) ("thumbfrm-sort-by-window-id" function (:arguments ("framespec1" "framespec2")) nil [38684 39128]) ("thumb-frm" package nil nil [39160 39180]))
    :file "thumb-frm.el"
    :pointmax 39280
    )
   (semanticdb-table "misc-fns.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("and" code nil nil [5255 5355]) ("misc-fns" package nil nil [5419 5438]) ("misc-fns" include nil nil [5439 5458]) ("mode-line-reminder-duration" variable (:user-visible-flag t :default-value 10) nil [5613 5743]) ("put" code nil nil [5744 5860]) ("display-in-mode-line" function (:arguments ("text")) nil [5901 6148]) ("force-time-redisplay" function nil nil [6165 6388]) ("another-buffer" function (:arguments ("&optional" "buffer" "visible-ok")) nil [6488 7354]) ("live-buffer-name" function (:arguments ("buffer")) nil [7584 7859]) ("interesting-buffer-p" function (:arguments ("buffer")) nil [7903 8204]) ("current-line" function nil nil [8279 8414]) ("fontify-buffer" function (:arguments ("buffer" "&rest" "ignore")) nil [8416 8667]) ("make-transient-mark-mode-buffer-local" function (:arguments ("&optional" "default")) nil [8767 9296]) ("notifying-user-of-mode-flag" variable (:user-visible-flag t :default-value t) nil [9381 9546]) ("notify-user-of-mode" variable (:user-visible-flag t :default-value (quote ((((background dark)) (:foreground "cyan")) (t (:foreground "dark blue"))))) nil [9548 9777]) ("notify-user-of-mode" function (:arguments ("&optional" "buffer" "anyway")) nil [9794 10756]) ("do-files" function (:arguments ("files" "fn" "&optional" "kill-buf-after")) nil [10855 11398]) ("undefine-keys-bound-to" function (:arguments ("command" "keymap" "&optional" "oldmap")) nil [11482 11899]) ("buffer-modifying-cmds" variable (:user-visible-flag t :default-value (quote (delete-char quoted-insert transpose-chars kill-region yank kill-word indent-new-comment-line kill-sentence fill-paragraph transpose-words yank-pop zap-to-char just-one-space indent-for-comment delete-indentation kill-sexp split-line transpose-sexps backward-kill-sentence))) nil [11901 12367]) ("undefine-killer-commands" function (:arguments ("keymap" "&optional" "oldmap")) nil [12369 12834]) ("mod-signed" function (:arguments ("num" "base")) nil [14766 15023]) ("flatten" function (:arguments ("list")) nil [15100 15862]) ("simple-set-union" function (:arguments ("list1" "list2")) nil [15930 16521]) ("simple-set-intersection" function (:arguments ("list1" "list2")) nil [16596 17160]) ("simple-set-difference" function (:arguments ("list1" "list2" "&rest" "cl-keys")) nil [17237 17721]) ("signum" function (:arguments ("num")) nil [17746 17870]))
    :file "misc-fns.el"
    :pointmax 17969
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
