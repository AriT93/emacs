;; Object css-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "css-mode/"
  :tables (list 
   (semanticdb-table "css-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cssm-version" variable (:default-value "0.11") nil [134 206]) ("apropos" include nil nil [2150 2168]) ("font-lock" include nil nil [2169 2189]) ("cl" include nil nil [2190 2203]) ("cssm-indent-level" variable (:default-value 2) nil [2253 2326]) ("cssm-mirror-mode" variable (:default-value t) nil [2327 2436]) ("cssm-newline-before-closing-bracket" variable (:default-value t) nil [2437 2584]) ("cssm-indent-function" variable (:default-value (function cssm-old-style-indenter)) nil [2585 2762]) ("cssm-properties" variable (:default-value (quote ("font-family" "font-style" "font-variant" "font-weight" "font-size" "font" "background-color" "background-image" "background-repeat" "background-attachment" "background-position" "color" "background" "word-spacing" "letter-spacing" "border-top-width" "border-right-width" "border-left-width" "border-bottom-width" "border-width" "list-style-type" "list-style-image" "list-style-position" "text-decoration" "vertical-align" "text-transform" "text-align" "text-indent" "line-height" "margin-top" "margin-right" "margin-bottom" "margin-left" "margin" "padding-top" "padding-right" "padding-bottom" "padding-left" "padding" "border-top" "border-right" "border-bottom" "border-left" "border" "width" "height" "float" "clear" "display" "list-style" "white-space" "border-style" "border-color" "azimuth" "border-bottom-color" "border-bottom-style" "border-collapse" "border-left-color" "border-left-style" "border-right-color" "border-right-style" "border-top-color" "border-top-style" "caption-side" "cell-spacing" "clip" "column-span" "content" "cue" "cue-after" "cue-before" "cursor" "direction" "elevation" "font-size-adjust" "left" "marks" "max-height" "max-width" "min-height" "min-width" "orphans" "overflow" "page-break-after" "page-break-before" "pause" "pause-after" "pause-before" "pitch" "pitch-range" "play-during" "position" "richness" "right" "row-span" "size" "speak" "speak-date" "speak-header" "speak-punctuation" "speak-time" "speech-rate" "stress" "table-layout" "text-shadow" "top" "visibility" "voice-family" "volume" "widows" "z-index"))) nil [2791 4523]) ("cssm-properties-alist" variable (:default-value (mapcar (lambda (prop) (cons (concat prop ":") nil)) cssm-properties)) nil [4525 4697]) ("cssm-keywords" variable (:default-value (append (quote ("!\\s-*important" "@media" "@import" "@page" "@font-face")) (mapcar (lambda (property) (concat property "\\s-*:")) cssm-properties))) nil [4699 4939]) ("cssm-pseudos" variable (:default-value (quote ("link" "visited" "active" "first-line" "first-letter" "first-child" "before" "after" "hover"))) nil [4941 5121]) ("cssm-list-2-regexp" function (:arguments ("altlist")) nil [5134 5427]) ("cssm-font-lock-keywords" variable (:default-value (list (cons (cssm-list-2-regexp cssm-keywords) font-lock-keyword-face) (cons "\\.[a-zA-Z][-a-zA-Z0-9.]+" font-lock-variable-name-face) (cons (concat ":" (cssm-list-2-regexp cssm-pseudos)) font-lock-variable-name-face) (cons "#[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)?" font-lock-reference-face) (cons "\\[.*\\]" font-lock-variable-name-face) (cons "#[-a-zA-Z0-9]*" font-lock-function-name-face) (cons "rgb(\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*,\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*,\\s-*[0-9]+\\(\\.[0-9]+\\s-*%\\s-*\\)?\\s-*)" font-lock-reference-face))) nil [5429 6138]) ("cssm-mode-map" variable nil nil [6140 6194]) ("when" code nil nil [6195 6579]) ("when" code nil nil [6620 6902]) ("cssm-insert-right-brace-and-indent" function nil nil [6945 7041]) ("cssm-inside-atmedia-rule" function nil nil [7054 7713]) ("cssm-rule-is-atmedia" function nil nil [7726 7953]) ("cssm-find-column" function (:arguments ("first-char")) nil [7966 9082]) ("cssm-indent-line" function (:user-visible-flag t) nil [9084 9743]) ("cssm-old-style-indenter" function (:arguments ("position" "column" "first-char-on-line")) nil [9773 10156]) ("cssm-c-style-indenter" function (:arguments ("position" "column" "first-char-on-line")) nil [10158 10593]) ("define-skeleton" code nil nil [10617 10775]) ("define-skeleton" code nil nil [10777 10870]) ("define-skeleton" code nil nil [10872 10977]) ("define-skeleton" code nil nil [10979 11064]) ("define-skeleton" code nil nil [11066 11137]) ("define-skeleton" code nil nil [11139 11234]) ("cssm-enter-mirror-mode" function (:user-visible-flag t) nil [11236 11674]) ("cssm-leave-mirror-mode" function (:user-visible-flag t) nil [11676 12039]) ("cssm-property-at-point" function nil nil [12066 12283]) ("cssm-maximum-common" function (:arguments ("alt1" "alt2")) nil [12296 12673]) ("cssm-common-beginning" function (:arguments ("alts")) nil [12686 12913]) ("cssm-complete-property-frame" function (:arguments ("completions")) nil [12915 13346]) ("cssm-complete-property" function (:user-visible-flag t) nil [13348 13880]) ("css-mode" function (:user-visible-flag t) nil [13882 14951]) ("css-mode" package nil nil [14953 14972]))
    :file "css-mode.el"
    :pointmax 14995
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
