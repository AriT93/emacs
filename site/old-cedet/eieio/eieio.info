This is eieio.info, produced by makeinfo version 4.8 from eieio.texi.

   This manual documents CEDET, a collection of other tools.

   Copyright (C) 2007, 2008 Eric M. Ludlam

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with the Invariant Sections being list their titles,
     with the Front-Cover Texts being list, and with the Back-Cover
     Texts being list.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

START-INFO-DIR-ENTRY
* eieio: (eieio).       Objects for Emacs
END-INFO-DIR-ENTRY

   This file documents EIEIO.  _Enhanced Implementation of Emacs
Interpreted Objects_

   Copyright (C) 2007 Eric M. Ludlam


File: eieio.info,  Node: Top,  Next: Quick Start,  Up: (dir)

Enhanced Implementation of Emacs Interpreted Objects
****************************************************

EIEIO is a framework for writing object oriented applications in emacs
Lisp, and is a result of my taking various object oriented classes at
work and my attempt to understand some of it better by implementing it.
The real reason I started EIEIO is because someone in one of my classes
said "I bet emacs can't do that!".  Well then, I just had to prove them
wrong!

* Menu:

* Quick Start::           A Quick start for .
* Introduction::          Why use EIEIO?  Basic overview, samples list.
* Naming Conventions::    Name your objects in an Emacs friendly way.
* Building Classes::      How to write new class structures.
* Making New Objects::    How to construct new objects.
* Accessing Slots::       How to access a slot.
* Writing Methods::       How to write a CLOS style method.
* Predicates::            Class-p, Object-p, etc-p.
* Association Lists::     List of objects as association lists.
* Customizing::           Customizing objects.
* Introspection::         Looking inside a class.
* Base Classes::          Additional classes you can inherit from.
* Browsing::              Browsing your class lists.
* Class Values::          Displaying information about a class or object.
* Documentation::         Automatically creating texinfo documentation
* Default Superclass::    The root superclasses.
* Signals::               When you make errors
* Demo Programs::         Some examples using EIEIO.
* CLOS compatibility::    What are the differences?
* Function Index::


File: eieio.info,  Node: Quick Start,  Next: Introduction,  Prev: Top,  Up: Top

1 Quick Start
*************

EIEIO provides an Object Oriented layer for Emacs Lisp.  You can use
EIEIO to create classes, methods for those classes, and instances of
classes.

   To start, create a class:

     (defclass record () ; No superclasses
       ((name :initarg :name
              :initform ""
              :type string
              :custom string
              :documentation "The name of a person.")
        (birthday :initarg :birthday
                  :initform "Jan 1, 1970"
                  :custom string
                  :type string
                  :documentation "The person's birthday.")
        (phone :initarg :phone
               :initform ""
               :documentation "Phone number."))
       "A single record for tracking people I know.")

   In this example, the class `record' is declared with three slots.

   You can create methods against your classes.  A simple method may
look like this:

     (defmethod call-record ((rec record) &optional scriptname)
       "Dial the phone for the record REC.
     Execute the program SCRIPTNAME as to dial the phone."
       (message "Dialing the phone for %s"  (oref rec name))
       (shell-command (concat (or scriptname "dialphone.sh")
                              " "
                              (oref rec phone))))

   In this example, the first argument to `call-record' is a list.
EIEIO dispatches methods based on the type of the first argument.  You
can have multiple methods with the same name for different classes of
object.

   Once you have your behavior defined, you can create a new object of
type `record'.  Objects are created by calling the constructor.  The
constructor is a function with the same name as your class which
returns a new intance of that class. It might look like this:

     (setq R (record "Eric" :name "Eric" :birthday "June" :phone "555-5555"))

   The first argument is the name given to this instance.  It can be a
bit repetitive to also have a :name slot.  *Note eieio-named::.

   Calling methods on an object is a lot like calling any function.  It
would look like this:

     (call-record R)


File: eieio.info,  Node: Introduction,  Next: Naming Conventions,  Prev: Quick Start,  Up: Top

2 Introduction
**************

EIEIO is a CLOS (Common Lisp Object System) compatibility layer.  Due
to restrictions in the Emacs Lisp language, CLOS cannot be completely
supported, and a few functions have been added in place of setf.

2.1 What EIEIO supports
=======================

  1. A structured framework for the creation of basic classes with
     attributes and methods using singular inheritance similar to CLOS.

  2. Type checking, and slot unbinding.

  3. Method definitions similar to CLOS.

  4. Simple and complex class browsers.

  5. Edebug support for methods.

  6. Imenu updates.

  7. Byte compilation support of methods.

  8. Help system extentions for classes and methods.

  9. Automatic texinfo documentation generator.

 10. Several base classes for interesting tasks.

 11. Simple test suite.

 12. Public and private classifications for slots (extensions to CLOS)

 13. Customization support in a class (extension to CLOS)

2.2 Issues using EIEIO
======================

Complete `defclass' tag support
     All CLOS tags are currently supported, but some are not currently
     implemented correctly.

Mock object initializers
     Each class contains a mock object used for fast initialization of
     instantiated objects.  Using functions with side effects on object
     slot values can potentially cause modifications in the mock
     object.  EIEIO should use a deep copy but currently does not.

:AROUND method tag
     This CLOS method tag is non-functional.

2.3 EIEIO example programs that are almost useful.
==================================================

linemark
     Manage line highlighting, where individual lines are given a
     background color, or some other graphic feature.  Lines can be
     highlighted in files not currently loaded in Emacs.  When they are
     read in, the lines are given the graphic properties.

     Includes an MS Visual Studio like bookmark facility.

lmcompile
     Using linemark, highlight all lines where the latest compilation
     has valid hits.

tree
     Draw a structured tree by building a series of embedded lists of
     `tree-node' class objects.  Includes the functions
     `eieio-class-tree' to browse your current EIEIO inheritance
     structure

call-tree
     Pass it an Emacs Lisp function (not byte compiled) to generate a
     call tree using the tree tool

chart
     Uses EIEIO to manage charts/axis/sequences, and allows display of
     simple bar-charts.  Example programs are available displaying
     emacs memory usage and list occupation, in addition to file counts
     and size charts.  There's even a sample that will display a chart
     of who sends you the most email!  See doc-string for
     `chart-bar-quickie' to make your own bar charts easily.

eieio-speedbar
     Classes for implementing a speedbar display.  If you write a
     program that uses a system of objects, and your classes inherit
     from those in `eieio-speedbar', then you can write a speedbar
     display for your objects in very little time. *Note
     eieio-speedbar::

2.4 EIEIO wish list
===================

  1. More CLOS compatibility.

  2. Integrate the desired built-in methods into the object browser.

  3. Create some objects over pre-existing emacs-lisp stuff for fun,
     like faces, processes, buffers, frames and windows as examples.


File: eieio.info,  Node: Naming Conventions,  Next: Building Classes,  Prev: Introduction,  Up: Top

3 Naming Conventions
********************

The Emacs Lisp programming manual has a great chapter programming
conventions that help keep each Emacs package working nicely with the
entire system.  *Note (elisp)Standards:: An EIEIO based program needs to
follow these conventions, while simultaneously taking advantage of the
Object Oriented features.

   The below tips are things that I do when I program an EIEIO based
package.

   * Come up with a package prefix that is relatively short.  Prefix
     all classes, and methods with your prefix.  This is a standard
     convention for functions and variables in Emacs.

   * Do not prefix method names with the class name.  All methods in
     EIEIO are "virtual", and are dynamically dispatched.  Anyone can
     override your methods at any time.  Your methods should be prefixed
     with your package name.

   * Do not prefix slots in your class.  The slots are always locally
     scoped to your class, and need no prefixing.

   * If your library inherits from other libraries of classes, you must
     "require" that library with the `require' command.


File: eieio.info,  Node: Building Classes,  Next: Making New Objects,  Prev: Naming Conventions,  Up: Top

4 Building Classes
******************

A class in EIEIO has a similar structure to that found in other
languages.  A new class is created with `defclass'

 -- Function: defclass class-name superclass-list slot-list
          options-or-doc
     This function is specified by CLOS, and EIEIO conforms in
     structure.

     Creates a new class called CLASS-NAME.  The class is represented
     by a variable of the same name.  The created variable's
     documentation string is set to a modified version of the doc string
     found in OPTIONS-OR-DOC.  Each time a method is defined the
     variable's documentation string is updated to include the methods
     documentation as well.

     The parent classes for CLASS-NAME is SUPERCLASS-LIST.  Each
     element of SUPERCLASS-LIST must be a class.  These classes are the
     parents of the class being created.  Every slot that appears in
     each parent is replicated in the new class.  If two parents share
     the same slot name, the parent which appears in the
     SUPERCLASS-LIST first sets the attributes for that slot.  If a
     slot in the new class' slot list matches a parent, then the new
     specifications for the child class override that of the parent.

     SLOT-LIST is a list of lists.  Each sublist defines an attribute.
     These lists are of the form `(NAME :tag1 VALUE1 :tag2 VALUE2 :tagn
     VALUEN)'.  Some valid CLOS tags are:

    `:initarg'
          The `:initarg' specifier gives this slot a name that can be
          used in the argument list of the constructor to specify a
          value for the new instance being created.

          A good symbol to use for initarg is one that starts with a
          colon `:'.

          The slot specified like this:
                 (myslot :initarg :myslot)
          could then be initialized to the number 1 like this:
                 (myobject "name" :myslot 1)

          *Note Making New Objects::.

    `:initform'
          A Lisp object used to generate the default value for this
          slot.

          If `:initform' is left out, that slot defaults to being
          unbound.  It is an error to reference an unbound slot, so if
          you do not need slots to be in an unbound state, you should
          always use an `:initform' specifier.  Use `slot-boundp' to
          test if a slot is unbound *Note Predicates::.  Use
          `slot-makeunbound' to set a slot to being unbound after
          giving it a value *Note Accessing Slots::.

          The value passed to initform is automatically quoted.  Thus,
               :initform (1 2 3)
          appears as the specified list in the default object.  A
          symbol that is a function like this:
               :initform +
          will set the initial value as that symbol.  A function that
          is a lambda expression, like this:
               :initform (lambda () some-variablename)

          will be evaluated at instantiation time to the value of
          `some-variablename'.

          Lastly, using the function `lambda-default' instead of
          `lambda' will let you specify a lambda expression to use as
          the value, without evaluation, thus:
               :initform (lambda-default () some-variablename)

          will not be evaluated at instantiation time, and the value in
          this slot will instead be `(lambda () some-variablename)'.

          After a class has been created with `defclass', you can change
          that default value with `oset-default'. *Note Accessing
          Slots::.

    `:type'
          An unquoted type specifier used to validate data set into
          this slot.  *Note (cl)Type Predicates::.  Here are some
          examples:
         `symbol'
               A symbol.

         `number'
               A number type

         `my-class-name'
               An object of your class type.

         `(or null symbol)'
               A symbol, or nil.

         `function'
               A function symbol, or a `lambda-default' expression.

    `:allocation'
          Either :class or :instance (defaults to :instance) used to
          specify how data is stored.  Slots stored per instance have
          unique values for each object.  Slots stored per class have
          shared values for each object.  If one object changes a
          :class allocated slot, then all objects for that class gain
          the new value.

    `:documentation'
          Documentation detailing the use of this slot.  This
          documentation is exposed when the user describes a class, and
          during customization of an object.

     Some tags whose behaviors do not yet match CLOS are:

    `:accessor'
          Name of a generic function which can be used to fetch the
          value of this slot.  You can call this function later on your
          object and retrieve the value of the slot.

    `:writer'
          Name of a generic function which will write this slot.

    `:reader'
          Name of a generic function which will read this slot.

     Some tags which are unique to EIEIO are:

    `:custom'
          A custom :type specifier used when editing an object of this
          type.  See documentation for `defcustom' for details.  This
          specifier is equivalent to the :type field of a `defcustom'
          call.

    `:label'
          When customizing an object, the value of :label will be used
          instead of the slot name.  This enables better descriptions
          of the data than would usually be afforded.

    `:group'
          Similar to `defcustom''s :group command, this organizes
          different slots in an object into groups.  When customizing
          an object, only the slots belonging to a specific group need
          be worked with, simplifying the size of the display.

    `:printer'
          This routine takes a function symbol.  The function should
          accept one argument, which is the value from the slot to be
          printed to `standard-output'.  When the function
          `object-write' is called, this function will be called to
          write the slot value out to a a printable form.  The output
          format MUST be  something that could in turn be interpreted
          with `read' such that the object can be brought back in from
          the output stream.  Thus, if you wanted to output a symbol,
          you would need to quote the symbol.  If you wanted to run a
          function on load, you can output the code to do the
          construction of the value.

    `:protection'
          A CLOS unsupported specifier which indicates that only
          methods of this class may access this slot.

          When using a slot referencing function, if the value behind
          SLOT is private or protected, then the current scope of
          operation must be within a method of the calling object.

          Valid values are:

         `:public'
               Anyone may access this slot from any scope.

         `:protected'
               Only methods of the same class, or of a child class may
               access this slot.

         `:private'
               Only methods of the same class as this slot's definition
               may access this slot.


     Additionally, CLOS style class options are available.  These are
     various options attached to a class.  These options can occur in
     place or in addition to a documentation string.  If both occur,
     then the options appear before the documentation string.  In CLOS,
     documentation is one of the options available to a class, so the
     ability to have a standalone documentation string is specific to
     Emacs.

     Possible class options are:
    `:documentation'
          Doc string to use for this class.  If an Emacs style
          documentation string is also provided, then this option is
          ignored.

    `:allow-nil-initform'
          This is not a CLOS option.

          If this option is non-nil, and the `:initform' is `nil', but
          the `:type' is specifies something such as `string' then allow
          this to pass.  The default is to have this option be off.
          This is implemented as an alternative to unbound slots.

    `:abstract'
          This is not a CLOS option.

          Tags a class as being abstract, or uninstantiable.

    `:custom-groups'
          This is a list of groups that can be customized within this
          class.  This slot is auto-generated when a class is created
          and need not be specified.  It can be retrieved with the
          `class-option' command, however, to see what groups are
          available.

    `:metaclass'
          Unsupported CLOS option.  Enables the use of a different base
          class other than `standard-class'.

    `:default-initargs'
          Unsupported CLOS option.  Specifies a list of initargs to be
          used when creating new objects.  As far as I can tell, this
          duplicates the function of `:initform'.

     *Note CLOS compatibility::, for more details on CLOS tags versus
     EIEIO specific tags.

     The whole definition may look like this:
          (defclass data-object ()
            ((value :initarg :value
                    :initform nil
                    :accessor get-value
                    :documentation
                    "Lisp object which represents the data this object maintains."
                    :protection :protected)
             (reference :initarg :reference
                        :initform nil
                        :type list
                        :custom (repeat object)
                        :documentation
                        "List of objects looking at this object.
          The method `update-symbol' is called for each member of `reference' whenever
          `value' is modified."
                        :protection :protected)
             )
            "Data object which tracks referencers.")


 -- Variable: eieio-error-unsupported-class-tags
     If Non-nil, then `defclass' will signal an error if a tag in a
     slot specifier is unsupported.


File: eieio.info,  Node: Making New Objects,  Next: Accessing Slots,  Prev: Building Classes,  Up: Top

5 Making New Objects
********************

Once you have defined a simple class, such as:
     (defclass classname ()
        ( ) "Doc String")

   It's time to create objects of that class type.  After we call
`defclass' two new functions are created, one of which is CLASSNAME.
Thus, from the example at the end of the previous chapter *Note
Building Classes::, we would have the functions `data-object' and
`data-object-p'.

   For the example with CLASSNAME the constructor would be like this:

 -- Function: classname object-name &rest slots
     This creates and returns a new object.  This object is not
     assigned to anything, and will be garbage collected if not saved.
     This object will be given the string name OBJECT-NAME.  There can
     be multiple objects of the same name, but the name slot provides a
     handy way to keep track of your objects.  SLOTS is just all the
     slots you wish to preset.  Any slot set as such _will not_ get its
     default value, and any side effects from a slot's `:initform' that
     may be a function will not occur.

     An example pair would appear simply as `:value 1'.  Of course you
     can do any valid Lispy thing you want with it, such as `:value (if
     (boundp 'special-symbol) special-symbol nil)'

     Example of creating an object from a class, *Note Building
     Classes:::

          (data-object "test" :value 3 :reference nil)



File: eieio.info,  Node: Accessing Slots,  Next: Writing Methods,  Prev: Making New Objects,  Up: Top

6 Accessing Slots
*****************

There are several ways to access slot values in an object.  The naming
convention and argument order is similar to that found in Emacs Lisp for
referencing vectors.  The basics for referencing, setting, and calling
methods are all accounted for.

 -- Function: oset object slot value
     This sets the value behind SLOT to VALUE in OBJECT.  `oset'
     returns VALUE.

 -- Function: oset-default class slot value
     This sets the slot SLOT in CLASS which is initialized with the
     `:initform' tag to VALUE.  This will allow a user to set both
     public and private defaults after the class has been constructed.
     This function is intrusive, and is offered as a way to allow users
     to configure the default behavior of packages built with classes
     the same way `setq-default' is used for buffer-local variables.

     For example, if a user wanted all `data-objects' (*note Building
     Classes::) to inform a special object of his own devising when they
     changed, this can be arranged by simply executing this bit of code:

          (oset-default data-object reference (list my-special-object))


 -- Function: oref obj field
     Retrieve the value stored in OBJ in the slot named by FIELD.
     Field is the name of the slot when created by "defclass" or the
     label created by the `:initarg' tag.

 -- Function: oref-default obj field
     Gets the default value of OBJ (maybe a class) for FIELD.  The
     default value is the value installed in a class with the
     `:initform' tag.  FIELD can be the slot name, or the tag specified
     by the `:initarg' tag in the "defclass" call.

   These next accessors are defined by CLOS to reference or modify slot
values, and use the previously mentioned set/ref routines.

 -- Function: slot-value object slot
     This function retrieves the value of SLOT from OBJECT.  Unlike
     `oref', the symbol for SLOT must be quoted.

 -- Function: set-slot-value object slot value
     This is not a CLOS function, but is meant to mirror `slot-value' if
     you don't want to use the cl package's `setf' function.  This
     function sets the value of SLOT from OBJECT.  Unlike `oset', the
     symbol for SLOT must be quoted.

 -- Function: slot-makeunbound object slot
     This function unbinds SLOT in OBJECT.  Referencing an unbound slot
     can signal an error.

 -- Function: object-add-to-list object slot item &optional append
     In OBJECT's SLOT, add ITEM to the pre-existing list of elements.
     Optional argument APPEND indicates we need to append to the list.
     If ITEM already exists in the list in SLOT, then it is not added.
     Comparison is done with "equal" through the "member" function call.
     If SLOT is unbound, bind it to the list containing ITEM.

 -- Function: object-remove-from-list object slot item
     In OBJECT's SLOT, remove occurrences ITEM.  If ITEM exists in the
     list in SLOT, then it is removed.  Comparison is done with "equal"
     via the "delete" function call.  If SLOT is unbound, do nothing.

 -- Function: with-slots entries object forms
     Bind ENTRIES lexically to the specified slot values in OBJECT, and
     execute FORMS.  In CLOS, it would be possible to set values in
     OBJECT by using `setf' to assign to these values, but in Emacs,
     you may only read the values, or set the local variable to a new
     value.

          (defclass myclass () (x :initarg 1))
          (setq mc (make-instance 'myclass))
          (with-slots (x) mc x)                      => 1
          (with-slots ((something x)) mc something)  => 1


File: eieio.info,  Node: Writing Methods,  Next: Predicates,  Prev: Accessing Slots,  Up: Top

7 Writing Methods
*****************

Writing a CLOS style method is similar to writing a function.  The
differences are that there are some extra options and there can be
multiple implementations of a single method which interact interestingly
with each other.

   Each method created verifies that there is a "generic method"
available to attach to.  A generic method has no body, and is merely a
symbol upon which methods are attached.

 -- Function: defgeneric method arglist [doc-string]
     METHOD is the unquoted symbol to turn into a function.  ARGLIST is
     the default list of arguments to use (not implemented yet).
     DOC-STRING is the documentation used for this symbol.

     A generic function acts as a place holder for methods.  There is
     no need to call `defgeneric' yourself, as `defmethod' will call it
     if necessary.  Currently the argument list is unused.

     `defgeneric' will prevent you from turning an existing Emacs Lisp
     function into a generic function.

     You can create a generic method with `defmethod', where that
     method has no type specifying, which provides method
     specialization.  This generic method is not related to the
     function created with `defgeneric'.


 -- Macro: defmethod method [:BEFORE | :PRIMARY | :AFTER | :STATIC ]
          arglist [doc-string] forms
     METHOD is the name of the function to be created.

     `:BEFORE' and `:AFTER' specify execution order, and represent when
     this form is to be called.  If neither of these symbols are
     present, then the default priority is, before `:AFTER', after
     `:BEFORE', and is represented in CLOS as `:PRIMARY'.

     If `:STATIC' is used, then the first argument when calling this
     function can be a class or an object.  Do not treat the first
     argument of a `:STATIC' method as an object unless you test it
     first.  Use the functions `oref-default' or `oset-default' which
     will work on a class, or on the class of an object.

     A Class' `constructor' method is defined as a `:STATIC' method.

     `arglist' is the list of argument to this method.

     Unlike CLOS, only the _first_ argument may have a type specifier.
          (defmethod mymethod ((obj classname) secondarg)
            "Doc string" )

     In this example, `mymethod' has a first argument of OBJ, and this
     method will only execute if OBJ is an EIEIO class of type
     `classname'.

     If no type specifier is supplied, then the method becomes a generic
     method, which will work for any object.

     The first argument does not need to be typecast.  A method with no
     typecast is a `generic'.  If a given class has no implementation,
     then the generic will be called when that method is used on a given
     object of that class.

     If two `defmethod's appear with arglists such as `(a b)' and `(c
     d)' then one of the first implementation will be replaced.  One
     generic per execution specifier (such as :BEFORE or :AFTER) and
     multiple methods with type specifiers can co-exist.

     When when a method is called on an object, but there is no method
     specified for that object, but there is a method specified for
     object's parent class, the parent class' method will be called.  If
     there is a method defined for both, only the child's method is
     called.  For a child method to call a parent's method, use
     `call-next-method'.

     DOC-STRING is the documentation attached to the implementation.
     All method doc-strings are concatenated into the generic method's
     function documentation.

     FORMS is the body of the function.

     If multiple methods and generics are defined for the same method
     name, they are executed in this order:

    method :BEFORE

    generic :BEFORE

    method :PRIMARY

    generic :PRIMARY

    method :AFTER

    generic :AFTER

   If no methods exist, then the signal and error named
`no-method-definition'. *Note Signals::

   See the file `eieio-test.el' for an example testing these
differently tagged methods.

 -- Function: call-next-method &rest replacement-args
     While running inside a CLOS method, calling this function will
     call the method associated with the parent of the class of the
     currently running method with the same parameters.  Use
     `call-next-method' when a subclass wants to augment a parent's
     method implementation.

     If no next method is available, but a generic is implemented for
     the given key (Such as `:BEFORE'), then the generic will be called.

     OPTIONAL arguments REPLACEMENT-ARGS can be used to replace the
     arguments the next method would be called with.  Useful if a child
     class wishes to add additional behaviors through the modification
     of the parameters.  This is not a feature of CLOS.

     For example code *Note Default Superclass::.


 -- Function: call-next-method-p
     Return t if there is a next method we can call.


   In this implementation, not all features of CLOS exist.

  1. There is currently no :AROUND tag.

  2. CLOS allows multiple sets of type-cast arguments, where EIEIO only
     allows the first argument to be cast.


File: eieio.info,  Node: Predicates,  Next: Association Lists,  Prev: Writing Methods,  Up: Top

8 Predicates and Utilities
**************************

Now that we know how to create classes, access slots, and define
methods, it might be useful to verify that everything is doing ok.  To
help with this a plethora of predicates have been created.

 -- Function: class-v class
     Return a vector with all the class's important parts in it.  This
     vector is not a copy.  Changing this vector changes the class.
     The CLOS method `find-class' will have the same effect.

 -- Function: find-class symbol &optional errorp
     CLOS function.  In EIEIO it returns the vector definition of the
     class.  If there is no class, `nil' is returned if ERRORP is `nil'.

 -- Function: class-p class
     Return non-`nil' if CLASS is a class type.

 -- Function: object-p obj
     Return non-`nil' if OBJ is an object.

 -- Function: slot-exists-p obj-or-class slot
     Return Non-`nil' if OBJ-OR-CLASS contains SLOT in its class.

 -- Function: slot-boundp object slot
     Non-`nil' if OBJECT's SLOT is bound.  Setting a slot's value makes
     it bound.  Calling "slot-makeunbound" will make a slot unbound.
     OBJECT can be an instance or a class.

 -- Function: class-name class
     Return a string of the form `#<class myclassname>' which should
     look similar to other Lisp objects like buffers and processes.
     Printing a class results only in a symbol.

 -- Function: class-option class option
     Return the value in CLASS of a given OPTION.  For example:

          (class-option eieio-default-superclass :documentation)

     Will fetch the documentation string for `eieio-default-superclass'.

 -- Function: class-constructor class
     Return a symbol used as a constructor for CLASS.  The constructor
     is a function used to create new instances of CLASS. This function
     provides a way to make an object of a class without knowing what
     it is.  This is not a part of CLOS.

 -- Function: object-name obj
     Return a string of the form `#<object-class myobjname>' for OBJ.
     This should look like Lisp symbols from other parts of emacs such
     as buffers and processes, and is shorter and cleaner than printing
     the object's vector.  It is more useful to use `object-print' to
     get and object's print form, as this allows the object to add
     extra display information into the symbol.

 -- Function: object-class obj
     Returns the class symbol from OBJ.

 -- Function: class-of obj
     CLOS symbol which does the same thing as `object-class'

 -- Function: object-class-fast obj
     Same as `object-class' except this is a macro, and no
     type-checking is performed.

 -- Function: object-class-name obj
     Returns the symbol of OBJ's class.

 -- Function: class-parents class
     Returns the direct parents class of CLASS.  Returns `nil' if it is
     a superclass.

 -- Function: class-parents-fast class
     Just like `class-parent' except it is a macro and no type checking
     is performed.

 -- Function: class-parent class
     Deprecated function which returns the first parent of CLASS.

 -- Function: class-children class
     Return the list of classes inheriting from CLASS.

 -- Function: class-children-fast class
     Just like `class-children', but with no checks.

 -- Function: same-class-p obj class
     Returns `t' if OBJ's class is the same as CLASS.

 -- Function: same-class-fast-p obj class
     Same as `same-class-p' except this is a macro and no type checking
     is performed.

 -- Function: object-of-class-p obj class
     Returns `t' if OBJ inherits anything from CLASS.  This is
     different from `same-class-p' because it checks for inheritance.

 -- Function: child-of-class-p child class
     Returns `t' if CHILD is a subclass of CLASS.

 -- Function: generic-p method-symbol
     Returns `t' if `method-symbol' is a generic function, as opposed
     to a regular Emacs Lisp function.

   It is also important to note, that for every created class, a two
predicates are created for it.  Thus in our example, the function
`data-object-p' is created, and return `t' if passed an object of the
appropriate type.  Also, the function `data-object-child-p' is created
which returns `t' if the object passed to it is of a type which
inherits from `data-object'.


File: eieio.info,  Node: Association Lists,  Next: Customizing,  Prev: Predicates,  Up: Top

9 Association Lists
*******************

Lisp offers the concept of association lists, with primitives such as
`assoc' used to access them.  EIEIO provides a few such functions to
help with using lists of objects easily.

 -- Function: object-assoc key field list
     Return non-`nil' if KEY is "equal" to the FIELD of the car of
     objects in LIST.  LIST is a list of objects who's fields are
     searched.  The value is actually the element of LIST whose field
     equals KEY.  Objects in LIST do not need to have a slot named
     FIELD, nor does FIELD need to be bound.  If these errors occur,
     those objects will be ignored.

     This is similar to `assoc', except that LIST is a list of objects,
     instead of an associationg list.

 -- Function: object-assoc-list slot list
     Return an association list generated by extracting SLOT from all
     objects in LIST.  For each element of LIST the `car' is the value
     of SLOT, and the `cdr' is the object it was extracted from.  This
     is useful for generating completion tables.

 -- Function: eieio-build-class-alist &optional base-class
     Returns an alist of all currently defined classes.  This alist is
     suitable for completion lists used by interactive functions to
     select a class.  The optional argument BASE-CLASS allows the
     programmer to select only a subset of classes to choose from
     should it prove necessary.


File: eieio.info,  Node: Customizing,  Next: Introspection,  Prev: Association Lists,  Up: Top

10 Customizing Objects
**********************

EIEIO supports custom through two new widget types.  If a variable is
declared as type `'object', then full editing of slots via the widgets
is made possible.  This should be used carefully, however, because
objects modified are cloned, so if there are other references to these
objects, they will no longer be linked together.

   If you want in place editing of objects, use the following methods:

 -- Function: eieio-customize-object object
     Create a custom buffer and insert a widget for editing OBJECT.  At
     the end, an `Apply' and `Reset' button are available.  This will
     edit the object "in place" so references to it are also changed.
     There is no effort to prevent multiple edits of a singular object,
     so care must be taken by the user of this function.

 -- Function: eieio-custom-widget-insert object flags
     This method inserts an edit object into the current buffer in
     place.  It is implemented as `(widget-create 'object-edit :value
     object)'.  This method is provided as a locale for adding
     tracking, or specializing the widget insert procedure for any
     object.

   To define a slot with an object in it, use the `object' tag.  This
widget type will be automatically converted to `object-edit' if you do
in place editing of you object.

   If you want to have additional actions taken when a user clicks on
the `Apply' button, then overload the method `eieio-done-customizing'.
This method does nothing by default, but that may change in the future.
This would be the best way to make your objects persistent when using
in-place editing.

10.1 Widget extention
=====================

When widgets are being created, one new widget extention has been added,
called the `:slotofchoices'.  When this occurs in a widget definition,
all elements after it are removed, and the slot is specifies is queried
and converted into a series of constants.

     (choice (const :tag "None" nil)
             :slotofchoices morestuff)

   and if the slot `morestuff' contains `(sym1 sym2 sym3)', the above
example is converted into:

     (choice (const :tag "None" nil)
             (const sym1)
             (const sym2)
             (const sym3))

   This is useful when a given item needs to be selected from a list of
items defined in this second slot.


File: eieio.info,  Node: Introspection,  Next: Base Classes,  Prev: Customizing,  Up: Top

11 Introspection
****************

Introspection permits a programmer to peek at the contents of a class
without any previous knowledge of that class.  While EIEIO implements
objects on top of vectors, and thus everything is technically visible,
some functions have been provided.  None of these functions are a part
of CLOS.

 -- Function: object-slots obj
     Return the list of public slots for OBJ.

 -- Function: class-slot-initarg class slot
     For the given CLASS return the :initarg associated with SLOT.  Not
     all slots have initargs, so the return value can be nil.


File: eieio.info,  Node: Base Classes,  Next: Browsing,  Prev: Introspection,  Up: Top

12 Base Classes
***************

Asside from `eieio-default-superclass', EIEIO comes with some
additional classes that you can use.  By using multiple inheritance, it
is possible to use several features at the same time.

* Menu:

* eieio-instance-inheritor::    Enable value inheritance between instances.
* eieio-instance-tracker::      Enable self tracking instances.
* eieio-singleton::             Only one instance of a given class.
* eieio-persistent::            Enable persistence for a class.
* eieio-named::                 Use the object name as a :name field.
* eieio-speedbar::              Enable speedbar support in your objects.


File: eieio.info,  Node: eieio-instance-inheritor,  Next: eieio-instance-tracker,  Up: Base Classes

12.1 `eieio-instance-inheritor'
===============================

This class is in package `eieio-base'.

   Instance inheritance is a mechanism whereby the value of a slot in
object instance can reference the parent instance.  If the parent's slot
value is changed, then the child instance is also changed.  If the
child's slot is set, then the parent's slot is not modified.

 -- Class: eieio-instance-inheritor parent-instance
     A class whose instances are enabled with instance inheritance.
     The PARENT-INSTANCE slot indicates the instance which is
     considered the parent of the current instance.  Default is `nil'.

   To use this class, inherit from it with your own class.  To make a
new instance that inherits from and existing instance of your class,
use the `clone' method with additional parameters to specify local
values.

   The `eieio-instance-inheritor' class works by causing cloned objects
to have all slots unbound.  This class' `slot-unbound' method will
cause references to unbound slots to be redirected to the parent
instance.  If the parent slot is also unbound, then `slot-unbound' will
signal an an error named `slot-unbound'.


File: eieio.info,  Node: eieio-instance-tracker,  Next: eieio-singleton,  Prev: eieio-instance-inheritor,  Up: Base Classes

12.2 `eieio-instance-tracker'
=============================

This class is in package `eieio-base'.

   Sometimes it is useful to keep a master list of all instances of a
given class.  The class `eieio-instance-tracker' performs this task.

 -- Class: eieio-instance-tracker tracker-symbol
     Enable instance tracking for this class.  The field TRACKER-SYMBOL
     should be initialized in inheritors of this class to a symbol
     created with `defvar'.  This symbol will serve as the variable
     used as a master list of all objects of the given class.

 -- Method on eieio-instance-tracker: initialize-instance obj fields
     This method is defined as an `:AFTER' method.  It adds new
     instances to the master list.  Do not overload this method unless
     you use `call-next-method.'

 -- Method on eieio-instance-tracker: delete-instance obj
     Remove OBJ from the master list of instances of this class.  This
     may let the garbage collector nab this instance.

 -- eieio-instance-tracker-find: key field list-symbol
     This convenience function lets you find instances.  KEY is the
     value to search for.  FIELD is the field to compare KEY against.
     The function `equal' is used for comparison.  The paramter
     LIST-SYMBOL is the variable symbol which contains the list of
     objects to be searched.


File: eieio.info,  Node: eieio-singleton,  Next: eieio-persistent,  Prev: eieio-instance-tracker,  Up: Base Classes

12.3 `eieio-singleton'
======================

This class is in package `eieio-base'.

 -- Class: eieio-singleton
     Inheriting from the singleton class will guarantee that there will
     only ever be one instance of this class.  Multiple calls to
     `make-instance' will always return the same object.


File: eieio.info,  Node: eieio-persistent,  Next: eieio-named,  Prev: eieio-singleton,  Up: Base Classes

12.4 `eieio-persistent'
=======================

This class is in package `eieio-base'.

   If you want an object, or set of objects to be persistent, meaning
the slot values are important to keep saved between sessions, then you
will want your top level object to inherit from `eieio-persistent'.

   To make sure your persistent object can be moved, make sure all file
names stored to disk are made relative with
`eieio-persistent-path-relative'.

 -- Class: eieio-persistent file file-header-line
     Enables persistence for instances of this class.  Slot FILE with
     initarg `:file' is the file name in which this object will be
     saved.  Class allocated slot FILE-HEADER-LINE is used with method
     `object-write' as a header comment.

   All objects can write themselves to a file, but persistent objects
have several additional methods that aid in maintaining them.

 -- Method on eieio-persistent: eieio-persistent-save obj &optional file
     Write the object OBJ to its file.  If optional argument FILE is
     specified, use that file name instead.

 -- Method on eieio-persistent: eieio-persistent-path-relative obj file
     Return a file name derived from FILE which is relative to the
     stored location of OBJ.  This method should be used to convert
     file names so that they are relative to the save file, making any
     system of files movable from one location to another.

 -- Method on eieio-persistent: object-write obj &optional comment
     Like `object-write' for `standard-object', but will derive a
     header line comment from the class allocated slot if one is not
     provided.

 -- Function: eieio-persistent-read filename
     Read FILENAME which contains an `eieio-persistent' object
     previously written with `eieio-persistent-save'.


File: eieio.info,  Node: eieio-named,  Next: eieio-speedbar,  Prev: eieio-persistent,  Up: Base Classes

12.5 `eieio-named'
==================

This class is in package `eieio-base'.

 -- Class: eieio-named
     Object with a name.  Name storage already occurs in an object.
     This object provides get/set access to it.


File: eieio.info,  Node: eieio-speedbar,  Prev: eieio-named,  Up: Base Classes

12.6 `eieio-speedbar'
=====================

This class is in package `eieio-speedbar'.

   If a series of class instances map to a tree structure, it is
possible to cause your classes to be displayable in Speedbar. *Note
Top: (speedbar)Top.  Inheriting from these classes will enable a
speedbar major display mode with a minimum of effort.

 -- Class: eieio-speedbar buttontype buttonface
     Enables base speedbar display for a class.  The slot BUTTONTYPE is
     any of the symbols allowed by the function
     `speedbar-make-tag-line' for the EXP-BUTTON-TYPE argument *Note
     Extending: (speedbar)Extending.  The slot BUTTONFACE is the face
     to use for the text of the string displayed in speedbar.  The
     slots BUTTONTYPE and BUTTONFACE are class allocated slots, and do
     not take up space in your instances.

 -- Class: eieio-speedbar-directory-button buttontype buttonface
     This class inherits from `eieio-speedbar' and initializes
     BUTTONTYPE and BUTTONFACE to appear as directory level lines.

 -- Class: eieio-speedbar-file-button buttontype buttonface
     This class inherits from `eieio-speedbar' and initializes
     BUTTONTYPE and BUTTONFACE to appear as file level lines.

   To use these classes, inherit from one of them in you class.  You can
use multiple inheritance with them safely.  To customize your class for
speedbar display, override the default values for BUTTONTYPE and
BUTTONFACE to get the desired effects.

   Useful methods to define for your new class include:

 -- Method on eieio-speedbar: eieio-speedbar-derive-line-path obj depth
     Return a string representing a directory associated with an
     instance of OBJ.  DEPTH can be used to indice how many levels of
     indentation have been opened by the user where OBJ is shown.

 -- Method on eieio-speedbar: eieio-speedbar-description obj
     Return a string description of OBJ.  This is shown in the
     minibuffer or tooltip when the mouse hovers over this instance in
     speedbar.

 -- Method on eieio-speedbar: eieio-speedbar-child-description obj
     Return a string representing a description of a child node of OBJ
     when that child is not an object.  It is often useful to just use
     item info helper functions such as
     `speedbar-item-info-file-helper'.

 -- Method on eieio-speedbar: eieio-speedbar-object-buttonname obj
     Return a string which is the text displayed in speedbar for OBJ.

 -- Method on eieio-speedbar: eieio-speedbar-object-children obj
     Return a list of children of OBJ.

 -- Method on eieio-speedbar: eieio-speedbar-child-make-tag-lines obj
          depth
     This method inserts a list of speedbar tag lines for OBJ to
     represent its children.  Implement this method for your class if
     your children are not objects themselves.  You still need to
     implement `eieio-speedbar-object-children'.

     In this method, use techniques specified in the Speedbar manual.
     *Note Extending: (speedbar)Extending.

   Some other functions you will need to learn to use are:

 -- eieio-speedbar-create: make-map key-map menu name toplevelfn
     Register your object display mode with speedbar.  MAKE-MAP is a
     function which initialized you keymap.  KEY-MAP is a symbol you
     keymap is installed into.  MENU is an easy menu vector
     representing menu items specific to your object display.  NAME is
     a short string to use as a name identifying you mode.  TOPLEVELFN
     is a function called which must return a list of objects
     representing those in the instance system you wish to browse in
     speedbar.

     Read the Extending chapter in the speedbar manual for more
     information on how speedbar modes work *Note Extending:
     (speedbar)Extending.


File: eieio.info,  Node: Browsing,  Next: Class Values,  Prev: Base Classes,  Up: Top

13 Browsing class trees
***********************

To browse all the currently loaded classes in emacs, simply run the
EIEIO browser.  `M-x eieio-browse'.  This browses all the way from the
default super-duper class eieio-default-superclass, and lists all
children in an indented tree structure.

   To browse only from a specific class, pass it in as an alternate
parameter.

   Here is a sample tree from our current example:

     eieio-default-superclass
       +--data-object
            +--data-object-symbol

   Note that we start with eieio-default-superclass.  *Note Default
Superclass::.

   Note: new classes are consed into the inheritance lists, so the tree
comes out upside-down.

   It is also possible to use the function `eieio-class-tree' in the
`tree.el' package.  This will create an interactive tree.  Clicking on
nodes will allow expansion/contraction of branches, or editing of a
class.  *Note Class Values::.


File: eieio.info,  Node: Class Values,  Next: Documentation,  Prev: Browsing,  Up: Top

14 Class Values
***************

Details about any class or object can be retrieved using the function
`eieio-describe-class' function.  Interactively, type in the name of a
class.  In a program, pass it a string with the name of a class, a
class symbol, or an object.  The resulting buffer will display all slot
names.

   Additionally, all methods defined to have functionality on this
class is displayed.


File: eieio.info,  Node: Documentation,  Next: Default Superclass,  Prev: Class Values,  Up: Top

15 Documentation
****************

It is possible to automatically create documentation for your classes in
texinfo format by using the tools in the file `eieio-doc.el'

 -- Command: eieiodoc-class class indexstring &optional skiplist
     This will start at the current point, and created an indented menu
     of all the child classes of, and including CLASS, but skipping any
     classes that might be in SKIPLIST It will then create nodes for
     all these classes, subsection headings, and indexes.

     Each class will be indexed using the texinfo labeled index
     INDEXSTRING which is a two letter description.  *Note (texinfo)
     New Indices::.

     To use this command, the texinfo macro

          @defindex @var { indexstring }

     where INDEXSTRING is replaced with the two letter code.

     Next, an inheritance tree will be created listing all parents of
     that section's class.

     Then,all the slots will be expanded in tables, and described using
     the documentation strings from the code.  Default values will also
     be displayed.  Only those slots with `:initarg' specified will be
     expanded, others will be hidden.  If a slot is inherited from a
     parent, that slot will also be skipped unless the default value is
     different.  If there is a change, then the documentation part of
     the slot will be replace with an @xref back to the parent.

     Only classes loaded into emacs' memory can be documented.



File: eieio.info,  Node: Default Superclass,  Next: Signals,  Prev: Documentation,  Up: Top

16 Default Superclass
*********************

All defined classes, if created as an orphaned class (With no specified
parent class) will inherit from a special class stored in
`eieio-default-superclass'.  This superclass is quite simple, but with
it, certain default methods or attributes can be added to all objects.
In CLOS, this would be named `STANDARD-CLASS', and that symbol is an
alias to `eieio-default-superclass'.

   Currently, the default superclass is defined as follows:

     (defclass eieio-default-superclass nil
       nil
       )
       "Default class used as parent class for orphaned classes.
     Its fields are automatically adopted by classes with no specified
     parents.  This class is not stored in the `parent' field of a class vector."

   When creating an object of any type, you can use its constructor, or
`make-instance'.  This, in turns calls the method
`initialize-instance', which then calls the method `shared-initialize'.

   These methods are all implemented on the default superclass so you do
not need to write them yourself, unless you need to override one of
their behaviors.

   Users should not need to call `initialize-instance' or
`shared-initialize', as these are used by `make-instance' to initialize
the object.  They are instead provided so that users can augment these
behaviors.

 -- Function: initialize-instance obj &rest slots
     Initialize OBJ.  Sets slots of OBJ with SLOTS which is a list of
     name/value pairs.  These are actually just passed to
     `shared-initialize'.

 -- Function: shared-initialize obj &rest slots
     Sets slots of OBJ with SLOTS which is a list of name/value pairs.

   These methods are used to override errors:

 -- Function: slot-missing object slot operation &optional new-value
     This method is called when there is an attempt to access a slot
     that does not exist for a given object.  The default method
     signals an error of type `invalid-slot-name'.  *Note Signals::.

     You may override this behavior, but it is not expected to return
     in the current implementation.

     This function takes arguments in a different order than in CLOS.

 -- Function: slot-unbound object class slot-name fn
     This method is called when there is an attempt to access a slot
     that is not bound.  This will signal and error named
     `unbound-slot'.  If overridden its return value will be returned
     from the function attempting to reference its value.

 -- Function: no-applicable-method object method
     This method is called when there is an attempt to call a method on
     OBJECT when there is no method to call.  The default method
     signals an error named `no-method-definition'.  The return value
     of this function becomes the return value of the non-existent
     method.

 -- Function: no-next-method object args
     This method is called when an attempt to call `call-next-method' is
     made, and there is no next method that can be called.    The return
     value becomes the return value of `call-next-method'.

   Additional useful methods are:

 -- Function: clone obj &rest params
     Make a copy of OBJ.  Once this copy is made, make modifications
     specified by PARAMS.  PARAMS uses the same format as the SLOTS of
     `initialize-instance'.  The only other change is to modify the
     name with an incrementing numeric.

 -- Function: object-print obj &rest strings
     Construct a printing Lisp symbol for OBJ.  This would look like:
           #<class-name "objname">
     STRINGS are additional parameters passed in by overloading
     functions to add more data into the printing abbreviation.

          (defclass data-object ()
             (value)
             "Object containing one data slot.")

          (defmethod object-print ((this data-object) &optional strings)
            "Return a string with a summary of the data object as part of the name."
            (apply 'call-next-method this
                   (cons (format " value: %s" (render this)) strings)))

     here is what some output could look like:
          (object-print test-object)
             => #<data-object test-object value: 3>

 -- Function: object-write obj &optional comment
     Write OBJ onto a stream in a readable fashion.  The resulting
     output will be Lisp code which can be used with `read' and `eval'
     to recover the object.  Only slots with `:initarg's are written to
     the stream.


File: eieio.info,  Node: Signals,  Next: Demo Programs,  Prev: Default Superclass,  Up: Top

17 Signals
**********

There are new condition names (signals) that can be caught when using
EIEIO.

 -- Signal: invalid-slot-name obj-or-class slot
     This signal is called when an attempt to reference a slot in an
     OBJ-OR-CLASS is made, and the SLOT is not defined for it.

 -- Signal: no-method-definition method arguments
     This signal is called when METHOD is called, with ARGUMENTS and
     nothing is resolved.  This occurs when METHOD has been defined,
     but the arguments make it impossible for EIEIO to determine which
     method body to run.

     Overload the method `no-method-definition' to protect against this
     signal.

 -- Signal: no-next-method class arguments
     This signal is called if the function `call-next-method' is called
     and there is no next method to be called.

     Overload the method `no-next-method' to protect against this
     signal.

 -- Signal: invalid-slot-type slot spec value
     This signal is called when an attempt to set SLOT is made, and VAR
     doesn't match the specified type SPEC.

     In EIEIO, this is also used of a slot specifier has an invalid
     value during a `defclass'.

 -- Signal: unbound-slot object class slot
     This signal is called when an attempt to reference SLOT in OBJECT
     is made, and that instance is currently unbound.


File: eieio.info,  Node: Demo Programs,  Next: CLOS compatibility,  Prev: Signals,  Up: Top

18 Demo Programs
****************

There are many sample programs I have written for EIEIO which could
become useful components of other applications, or are good stand alone
programs providing some useful functionality.  The file, and
functionality of these appear below:

`tree'
     Maintains and displays a tree structure in a buffer.  Nodes in the
     tree can be clicked on for editing, node expansion, and simple
     information.  Includes a sample program for showing directory
     trees, and to draw trees of the EIEIO class structures.

`call-tree'
     Parses a non-byte-compiled function, and generates a call tree
     from it, and all sub-non-byte-compiled functions.  Provides
     protection from recursive functions.

`chart'
     Draw bar charts from data.  Examples include displaying sizes of
     emacs values, file distribution, and rmail distributions.


File: eieio.info,  Node: CLOS compatibility,  Next: Function Index,  Prev: Demo Programs,  Up: Top

19 CLOS compatibility
*********************

As you read this, it is important to know that I have just recently
learned some of the CLOS syntax, but have never used it myself outside
of the EIEIO framework.  I'm primarily and Emacs Lisp hacker who wrote
EIEIO to help myself learn some of the mechanics of Object Oriented
programming.

   Currently, the following functions should behave almost as expected
from CLOS.

`defclass'
     All slot keywords are available but not all work correctly.  Slot
     keyword differences are:

    :reader, and :writer tags
          Create methods that signal errors instead of creating an
          unqualified method.  You can still create new ones to do its
          business.

    :accessor
          This should create an unqualified method to access a slot, but
          instead pre-builds a method that gets the slot's value.

    :type
          Specifier uses the `typep' function from the `cl' package.
          *Note (cl)Type Predicates::. It therefore has the same issues
          as that package.  Extensions include the ability to provide
          object names.

     Defclass also supports class options, but does not currently use
     values of `:metaclass', and `:default-initargs'.

`make-instance'
     Make instance works as expected, however it just uses the EIEIO
     instance creator automatically generated when a new class is
     created.  *Note Making New Objects::.

`defgeneric'
     Creates the desired symbol, and accepts all of the expected
     arguments except `:AROUND'.

`defmethod'
     Calls defgeneric, and accepts most of the expected arguments.  Only
     the first argument to the created method may have a type specifier.
     To type cast against a class, the class must exist before
     defmethod is called. In addition, the `:AROUND' tag is not
     supported.

`call-next-method'
     Inside a method, calls the next available method up the
     inheritance tree for the given object.  This is different than
     that found in CLOS because in EIEIO this function accepts
     replacement arguments.  This permits subclasses to modify
     arguments as they are passed up the tree.  If no arguments are
     given, the expected CLOS behavior is used.

`setf'
     If the common-lisp subsystem is loaded, the setf parameters are
     also loaded so the form `(setf (slot-value object slot) t)' should
     work.

   CLOS supports the `describe' command, but EIEIO only provides
`eieio-describe-class', and `eieio-describe-generic'.  These functions
are adviced into `describe-variable', and `describe-function'.

   When creating a new class (*note Building Classes::) there are
several new keywords supported by EIEIO.

   In EIEIO tags are in lower case, not mixed case.


File: eieio.info,  Node: Function Index,  Prev: CLOS compatibility,  Up: Top

Function Index
**************

 [index ]
* Menu:

* call-next-method:                      Writing Methods.     (line 108)
* call-next-method-p:                    Writing Methods.     (line 126)
* child-of-class-p:                      Predicates.          (line 101)
* class-children:                        Predicates.          (line  84)
* class-children-fast:                   Predicates.          (line  87)
* class-constructor:                     Predicates.          (line  46)
* class-name:                            Predicates.          (line  34)
* class-of:                              Predicates.          (line  63)
* class-option:                          Predicates.          (line  39)
* class-p:                               Predicates.          (line  20)
* class-parent:                          Predicates.          (line  81)
* class-parents:                         Predicates.          (line  73)
* class-parents-fast:                    Predicates.          (line  77)
* class-slot-initarg:                    Introspection.       (line  16)
* class-v:                               Predicates.          (line  11)
* classname:                             Making New Objects.  (line  19)
* clone:                                 Default Superclass.  (line  76)
* defclass:                              Building Classes.    (line  11)
* defgeneric:                            Writing Methods.     (line  16)
* defmethod:                             Writing Methods.     (line  35)
* delete-instance on eieio-instance-tracker: eieio-instance-tracker.
                                                              (line  23)
* eieio-build-class-alist:               Association Lists.   (line  28)
* eieio-custom-widget-insert:            Customizing.         (line  22)
* eieio-customize-object:                Customizing.         (line  15)
* eieio-persistent-path-relative on eieio-persistent: eieio-persistent.
                                                              (line  30)
* eieio-persistent-read:                 eieio-persistent.    (line  41)
* eieio-persistent-save on eieio-persistent: eieio-persistent.
                                                              (line  26)
* eieio-speedbar-child-description on eieio-speedbar: eieio-speedbar.
                                                              (line  48)
* eieio-speedbar-child-make-tag-lines on eieio-speedbar: eieio-speedbar.
                                                              (line  61)
* eieio-speedbar-derive-line-path on eieio-speedbar: eieio-speedbar.
                                                              (line  38)
* eieio-speedbar-description on eieio-speedbar: eieio-speedbar.
                                                              (line  43)
* eieio-speedbar-object-buttonname on eieio-speedbar: eieio-speedbar.
                                                              (line  54)
* eieio-speedbar-object-children on eieio-speedbar: eieio-speedbar.
                                                              (line  57)
* eieiodoc-class:                        Documentation.       (line  10)
* find-class:                            Predicates.          (line  16)
* generic-p:                             Predicates.          (line 104)
* initialize-instance:                   Default Superclass.  (line  36)
* initialize-instance on eieio-instance-tracker: eieio-instance-tracker.
                                                              (line  18)
* invalid-slot-name:                     Signals.             (line  10)
* invalid-slot-type:                     Signals.             (line  30)
* key:                                   eieio-instance-tracker.
                                                              (line  27)
* make-map:                              eieio-speedbar.      (line  72)
* no-applicable-method:                  Default Superclass.  (line  62)
* no-method-definition:                  Signals.             (line  14)
* no-next-method <1>:                    Signals.             (line  23)
* no-next-method:                        Default Superclass.  (line  69)
* object-add-to-list:                    Accessing Slots.     (line  59)
* object-assoc:                          Association Lists.   (line  11)
* object-assoc-list:                     Association Lists.   (line  22)
* object-class:                          Predicates.          (line  60)
* object-class-fast:                     Predicates.          (line  66)
* object-class-name:                     Predicates.          (line  70)
* object-name:                           Predicates.          (line  52)
* object-of-class-p:                     Predicates.          (line  97)
* object-p:                              Predicates.          (line  23)
* object-print:                          Default Superclass.  (line  82)
* object-remove-from-list:               Accessing Slots.     (line  66)
* object-slots:                          Introspection.       (line  13)
* object-write:                          Default Superclass.  (line 101)
* object-write on eieio-persistent:      eieio-persistent.    (line  36)
* oref:                                  Accessing Slots.     (line  31)
* oref-default:                          Accessing Slots.     (line  36)
* oset:                                  Accessing Slots.     (line  12)
* oset-default:                          Accessing Slots.     (line  16)
* same-class-fast-p:                     Predicates.          (line  93)
* same-class-p:                          Predicates.          (line  90)
* set-slot-value:                        Accessing Slots.     (line  49)
* shared-initialize:                     Default Superclass.  (line  41)
* slot-boundp:                           Predicates.          (line  29)
* slot-exists-p:                         Predicates.          (line  26)
* slot-makeunbound:                      Accessing Slots.     (line  55)
* slot-missing:                          Default Superclass.  (line  46)
* slot-unbound:                          Default Superclass.  (line  56)
* slot-value:                            Accessing Slots.     (line  45)
* unbound-slot:                          Signals.             (line  37)
* with-slots:                            Accessing Slots.     (line  71)



Tag Table:
Node: Top849
Node: Quick Start2506
Node: Introduction4715
Node: Naming Conventions8166
Node: Building Classes9382
Node: Making New Objects19649
Node: Accessing Slots21166
Ref: oref22460
Ref: oref-default22675
Ref: slot-value23097
Ref: set-slot-value23262
Ref: object-add-to-list23719
Ref: object-remove-from-list24122
Ref: with-slots24382
Node: Writing Methods24883
Node: Predicates30158
Node: Association Lists34521
Ref: object-assoc34880
Node: Customizing36034
Node: Introspection38481
Node: Base Classes39158
Node: eieio-instance-inheritor39895
Node: eieio-instance-tracker41162
Node: eieio-singleton42625
Node: eieio-persistent43053
Node: eieio-named44950
Node: eieio-speedbar45276
Node: Browsing49109
Node: Class Values50130
Node: Documentation50629
Node: Default Superclass52193
Node: Signals56732
Node: Demo Programs58156
Node: CLOS compatibility59131
Node: Function Index62001

End Tag Table
