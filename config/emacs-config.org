#+TITLE: General Emacs Configuration options
#+AUTHOR: Ari Turetzky
#+EMAIL: ari@turetzky.org
#+TAGS: emacs config
#+PROPERTY: header-args:sh  :results silent :tangle no

* Simple Settings
  Contained herein are my general non-mode specific(mostly)
  configuration  *This is a Work in Progress*
** Looks and Behaviors
   #+BEGIN_SRC elisp
     (if (window-system)
         (tool-bar-mode -1))
     (menu-bar-mode -1)
     (show-paren-mode 1)
     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024))
     (setq inhibit-startup-screen t)
     (setq inhibit-splash-screen t)
     (setq uniquify-buffer-name-style t)
     (setq uniquify-buffer-name-style (quote post-forward))
     (setq uniquify-min-dir-content 1)
     (electric-pair-mode 1)
     (setq cal-tex-diary t)
     (setq blog-root "/ssh:abturet@turetzky.org:~/blog/")
     (add-hook 'diary-display-hook 'fancy-diary-display)
     (add-hook 'text-mode-hook ' turn-on-auto-fill)
     (add-hook 'before-save-hook 'time-stamp)
     (setq dired-omit-files-p t)
     (add-hook 'dired-load-hook '(lambda () (require 'dired-x)))
     (setq tramp-auto-save-directory "~/tmp")
     (setq backup-directory-alist
           '((".*" . "~/tmp/")))
     (setq auto-save-file-name-transforms
           '((".*" "~/tmp/" t)))
     (setq message-log-max 1000)
     ;;     (set-default-font "Monaco-11")
     ;;(set-face-attribute 'default nil :family "Monaco" :height 110 :weight 'normal)
     (set-face-attribute 'default nil :family "JetBrains Mono" :height 110 :weight 'normal)
     ;;     (add-to-list 'default-frame-alist '(font . "Monaco-18"))
     (setq help-at-pt-display-when-idle t)
     (setq help-at-pt-timer-delay 0.1)
     (help-at-pt-set-timer)
     (setq show-paren-style 'mixed)
     (setq mode-line-in-non-selected-windows nil)
     (fset 'yes-or-no-p 'y-or-n-p)



   #+END_SRC

   Pop yank gives you a pop up of recent yanks,  a "yank bank"
   #+BEGIN_SRC elisp
               ;; (use-package popup
               ;;   :ensure t)
               (use-package pos-tip
                 :ensure t)
               ;; (use-package popup-kill-ring
               ;;   :ensure t)

               (global-set-key "\C-cy" 'popup-kill-ring)
               ;; '(lambda ()
               ;;            (interactive)
               ;;            (popup-menu 'yank-menu)))

   #+END_SRC
** Who am i and email
#+BEGIN_SRC elisp
  (require 'smtpmail)

  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
        smtp-smtp-server "https://outlook.office365.com/EWS/Exchange.asmx"
        smtpmail-stream-type 'starttls
        smtpmail-smtp-service 587)
  (setq starttls-use-gnutls t)
  (setq user-full-name "Ari Turetzky")
  (setq user-mail-address "aturetzky@quantcast.com")

  ;; ;;mu4e
  ;; (add-to-list 'load-path "/usr/local/Cellar/mu/1.0/share/emacs/site-lisp/mu/mu4e/")
  ;; (require 'mu4e)

  ;; (setq mu4e-maildir (expand-file-name "~/mail/qc/"))
  ;; (setq mu4e-drafts-folder "/Drafts")
  ;; (setq mu4e-sent-folder "/Sent")
  ;; (setq mu4e-trash-folder "/Trash")

  ;; (setq mu4e-get-mail-command "mbsync qc"
  ;;       mu4e-html2text-command "w3m -T text/html"
  ;;       mu4e-update-interval 120
  ;;       mu4e-headers-auto-update t
  ;;       mu4e-compose-signature-auto-include nil)

  ;; (setq mu4e-view-show-images t)

  ;; (when (fboundp 'imagemagick-register-types)
  ;;   (imagemagick-register-types))
  ;; (setq mu4e-mu-binary "/usr/local/bin/mu")
  ;; (setq mu4e-compose-reply-to-address "aturetzky@quantcast.com")


#+END_SRC
** Tex
   #+BEGIN_SRC elisp
     (setq TeX-command-list
           (quote (
                   ("TeX" "tex \\\\nonstopmode\\\\input %t" TeX-run-TeX nil t)
                   ("LaTeX" "%l -shell-escape \\\\nonstopmode\\\\input{%t}" TeX-run-LaTeX nil t)
                   ("LaTeX PDF" "pdflatex -shell-escape \\\\nonstopmode\\\\input{%t}" TeX-run-LaTeX nil t)
                   ("View" "%v" TeX-run-discard nil nil)
                   ("Print" "gsview32 %f" TeX-run-command t nil)
                   ("File" "dvips %d -o %f " TeX-run-command t nil)
                   ("BibTeX" "bibtex %s"</FONT> TeX-run-BibTeX nil nil)
                   ("Index" "makeindex %s" TeX-run-command nil t)
                   ("Check" "lacheck %s" TeX-run-compile nil t)
                   ("Other" "" TeX-run-command t t))))

   #+END_SRC
   p
** Get some package goodness
   #+BEGIN_SRC elisp
     (require 'package)
   #+END_SRC

   find our packages in the more reputable places
   #+BEGIN_SRC elisp
     (add-to-list 'package-archives
                  '("marmalade" . "https://marmalade-repo.org/packages/"))
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/"))
     (add-to-list 'package-archives
                  '("elpa" . "https://elpa.gnu.org/packages/"))
     (add-to-list 'package-archives
                  '("org" . "https://orgmode.org/elpa/"))
   #+END_SRC

   And now we can get kick off the package manager
   #+BEGIN_SRC elisp
   #+END_SRC
** Use Package
   =use-package= makes it easy to require a file without a bunch of
   requires like you'll find just below a bit and it will also ensure it
   gets installed from a repository we defined above

   #+BEGIN_SRC elisp
     (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
     (eval-when-compile
       (require 'use-package))
   #+END_SRC

   I store the load paths to locally downloaded package in their own
   config file [[file:load-path-config.org][load-path-config]]

   #+BEGIN_SRC elisp
     (require 'load-path-config-new)
   #+END_SRC
** JS Comint using node to eval javascript code
   And here we have the first use of use-pacakge!
   #+BEGIN_SRC elisp
               (use-package nvm
                 :ensure t)
               (use-package js-comint
                 :ensure t
                 :config
                 (require 'nvm)
                 (js-do-use-nvm))

               (use-package js2-mode
                 :ensure t
                 :bind (:map js2-mode-map
                             ("\C-x\C-e" . js-send-last-sexp)
                             ("\C-\M-x"  . js-send-last-sexp-and-go)
                             ("\C-cb"    . js-send-buffer)
                             ("\C-c\C-b" . js-send-buffer-and-go)
                             ("\C-cl"    . js-load-file-and-go))
                 :config
                 (setq js2-strict-missing-semi-warning nil)
                 (setq js2-missing-semi-one-line-override nil)
                 )
   #+END_SRC

** Ivy for isearcing
   Use Ivy, counsel and Swiper(no swiping!) for isearch
   #+BEGIN_SRC elisp
     (use-package swiper
       :ensure t)
     (use-package counsel
       :ensure t)
     (use-package ivy
       :ensure t
       :init
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-use-selectable-prompt t)
       (setq enable-recursive-minibuffers t)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
       :bind
       (
        ("\C-s" . 'swiper)
        ("C-x C-f" . 'counsel-find-file)
        ("C-c j" . 'counsel-git-grep)
        ("C-c k" . 'counsel-ag)
        ("C-c l" . 'counsel-locate)
        ("M-x" . 'counsel-M-x)))
     (use-package ivy-rich
       :init
       (ivy-rich-mode 1)
       :config
       (setq ivy-format-function #'ivy-format-function-line))
   #+END_SRC
** Moving Around
#+BEGIN_SRC elisp
  (use-package ace-window
    :ensure t
    :config
    (ace-window-display-mode)
    (set-face-attribute 'aw-leading-char-face nil :height 3.0)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :bind
    ("M-o" . 'ace-window))
#+END_SRC
** Git
#+BEGIN_SRC elisp
  (use-package magit
    :ensure t)
  (require 'magit)
  (use-package git-gutter-fringe+
    :ensure t
    :diminish
    :init
    (global-git-gutter+-mode))

  (use-package git-timemachine
    :ensure t
    :diminish
    )
#+END_SRC
** Preserve all the crap I put in the =*scrach*= buffer
   the following was found a while back Not sure where but I can't find
   it online anymore and the author doesn't seem to have it on his git
   hub but Thanks Michal!
   #+BEGIN_SRC  elisp
                         ;; Notes in *scratch* v. 0.2
                         ;; Copyright (c) 2006 by Michal Nazarewicz (mina86/AT/mina86.com)
                         ;; Released under GNU GPL

                         (defconst scratch-file (expand-file-name "~/.emacs.d/scratch")
                           "File where content of *scratch* buffer will be read from and saved to.")
                         (defconst scratch-file-autosave (concat scratch-file ".autosave")
                           "File where to autosave content of *scratch* buffer.")

                         (save-excursion
                           (set-buffer (get-buffer-create "*scratch*"))
                           (if (file-readable-p scratch-file)
                               (if (and (file-readable-p scratch-file-autosave)
                                        (file-newer-than-file-p scratch-file-autosave scratch-file)t)
                                   (insert-file-contents scratch-file-autosave nil nil nil t)
                                 (insert-file-contents scratch-file nil nil nil t)
                                 (set-buffer-modified-p nil)))
                           (auto-save-mode 1)
                           (setq buffer-auto-save-file-name scratch-file-autosave)
                                                                 ; (setq revert-buffer-function 'scratch-revert)
                           (fundamental-mode))
                         (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
                         (add-hook 'kill-emacs-hook 'kill-emacs-scratch-save)

                         (defun scratch-revert (ignore-auto noconfirm)
                           (when (file-readable-p scratch-file)
                             (insert-file-contents scratch-file nil nil nil t)
                             (set-buffer-modified-p nil)))

                         (defun kill-scratch-buffer ()
                           (not (when (string-equal (buffer-name (current-buffer)) "*scratch*")
                                  (delete-region (point-min) (point-max))
                                  (set-buffer-modified-p nil)
                                  (next-buffer)
                                  t)))

                         (defun kill-emacs-scratch-save ()
                           (let ((buffer (get-buffer-create "*scratch*")))
                             (if buffer
                                 (save-excursion
                                   (set-buffer buffer)
                                   (write-region nil nil scratch-file)
                                   (unless (string-equal scratch-file buffer-auto-save-file-name)
                                     (delete-auto-save-file-if-necessary t))))))

                    (use-package treemacs-projectile
                      :after treemacs projectile
                      :ensure t)
                    (use-package treemacs-magit
                      :after treemacs magit
                      :ensure t)
                    (use-package treemacs
                      :ensure t
                      :defer t
                      :config
                      (setq treemacs-space-between-root-nodes nil)
                      (treemacs-follow-mode t)
                      (treemacs-filewatch-mode t)
                      (treemacs-fringe-indicator-mode t)
                      (doom-themes-treemacs-config)
                      ;;(setq doom-themes-treemacs-theme "doom-colors")
                      (global-set-key (kbd "M-0") 'treemacs-select-window))

               ;;(require 'spaceline-config)
               ;;(spaceline-spacemacs-theme)
               ;;(spaceline-emacs-theme)
               (doom-modeline-init)
               (require 'doom-themes)
               (setq doom-themes-enable-bold t)
               (setq doom-themes-enable-italic t)
               (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

               ;;(load-theme 'tron-legacy t)
               ;;(load-theme 'doom-zenburn t)
               ;;(powerline-default-theme)
               (doom-modeline-def-modeline 'abt/my-doom-modeline
                 '(window-number bar buffer-info vcs matches )
                 '(misc-info input-method checker buffer-position " "))

               (defun setup-custom-doom-modeline()
                 (doom-modeline-set-modeline 'abt/my-doom-modeline 'default))

               (add-hook 'doom-modeline-mode-hook ' setup-custom-doom-modeline)


                    (setq sh-basic-offset 2)
                    (setq sh-indentation 2)
                    (setq smie-indent-basic 2)
     (use-package ligature
       :load-path "/Users/ari.turetzky/dev/git/ligature.el"
       :config
       ;; Enable the "www" ligature in every possible major mode
       (ligature-set-ligatures 't '("www"))
       ;; Enable traditional ligature support in eww-mode, if the
       ;; `variable-pitch' face supports it
       (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
       ;; Enable all Cascadia Code ligatures in programming modes
       (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                            "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                            "\\" "://"))
       ;; Enables ligature checks globally in all buffers. You can also do it
       ;; per mode with `ligature-mode'.
       (global-ligature-mode t))

                    ;; (use-package composite
                    ;;   :defer t
                    ;;   :init
                    ;;   (defvar composition-ligature-table (make-char-table nil))
                    ;;   :hook
                    ;;   (((prog-mode conf-mode nxml-mode markdown-mode help-mode rjsx-mode)
                    ;;     . (lambda () (setq-local composition-function-table composition-ligature-table))))
                    ;;   :config
                    ;;   ;; support ligatures, some toned down to prevent hang
                    ;;   (when (version<= "27.0" emacs-version)
                    ;;     (let ((alist
                    ;;            '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
                    ;;              (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
                    ;;              (36 . ".\\(?:\\(>\\)>?\\)")
                    ;;              (37 . ".\\(?:\\(%\\)%?\\)")
                    ;;              (38 . ".\\(?:\\(&\\)&?\\)")
                    ;;              (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
                    ;;              ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
                    ;;              (43 . ".\\(?:\\([>]\\)>?\\)")
                    ;;              ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
                    ;;              ;; (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
                    ;;              ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
                    ;;              ;; (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
                    ;;              ;; (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
                    ;;              ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
                    ;;              (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
                    ;;              (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
                    ;;              (59 . ".\\(?:\\(;\\);?\\)")
                    ;;              (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
                    ;;              (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
                    ;;              (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
                    ;;              ;; t(63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
                    ;;              (91 . ".\\(?:\\(|\\)[]|]?\\)")
                    ;;              ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
                    ;;              (94 . ".\\(?:\\(=\\)=?\\)")
                    ;;              (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
                    ;;              (119 . ".\\(?:\\(ww\\)w?\\)")
                    ;;              (123 . ".\\(?:\\(|\\)[|}]?\\)")
                    ;;              (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
                    ;;              (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
                    ;;       (dolist (char-regexp alist)
                    ;;         (set-char-table-range composition-ligature-table (car char-regexp)
                    ;;                               `([,(cdr char-regexp) 0 font-shape-gstring]))))
                    ;;     (set-char-table-parent composition-ligature-table composition-function-table))
                    ;;   )
   #+END_SRC

** Flycheck is fly as hell
   #+BEGIN_SRC elisp
     (use-package flycheck-pos-tip
       :after flycheck
       :config
       (flycheck-pos-tip-mode)
       )
     (use-package flycheck
       :diminish flycheck-mode
       :ensure t
       :init
       (setq flycheck-emacs-lisp-initialize-packages 1)
       (setq flycheck-emacs-lisp-load-path 'inherit)
       :config
       (flycheck-add-mode 'javascript-eslint 'rjsx-mode)
       (flycheck-add-mode 'javascript-jshint 'rjsx-mode)
       )
   #+END_SRC

** Start up the emacs server
   Of course it has a server...
   #+BEGIN_SRC elisp
     (server-start)
   #+END_SRC

** Org-Mode
   Pretty meta to talk about =org-mode= in and org doc.  this is
   currently here but will need to move to it's own config file
   eventually to make it more manageable
   #+BEGIN_SRC elisp
     (use-package diminish
       :ensure t)

     (diminish 'org-mode  "")
     (diminish 'auto-revert-mode)
     (diminish 'yas-minor-mode)
     (diminish 'eldoc-mode)
     (diminish 'org-src-mode)
     (diminish 'abbrev-mode)
     (diminish 'ivy-mode)
     (diminish 'global-highline-mode)
     (diminish 'ruby-block-mode)
     (diminish 'ruby-electric-mode)
     (diminish "seeing-is-believing")
     (diminish 'hs-minor-mode)
     (diminish 'ruby-block-mode)
     (diminish 'global-highline-mode)

     (use-package org
       :ensure t
       :diminish  ""
       :config
       (setq org-default-notes-file "~/Documents/notes/notes.org")
       (require 'org-capture))
     (use-package ox-twbs
       :ensure t)
     (use-package ox-jira
       :ensure t)
     (require 'org-tempo)
     (use-package org-mime
       :ensure t)
     (setq org-ellipsis " ⤵")
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-src-window-setup 'current-window)
     (use-package plantuml-mode
       :ensure t)
     (use-package org-bullets
       :ensure t)
     (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
     (setq org-startup-with-inline-images t)
     (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
     ;;***********remember + Org config*************
     (setq org-remember-templates
           '(("Tasks" ?t "* TODO %?\n %i\n %a" "H://todo.org")
             ("Appointments" ?a "* Appointment: %?\n%^T\n%i\n %a" "H://todo.org")))
     (setq remember-annotation-functions '(org-remember-annotation))
     (setq remember-handler-functions '(org-remember-handler))
     (add-hook 'remember-mode-hook 'org-remember-apply-template)
     (global-set-key (kbd "C-c r") 'remember)

     (setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
     (setq org-agenda-include-diary t)
     (setq org-agenda-include-all-todo t)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((shell  . t)
        (js  . t)
        (emacs-lisp . t)
        (python . t)
        (ruby . t)
        (css . t )
        (plantuml . t)
        (sql . t)
        (java . t)
        (dot . t)))
     (setq org-confirm-babel-evaluate nil)

     (use-package virtualenvwrapper
       :ensure t
       :init
       (venv-initialize-interactive-shells)
       (venv-initialize-eshell)
       (setq venv-location "~/.virtualenvs")
       )
     (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.12/libexec/plantuml.jar")
     (setq plantuml-jar-path "/usr/local/Cellar/plantuml/1.2018.12/libexec/plantuml.jar")


     (setq org-mime-export-options '(:section-numbers nil
                                                      :with-author nil
                                                      :with-toc nil))

        (use-package hc-zenburn-theme
          :ensure t
         :init
         (powerline-default-theme)
         (load-theme 'hc-zenburn t)
         (hc-zenburn-with-color-variables
           (custom-theme-set-faces
            'hc-zenburn
            `(company-tooltip-common ((t (:background ,hc-zenburn-bg+3 :foreground ,hc-zenburn-green+4))))
            `(company-tooltip-selection ((t (:background ,"gray40" :foreground ,"LightBlue3"))))
            `(popup-isearch-match ((t (:background ,hc-zenburn-cyan :foreground ,"Blue"))))))
         )
   #+END_SRC

** Teh requires
   This is kinda like that part in the bible with all the begats...
   #+BEGIN_SRC elisp
     (use-package exec-path-from-shell
       :ensure t
       :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize))
       (setq exec-path-from-shell-check-startup-files t)
       (setq exec-path-from-shell-variables `("PATH" "ARTIFACTORY_PASSWORD" "ARTIFACTORY_USER")
       ))
     (use-package inf-ruby
       :ensure t)
     (require 'ruby-mode)
     (use-package  ruby-electric
       :ensure t)
     (use-package coffee-mode
       :ensure t)
     (use-package feature-mode
       :ensure t)
     (require 'rcodetools)
     (use-package yasnippet
       :ensure t
       :config
       (yas-global-mode t)
       (yas-global-mode))
     (use-package yasnippet-snippets
       :ensure t)
     (use-package tree-mode
       :ensure t)
     (use-package rake
       :ensure t)
     (use-package inflections
       :ensure t)
     (use-package graphql
       :ensure t)
     (require 'org-protocol)
     ;; (use-package auto-complete
     ;;   :diminish "  "
     ;;   :ensure t
     ;;   :init
     ;;   (setq ac-use-menu-map t)
     ;;   (setq ac-use-fuzzy t))
     ;; (require 'auto-complete-config)
     ;; (ac-config-default)
     ;; (require 'auto-complete-yasnippet)
     (use-package haml-mode
       :ensure t)
     ;; (use-package rvm
     ;;   :ensure t
     ;;   :hook
     ;;   (ruby-mode . rvm-activate-corresponding-ruby))
     ;; (rvm-use-default)
     (use-package beacon
       :ensure t
       :init
       (beacon-mode))
     (use-package rainbow-mode
       :ensure t)
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
     (require 'ruby-config-new)
     (require 'keys-config-new)

   #+END_SRC



** Set up HighLine mode
   #+BEGIN_SRC elisp
     (use-package highline
       :ensure t
       :config
       (global-highline-mode t)
       (setq highline-face '((:background "gray40")))
       (set-face-attribute 'region nil :background "DarkOliveGreen")
       (setq highline-vertical-face (quote ((t (:background "lemonChiffon2"))))))
     (set-face-attribute 'show-paren-match nil :foreground "CadetBlue")

     (use-package hlinum
       :ensure t)
     (use-package linum-relative
       :ensure t)

       (global-linum-mode)
       (hlinum-activate)

   #+END_SRC

** Company
   #+BEGIN_SRC elisp
               (use-package company
                 :ensure t
                 :defer 2
                 :diminish
                 :custom
                 (company-minimum-prefix-length 1)
                 (company-idle-begin 0.0)
                 (company-show-numbers t)
                 (company-tooltip-align-annotations 't)
                 (global-company-mode t))

               (require 'company)
               (add-hook  'after-init-hook 'global-company-mode)
               (use-package company-quickhelp
                 :config
                 :init
                 (company-quickhelp-mode))
               (use-package lsp-mode
                 :commands lsp
                 :hook ((ruby-mode . lsp))
                 :custom          (lsp-auto-configure t)
                                   (lsp-prefer-flymake nil)
                                   (lsp-inhibit-message t)
                                   (lsp-eldoc-render-all nil)

                 :ensure t)
     (use-package lsp-ui
       :commands lsp-ui-mode
       :after lsp-mode
       :config
       (define-key lsp-ui-mode-map "\C-ca" 'lsp-execute-code-action)
       (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
       (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
       (define-key lsp-ui-mode-map (kbd "<f5>") #'lsp-ui-find-workspace-symbol)
       )

     (use-package lsp-treemacs
       :after lsp-mode
       :config
       (lsp-treemacs-sync-mode t)
       )

               ;;(require 'lsp)
               ;;(require 'lsp-mode)
               ;;(require 'lsp-clients)

               (require 'lsp-ui-flycheck)
               ;;(require 'lsp-solargraph)
               ;;     (require 'lsp-mode)
               (setq lsp-inhibit-message t)
               (setq lsp-prefer-flymake nil)
                                                       ;  ; (setq lsp-eldoc-render-all nil)
               (setq lsp-eldoc-render-all nil)

               ;;      (setq lsp-highlight-symbol-at-point t)
               ;; (setq  lsp-java--workspace-folders (list "/Users/aturetzky/dev/git/permission-center/api"))
               ;; (setq lsp-java-format-settings-profile "Quantcast")
               ;; (setq lsp-java-format-settings-url "~/Users/aturetzky/eclipse-java-google-style.xml")
               ;; (require 'lsp-java)
               ;; (add-hook 'java-mode-hook #'lsp-java-enable)
               ;; (add-hook 'java-mode-hook 'flycheck-mode)
               ;; (add-hook 'java-mode-hook 'company-mode)
               ;; (add-hook 'java-mode-hook (lambda ()(lsp-ui-flycheck-enable t)))
               ;; (add-hook 'java-mode-hook 'lsp-ui-mode)
               ;; (add-hook 'java-mode-hook 'lsp-ui-sideline-mode)
     ;;          (require 'lsp-ui)
     ;;          (require 'lsp-ui-flycheck)
     ;;          (setq lsp-prefer-flymake nil)
               ;;     (setq lsp-ui-doc-enable-eldoc nil)
               ;; (setq lsp-ui-sideline-enable t)
               ;;       (setq lsp-ui-sideline-show-symbol nil)
               ;;       (setq lsp-ui-sideline-show-hover nil)
               ;;       (setq lsp-ui-sideline-show-code-actions t)
               ;;       (setq lsp-ui-sideline-update-mode 'point)
               ;;      (setq lsp-ui-flycheck-live-reporting t)
               ;;      (setq lsp-ui-flycheck-enable t)
               ;;      (setq lsp-ui-sideline-enable nil)
               ;;      (lsp-ui-sideline-mode t)

               ;; (setq lsp-java-import-maven-enabled nil);
               ;; (setq lsp-java-import-gradle-enabled t)
               ;; (setq lsp-java-progress-report t)
               ;; (setq lsp-java-auto-build t)
               ;;      (setq lsp-ui-doc-mode nil)
               ;;      (setq lsp-ui-doc-enable t)


               (setq lsp-message-project-root-warning t)
               (setq lsp-auto-guess-root t)

               (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
               (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)
               (use-package company-box
                 :after company
                 :ensure t
                 :diminish
                 :hook
                 (company-mode . company-box-mode)
                 :custom (company-box-icons-alist 'company-box-icons-all-the-icons))


   #+END_SRC

** Eclim
   eclim lets you use eclipse as in the background for compilation
   warnings and code completion
   #+BEGIN_SRC elisp
     ;;     (require 'eclim)
     ;;     (require 'eclimd)
     ;;     (use-package ac-emacs-eclim
     ;;       :ensure t)
     ;;     (require 'ac-emacs-eclim)
     ;;     (ac-emacs-eclim-java-setup)
     ;;     (setq eclim-executable "~/eclipse/java-oxygen-tar/Eclipse.app/Contents/Eclipse/eclim")
     ;;     (setq eclimd-executable "~/eclipse/java-oxygen-tar/Eclipse.app/Contents/Eclipse/eclimd")
   #+END_SRC

** Projectile
   Projectile helps looking around in projects
   #+BEGIN_SRC elisp
          (use-package projectile
            :ensure t
            :init
            (projectile-global-mode)
            (setq projectile-switch-project-action #'projectile-dired)
            (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
            (setq projectile-require-project-root nil)
            (setq projectile-indexing-method 'alien))

          (use-package counsel-projectile
            :ensure t
            :init
            (counsel-projectile-mode))
   #+END_SRC

** Auto-Modes
   associate some fiels wit the right modes
   #+BEGIN_SRC elisp
     (add-to-list 'auto-mode-alist
                  (cons
                   (concat "\\." (regexp-opt '("xml" "xsd" "svg" "rss" "rng" "build" "config") t) "\\'" )'nxml-mode))

     ;;
     ;; What files to invoke the new html-mode for?
     (add-to-list 'auto-mode-alist '("\\.inc\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.[sj]?html?\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.t\\'" . perl-mode))
     (add-to-list 'auto-mode-alist '("\\.pp\\'" . puppet-mode))
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
     ;;


     (add-hook 'html-mode-hook 'abbrev-mode)
     (add-hook 'web-mode-hook 'abbrev-mode)

   #+END_SRC

** Dash at point
   I use dash for doc looks up and this alows me to call it from emacs
   with =C-c d=
   #+BEGIN_SRC elisp
;;     (autoload 'dash-at-point "dash-at-point"
;;       "Search the word at point with Dash." t nil)
   #+END_SRC

** Markdown Mode
   #+BEGIN_SRC elisp
     (autoload 'markdown-mode' "markdown-mode" "Major Mode for editing Markdown" t)
     (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
   #+END_SRC

** Ruby stuff that should be in another file actually.
   #+BEGIN_SRC elisp
     (autoload 'ruby-mode "ruby-mode"
       "Mode for editing ruby source files" t)
     (setq auto-mode-alist
           (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
     (setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                          interpreter-mode-alist))
   #+END_SRC
** Dired-X
   better dir listings
   #+BEGIN_SRC elisp
     (require 'dired-x)
     (setq dired-omit-files
           (rx(or(seq bol(? ".") "#")
                 (seq bol"."(not(any".")))
                 (seq "~" eol)
                 (seq bol "CVS" eol)
                 (seq bol "svn" eol))))

     (setq dired-omit-extensions
           (append dired-latex-unclean-extensions
                   dired-bibtex-unclean-extensions
                   dired-texinfo-unclean-extensions))


     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))

   #+END_SRC
** Tabs setup
***  tabs are 4 spaces (no Tabs)
    #+BEGIN_SRC elisp
      (setq-default indent-tabs-mode nil)
      (setq-default c-basic-offset 4)
    #+END_SRC
** Disabled For now but could be back anytime soon!
***   Multiple cursors
    [[https://github.com/magnars/multiple-cursors.el][=mulitple-cursors=]] is a cool tool that can can be used for
    quick and easy refactoring.  However I usually get into trouble
    whe I try to use it
    #+BEGIN_SRC elisp
      ;;(require 'multiple-cursors)
    #+END_SRC
*** Kill whitespace and in buffers
    Personally I like this as it cleans up files. However in shared
    codebases where others aren't as tidy it can lead to some annoying
    pull requests.

    #+BEGIN_SRC elisp
      ;;(require 'whitespace)
      ;;(autoload 'nuke-trailing-whitespace "whitespace" nil t)
      ;;(add-hook 'write-file-hooks 'nuke-trailing-whitespace)

      ;;(require 'start-opt)
      ;; (defadvice whitespace-cleanup (around whitespace-cleanup-indent-tab
      ;;                                       activate)
      ;;   "Fix whitespace-cleanup indent-tabs-mode bug"
      ;;   (let ((whitespace-indent-tabs-mode indent-tabs-mode)
      ;;         (whitespace-tab-width tab-width))
      ;;     ad-do-it))
      ;; (add-to-list 'nuke-trailing-whitespace-always-major-modes 'csharp-mode)

    #+END_SRC
** SQL Mode
   set up sql mode
   #+BEGIN_SRC elisp
     (add-hook 'sql-mode-hook 'my-sql-mode-hook)
     (defun my-sql-mode-hook()
       (message "SQL mode hook executed")
       (define-key sql-mode-map [f5] 'sql-send-buffer))

     (setq sql-ms-program "osql")
     (require 'sql)
     (setq sql-mysql-program "mysql")
     (setq sql-pop-to-buffer-after-send-region nil)
     (setq sql-product (quote ms))
     (setq sql-mysql-login-params (append sql-mysql-login-params '(port)))
   #+END_SRC
** Javascript
  #+BEGIN_SRC elisp

    (exec-path-from-shell-initialize)
    (use-package rjsx-mode
      :ensure t)
    (add-hook 'js2-mode-hook 'lsp)
    (add-hook 'rjsx-mode-hook 'lsp)
    (add-hook 'rjsx-mode-hook 'emmet-mode)

    (use-package prettier-js
      :config
      (add-hook 'js2-mode-hook 'prettier-js-mode)
      (add-hook 'rjsx-mode-hook 'prettier-js-mode)
      )

    (setq emmet-expand-jsx-className? t)

  #+END_SRC
** Deft
   #+begin_src elisp
     (use-package deft
       :ensure t
       :config
       (setq deft-extensions'("org" "txt" "md"))
       (setq deft-default-extension "org")
       (setq deft-recursive t)
       (setq deft-directory "~/Documents/notes")
       (setq deft-use-filename-as-title nil)
       (setq deft-use-filter-string-for-filename t)
       (setq deft-auto-save-interval 0)
       (setq deft-file-naming-rules '((noslash . "-")
                                       (nospace . "-")
                                       (case-fn . downcase)))
       (setq deft-text-mode 'org-mode)
       (global-set-key (kbd "<f8>") 'deft)
       )
   #+end_src
** Cypher Mode
   #+BEGIN_SRC elisp
     (use-package cypher-mode
       :ensure t)
     (setq n4js-cli-program "~/Downloads/cypher-shell/cypher-shell")
     (setq n4js-cli-arguments '("-u" "neo4j"))
     (setq n4js-pop-to-buffer t)
     (setq n4js-font-lock-keywords cypher-font-lock-keywords)
   #+END_SRC
** Tell the world we are providing something useful
   #+BEGIN_SRC elisp
     (provide 'emacs-config-new)
   #+END_SRC



   #+DESCRIPTION: Literate source for my Emacs configuration
   #+PROPERTY: header-args:elisp :tangle ~/emacs/config/emacs-config-new.el
   #+PROPERTY: header-args:ruby :tangle no
   #+PROPERTY: header-args:shell :tangle no
   #+OPTIONS:     num:t whn:nil toc:t todo:nil tasks:nil tags:nil
   #+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
   #+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
