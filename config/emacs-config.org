#+TITLE: General Emacs Configuration options
#+AUTHOR: Ari Turetzky
#+EMAIL: ari@turetzky.org
#+TAGS: emacs config
#+PROPERTY: header-args:sh  :results silent :tangle no

Contained herein are my general non-mode specific(mostly)
configuration  *This is a Work in Progress*

* Some simple stuff around how it looks
#+BEGIN_SRC elisp
  (if (window-system)
      (tool-bar-mode t))
  (menu-bar-mode -1)
  (show-paren-mode 1)
  (setq uniquify-buffer-name-style t)
  (setq uniquify-buffer-name-style (quote post-forward))
  (setq uniquify-min-dir-content 1)
#+END_SRC

* Some Tex-iness
#+BEGIN_SRC elisp
  (setq TeX-command-list
        (quote (
                ("TeX" "tex \\\\nonstopmode\\\\input %t" TeX-run-TeX nil t)
                ("LaTeX" "%l -shell-escape \\\\nonstopmode\\\\input{%t}" TeX-run-LaTeX nil t)
                ("LaTeX PDF" "pdflatex -shell-escape \\\\nonstopmode\\\\input{%t}" TeX-run-LaTeX nil t)
                ("View" "%v" TeX-run-discard nil nil)
                ("Print" "gsview32 %f" TeX-run-command t nil)
                ("File" "dvips %d -o %f " TeX-run-command t nil)
                ("BibTeX" "bibtex %s"</FONT> TeX-run-BibTeX nil nil)
                ("Index" "makeindex %s" TeX-run-command nil t)
                ("Check" "lacheck %s" TeX-run-compile nil t)
                ("Other" "" TeX-run-command t t))))

#+END_SRC

* Get some package goodness
#+BEGIN_SRC elisp
  (require 'package)
#+END_SRC

find our packages in the more reputable places
#+BEGIN_SRC elisp
  (add-to-list 'package-archives
               '("marmalade" . "https://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("elpa" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/"))
#+END_SRC

And now we can get kick off the package manager
#+BEGIN_SRC elisp
(package-initialize)
#+END_SRC

=use-package= makes it easy to require a file without a bunch of
requires like you'll find just below a bit and it will also ensure it
gets installed from a repository we defined above

#+BEGIN_SRC elisp
(require 'use-package)
#+END_SRC

I store the load paths to locally downloaded package in their own
config file [[file:load-path-config.org][load-path-config]]

#+BEGIN_SRC elisp
(require 'load-path-config)
#+END_SRC

And here we have the first use of use-pacakge!
#+BEGIN_SRC elisp
  (use-package js-comint
    :ensure t
    :init
    (setq inferior-js-program-command "node")
    :bind
    (("\C-x\C-e" . js-send-last-sexp)
     ("\C-\M-x"  . js-send-last-sexp-and-go)
     ("\C-cb"    . js-send-buffer)
     ("\C-c\C-b" . js-send-buffer-and-go)
     ("\C-cl"    . js-load-file-and-go))
    )
#+END_SRC



tell the world we are providing something useful
#+BEGIN_SRC elisp
(provide 'emacs-config-new)
#+END_SRC



#+DESCRIPTION: Literate source for my Emacs configuration
#+PROPERTY: header-args:elisp :tangle ~/emacs/config/emacs-config-new.el
#+PROPERTY: header-args:ruby :tangle no 
#+PROPERTY: header-args:shell :tangle no 
#+OPTIONS:     num:nil toc:t todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js


