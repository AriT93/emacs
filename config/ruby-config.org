# coding: utf-8
#+TITLE: Ruby Configuration options
#+AUTHOR: Ari Turetzky
#+EMAIL: ari@turetzky.org
#+TAGS: emacs config ruby
#+PROPERTY: header-args:sh  :results silent :tangle no

* Ruby Mode!
first a little housekeeping for the linter
#+BEGIN_SRC elisp
;;; ruby-config --- Summary
;;; Commentary:
;;; Code:
#+END_SRC

** Set up some autoloads and associate files
#+BEGIN_SRC elisp
(autoload 'ruby-mode "ruby-mode" "Ruby editing mode." t)
(setq auto-mode-alist (cons '("\\.rb$" . ruby-mode)  auto-mode-alist))
(setq auto-mode-alist (cons '("\\.rhtml$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.erb$" . web-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.html.erb$" . web-mode) auto-mode-alist))

#+END_SRC
** Yasnippet integeraton
   Apparently this is also where I manage it's  configuration
*** TODO Migrate yasnippet to =emacs-config.org=
#+BEGIN_SRC elisp
  (yas-global-mode)
  (global-flycheck-mode)
#+END_SRC
** Yaml
*** TODO  Move yaml to =emacs-config.org=
    #+BEGIN_SRC elisp

   ;; yaml
 (require 'yaml-mode)
 (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
 (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
    #+END_SRC
** Ruby Tools
   convenience stuff, mostly string to symbol, single to double qouts
   and such
#+BEGIN_SRC elisp
     (use-package ruby-tools
       :ensure t
       :init
       (add-hook 'ruby-mode #'ruby-tools-mode)
       :diminish ruby-tools-mode)
    (use-package rubocopfmt
      :ensure t
      :hook
      (ruby-mode . rubocopfmt-mode)
     )
#+END_SRC
** Seeing Is Believing
   This is a wonderful pacakge.  [[https://github.com/JoshCheek/seeing_is_believing][Seeing is Believing]] uses xmpfilter to
evaluate ruby code and add comment with the output so you can see what
is going on while you write code.
#+BEGIN_SRC elisp
  (use-package seeing-is-believing
    :diminish seeing-is-believing
    :ensure t
    :config
    (setq seeing-is-believing-alignment 'chunk)
    (setq seeing-is-believing-max-length 150)
    (setq seeing-is-believing-max-results 15)
    :hook
    (ruby-mode . seeing-is-believing)
    )
#+END_SRC


** Ruby Mode Hook
#+BEGIN_SRC elisp
  (use-package rspec-mode
    :ensure t
    :config
    (setq rspec-use-spring-when-possible nil)
    (setq rspec-command-options "--format progress"))
    (add-hook 'after-init-hook  'inf-ruby-switch-setup)
  
    (require 'ruby-block)
    (diminish 'ruby-block-mode)
    (require 'ruby-electric)
    (diminish 'ruby-electric-mode)
    (add-hook 'ruby-mode-hook
              (lambda()
                (add-hook 'write-file-functions
                          #'(lambda()
                             (save-excursion
                               (untabify (point-min) (point-max))
                               (delete-trailing-whitespace)
                               )))
                (set (make-local-variable 'indent-tabs-mode) 'nil)
                (set (make-local-variable 'tab-width) 2)
                (ruby-electric-mode t)
                (ruby-block-mode t)
                (local-set-key (kbd "<return>") 'newline-and-indent)
                (diminish 'org-mode  "î¤—")
                (diminish 'auto-revert-mode)
                (diminish 'yas-minor-mode)
                (diminish 'eldoc-mode)
                (diminish 'org-src-mode)
                (diminish 'eclim-mode)
                (diminish 'abbrev-mode)
                (diminish 'ivy-mode)
                (diminish 'battery-mode)
                (diminish 'global-highline-mode)
                (diminish 'ruby-block-mode)
                (diminish 'ruby-electric-mode)
                (diminish "seeing-is-believing")
                (diminish 'hs-minor-mode)
                (diminish 'ruby-block-mode)
                (diminish 'global-highline-mode)
                ))
#+END_SRC

** File associations

#+BEGIN_SRC elisp

(add-to-list 'auto-mode-alist '("\\.html?" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\.erb" . web-mode))
#+END_SRC
** Set up some autocomplete goodness

   #+BEGIN_SRC elisp
     (use-package rbenv
       :ensure t
       :init
       (setq rbenv-show-active-ruby-in-modeline nil)
       :config
       (setq rbenv-installation-dir "/usr/local/opt/rbenv")
       (global-rbenv-mode t))

          (require 'lsp)
          (add-hook 'ruby-mode-hook #'lsp)
   #+END_SRC
** Key-bindings some still used and some more ac config
damn this is a mess
#+BEGIN_SRC elisp
  
  
  ;; (setq ri-ruby-script (expand-file-name "~/emacs/site/lisp/ri-emacs.rb"))
    ;; (autoload 'ri "ri-ruby.el" nil t)
  (use-package autotest
    :ensure t
    )
#+END_SRC
** hideshow for folding
#+BEGIN_SRC elisp
  (add-hook 'ruby-mode-hook
    (lambda () (hs-minor-mode)))

  (eval-after-load "hideshow"
    '(add-to-list 'hs-special-modes-alist
      `(ruby-mode
        ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
        ,(rx (or "}" "]" "end"))                       ; Block end
        ,(rx (or "#" "=begin"))                        ; Comment start
        ruby-forward-sexp nil)))

  (global-set-key (kbd "C-c h") 'hs-hide-block)
  (global-set-key (kbd "C-c s") 'hs-show-block)
#+END_SRC
** Provide the new- config
#+BEGIN_SRC elisp
(provide 'ruby-config-new)
;;; ruby-config-new ends here
#+END_SRC
    #+DESCRIPTION: Literate source for my Ruby configuration
    #+PROPERTY: header-args:elisp :tangle ~/emacs/config/ruby-config-new.el
    #+PROPERTY: header-args:ruby :tangle no
    #+PROPERTY: header-args:shell :tangle no
    #+OPTIONS:     num:t whn:nil toc:t todo:nil tasks:nil tags:nil
    #+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
    #+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
